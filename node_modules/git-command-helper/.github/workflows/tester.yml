name: Tester

on:
  push:
    paths:
      - '**/src/*.ts'
      - '**/test/*.ts'
      - '**/src/*.js'
      - '**/test/*.js'
      - '**/.github/workflows/tester.yml'
      - '**/package.json'
      - '**/yarn.lock'
      - '**/package-lock.json'
  pull_request:
    types:
      - closed
    paths:
      - '**/src/*.ts'
      - '**/test/*.ts'
      - '**/src/*.js'
      - '**/test/*.js'
      - '**/package.json'
      - '**/yarn.lock'
      - '**/package-lock.json'
  workflow_dispatch:

jobs:
  tester:
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        node-version: ['14.x', '16.x', '18.x']
      fail-fast: false
      #max-parallel: 6
    env:
      NODE_OPTIONS: '--max_old_space_size=8192' #8192 4096 --expose-gc
      YARN_ENABLE_IMMUTABLE_INSTALLS: false
      ACCESS_TOKEN: ${{ secrets.ACCESS_TOKEN || secrets.GITHUB_TOKEN }}

    runs-on: ubuntu-latest

    name: Tester
    steps:
      - uses: actions/checkout@v3
        with:
          token: ${{ secrets.ACCESS_TOKEN }}
          submodules: recursive

      - name: Set EOL git configs
        continue-on-error: true
        run: |
          git config core.eol lf
          git config core.autocrlf input
          git checkout-index --force --all

      - name: Pull & update submodules recursively
        continue-on-error: true
        run: |
          git submodule update --init --recursive
          git submodule update --recursive --remote
          git pull -X theirs

      - name: initialize nodejs
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}

      - name: Enable corepack
        run: corepack enable

      - uses: actions/cache@v3
        id: cache
        with:
          path: |
            **/dist
            **/tmp
            **/node_modules
            /.yarn
            ./yarn.lock
          key: ${{ runner.os }}-${{ matrix.node-version }}
          restore-keys: |
            ${{ runner.os }}-${{ matrix.node-version }}
            ${{ runner.os }}-

      - name: Set env
        id: set-env
        shell: bash
        run: |
          echo "${HOME}/.local/bin" >> $GITHUB_PATH
          echo "${GITHUB_WORKSPACE}/bin" >> $GITHUB_PATH
          echo "${GITHUB_WORKSPACE}/node_modules/.bin" >> $GITHUB_PATH
          echo "GITHUB_SHA_SHORT=$(echo $GITHUB_SHA | cut -c 1-6)" >> $GITHUB_ENV
          echo "GITHUB_SHA_SHORT=$(echo $GITHUB_SHA | cut -c 1-6)" >> $GITHUB_OUTPUT
          echo "GITHUB_BRANCH=${GITHUB_REF#refs/heads/}" >> $GITHUB_ENV
          echo "GITHUB_BRANCH=${GITHUB_REF#refs/heads/}" >> $GITHUB_OUTPUT
          echo "GITHUB_COMMIT_URL=https://github.com/${{github.repository}}/commit/$(echo $GITHUB_SHA)" >> $GITHUB_ENV
          echo "GITHUB_COMMIT_URL=https://github.com/${{github.repository}}/commit/$(echo $GITHUB_SHA)" >> $GITHUB_OUTPUT
          echo "GITHUB_RUNNER_URL=https://github.com/${{github.repository}}/commit/${{github.sha}}/checks/${{github.run_id}}" >> $GITHUB_ENV
          echo "GITHUB_RUNNER_URL=https://github.com/${{github.repository}}/commit/${{github.sha}}/checks/${{github.run_id}}" >> $GITHUB_OUTPUT
          echo "CACHE_NPM=$(npm config get cache)" >> $GITHUB_ENV
          echo "CACHE_NPM=$(npm config get cache)" >> $GITHUB_OUTPUT
          YARN_CURRENT=$(yarn -v)
          YARN_BERRY=3.2.1
          if [[ "ok" == "$(echo | awk "(${YARN_CURRENT} > ${YARN_BERRY}) { print \"ok\"; }")" ]]; then
            echo "CACHE_YARN=$(yarn config get cacheFolder)" >> $GITHUB_ENV
            echo "CACHE_YARN=$(yarn config get cacheFolder)" >> $GITHUB_OUTPUT
          else
            echo "CACHE_YARN=$(yarn cache dir)" >> $GITHUB_ENV
            echo "CACHE_YARN=$(yarn cache dir)" >> $GITHUB_OUTPUT
          fi
          echo "architecture=$(getconf LONG_BIT)" >> $GITHUB_ENV
          if [ -f "package-lock.json" ]; then
              echo "PACKAGE-MANAGER=npm" >> $GITHUB_OUTPUT
              echo "PACKAGE-MANAGER=npm" >> $GITHUB_ENV
          else
              echo "PACKAGE-MANAGER=yarn" >> $GITHUB_OUTPUT
              echo "PACKAGE-MANAGER=yarn" >> $GITHUB_ENV
          fi
          unameOut="$(uname -s)"
          case "${unameOut}" in
              Linux*)     machine=linux;;
              Darwin*)    machine=mac;;
              CYGWIN*)    machine=cygwin;;
              MINGW*)     machine=mingw;;
              *)          machine="unknown:${unameOut}"
          esac
          echo "machine=$machine" >> $GITHUB_OUTPUT
          echo "machine=$machine" >> $GITHUB_ENV

      - name: Install Legacy Peer Dependencies
        run: |
          if [ "${{ steps.set-env.outputs.PACKAGE-MANAGER }}" == "npm" ]; then
              npm install --legacy-peer-deps
          else
              yarn install
          fi
        id: install-legacy
        shell: bash
        continue-on-error: true

      - name: Install Verbose
        if: steps.install-legacy.outcome == 'failure'
        id: install-verbose
        continue-on-error: true
        shell: bash
        run: |
          find . -name "node_modules" -type d -prune -exec rm -rf '{}' +
          if [ "${{ steps.set-env.outputs.PACKAGE-MANAGER }}" == "npm" ]; then
              npm install --verbose
          else
              yarn install --verbose
          fi

      - name: Install Update Binary
        id: install-update
        if: steps.install-verbose.outcome == 'failure'
        shell: bash
        run: |
          find . -name "node_modules" -type d -prune -exec rm -rf '{}' +
          if [ "${{ steps.set-env.outputs.PACKAGE-MANAGER }}" == "npm" ]; then
              npm install --no-shrinkwrap --update-binary
          else
              yarn install
          fi
        continue-on-error: true

      - name: Clean Install
        id: install-clean
        shell: bash
        if: steps.install-update.outcome == 'failure'
        run: |
          find . -name "yarn.lock" -type d -prune -exec rm -rf '{}' +
          find . -name "package-lock.json" -type d -prune -exec rm -rf '{}' +
          find . -name "node_modules" -type d -prune -exec rm -rf '{}' +
          if [ "${{ steps.set-env.outputs.PACKAGE-MANAGER }}" == "npm" ]; then
              npm install
          else
              touch yarn.lock
              yarn install
          fi

      - name: Check Updates
        shell: bash
        if: steps.install-clean.outcome == 'failure'
        continue-on-error: true
        run: |
          curl -L https://github.com/dimaslanjaka/nodejs-package-types/raw/main/postinstall.js > postinstall.js
          if [ "${{ steps.set-env.outputs.PACKAGE-MANAGER }}" == "npm" ]; then
              node postinstall.js
          else
              node postinstall.js --yarn
          fi

      - name: test
        run: npm test

  coverage:
    needs: tester
    runs-on: ${{ matrix.os }}
    env:
      NODE_OPTIONS: '--max_old_space_size=8192' #8192 4096 --expose-gc
      YARN_ENABLE_IMMUTABLE_INSTALLS: false
      ACCESS_TOKEN: ${{ secrets.ACCESS_TOKEN || secrets.GITHUB_TOKEN }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        node-version: ['14.x', '16.x', '18.x']
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: true
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}
      - uses: actions/cache@v3
        id: cache
        with:
          path: |
            **/dist
            **/tmp
            **/node_modules
            /.yarn
            ./yarn.lock
          key: ${{ runner.os }}-${{ matrix.node-version }}
          restore-keys: |
            ${{ runner.os }}-${{ matrix.node-version }}
            ${{ runner.os }}-
      - name: Install Dependencies
        run: npm install
      - name: Coverage
        run: npm run test-cov
        env:
          CI: true
      - name: Coveralls
        uses: coverallsapp/github-action@master
        with:
          github-token: ${{ secrets.ACCESS_TOKEN }}
