name: Deploy HexoJS

on:
  # Runs on pushes targeting the default branch
  push:
    branches: ['master']

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

# Allow one concurrent deployment
concurrency:
  group: 'pages'
  cancel-in-progress: true

jobs:
  # Build job
  build:
    runs-on: ubuntu-latest
    # runner timeout
    timeout-minutes: 120
    strategy:
      fail-fast: false
    # setup env for process.env for nodejs and env.key for shell and steps
    env:
      cache_name: kamisato-ayaka
      NODE_OPTIONS: '--max_old_space_size=8192' #8192 4096 --expose-gc
    steps:
      # checkout
      - name: Checkout
        uses: actions/checkout@v3
        with:
          # Repository name with owner. For example, actions/checkout
          # Default: ${{ github.repository }}
          repository: 'dimaslanjaka/static-blog-generator-hexo'

          # The branch, tag or SHA to checkout. When checking out the repository that
          # triggered a workflow, this defaults to the reference or SHA for that event.
          # Otherwise, uses the default branch.
          ref: 'master'

          # Personal access token (PAT) used to fetch the repository. The PAT is configured
          # with the local git config, which enables your scripts to run authenticated git
          # commands. The post-job step removes the PAT.
          #
          # We recommend using a service account with the least permissions necessary. Also
          # when generating a new PAT, select the least scopes necessary.
          #
          # [Learn more about creating and using encrypted secrets](https://help.github.com/en/actions/automating-your-workflow-with-github-actions/creating-and-using-encrypted-secrets)
          #
          # Default: ${{ github.token }}
          token: ${{ secrets.CONFIG_PAT }}

          # Whether to checkout submodules: `true` to checkout submodules or `recursive` to
          # recursively checkout submodules.
          #
          # When the `ssh-key` input is not provided, SSH URLs beginning with
          # `git@github.com:` are converted to HTTPS.
          #
          # Default: false
          submodules: 'recursive'

          # Relative path under $GITHUB_WORKSPACE to place the repository
          # path: ''

      # setup
      - name: Setup Pages
        uses: actions/configure-pages@v2
      ## setup node
      - uses: actions/setup-node@v3
        with:
          node-version: '18'
          architecture: 'x64'
          cache: 'npm'
          cache-dependency-path: '**/package-lock.json'
          check-latest: true
      ## set variables and git configs
      - name: Set env
        id: set-env
        shell: bash
        run: |
          echo "GITHUB_SHA_SHORT=$(echo $GITHUB_SHA | cut -c 1-6)" >> $GITHUB_ENV
          echo "GITHUB_BRANCH=${GITHUB_REF#refs/heads/}" >> $GITHUB_ENV
          echo "GITHUB_COMMIT_URL=https://github.com/${{github.repository}}/commit/$(echo $GITHUB_SHA)" >> $GITHUB_ENV
          echo "GITHUB_RUNNER_URL=https://github.com/${{github.repository}}/commit/${{github.sha}}/checks/${{github.run_id}}" >> $GITHUB_ENV
          echo "CACHE_NPM=$(npm config get cache)" >> $GITHUB_ENV
          echo "CACHE_YARN=$(yarn cache dir)" >> $GITHUB_ENV
          echo "CACHE_YARN2=$(yarn config get cacheFolder)" >> $GITHUB_ENV
          echo "cache-npm=$(npm config get cache)" >> $GITHUB_OUTPUT
          echo "cache-yarn=$(yarn cache dir)" >> $GITHUB_OUTPUT
          echo "cache-yarn2=$(yarn config get cacheFolder)" >> $GITHUB_OUTPUT
          git config core.eol lf
          git config core.autocrlf input
          git checkout-index --force --all
          git config --global user.name 'github-actions[bot]'
          git config --global user.email '41898282+github-actions[bot]@users.noreply.github.com'
      ## setup cache
      - uses: pat-s/always-upload-cache@v3.0.11
        id: cache
        with:
          path: |
            ${{ steps.set-env.outputs.cache-npm }}
            ${{ steps.set-env.outputs.cache-yarn }}
            ${{ steps.set-env.outputs.cache-yarn2 }}
            ./db.json
            ./public
            ./tmp
            ./build
            ./source/_posts
            **/node_modules
          # key: "${{ env.cache_name }}-${{ hashFiles('**/package-lock.json') }}"
          key: ${{ env.cache_name }}
          restore-keys: |
            ${{ env.cache_name }}

      # build start
      - name: Install Global Packages
        # if: steps.cache.outputs.cache-hit != 'true'
        run: npm i -g typescript ts-node gulp-cli hexo-cli webpack-cli rimraf npm-run-all npm-check-updates --location=global

      - name: Install dependencies
        id: install-npm
        shell: bash
        continue-on-error: true
        run: |
          npm run update
      - name: Install Update
        if: steps.install-npm.outcome == 'failure'
        run: npm update

      - name: Dump process.env
        run: npx gulp env

      - run: gulp post:standalone
      - run: gulp post:copy
      - run: hexo generate
      - run: gulp seo
      - run: gulp safelink

      # upload
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v1
        with:
          ## Hexo public_dir in _config.yml
          path: 'public'

  # Deployment job
  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v1
