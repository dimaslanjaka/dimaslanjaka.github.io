<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>WMI</title>
  <icon>https://www.webmanajemen.com/logo.png</icon>
  <subtitle>Website Management Indonesia</subtitle>
  <link href="https://www.webmanajemen.com/atom.xml" rel="self"/>
  
  <link href="https://www.webmanajemen.com/"/>
  <updated>2024-08-16T22:02:21.000Z</updated>
  <id>https://www.webmanajemen.com/</id>
  
  <author>
    <name>Dimas Lanjaka</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>PySide6 autocomplete input text</title>
    <link href="https://www.webmanajemen.com/2024/08/pyside6-autocomplete-input-text.html"/>
    <id>https://www.webmanajemen.com/2024/08/pyside6-autocomplete-input-text.html</id>
    <published>2024-08-16T21:58:32.000Z</published>
    <updated>2024-08-16T22:02:21.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Sample-App">Sample App</h2><p>sample PySide6 application with autocomplete functionality using <code>QLineEdit</code> and <code>QCompleter</code>. This example creates a simple window with a text input field that provides autocomplete suggestions as the user types.</p><pre><code class="hljs python"><span class="hljs-keyword">from</span> PySide6.QtWidgets <span class="hljs-keyword">import</span> QApplication, QMainWindow, QLineEdit, QCompleter, QVBoxLayout, QWidget<span class="hljs-keyword">from</span> PySide6.QtCore <span class="hljs-keyword">import</span> QStringListModel<span class="hljs-keyword">class</span> <span class="hljs-title class_">AutocompleteApp</span>(<span class="hljs-title class_ inherited__">QMainWindow</span>):    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):        <span class="hljs-built_in">super</span>().__init__()        <span class="hljs-comment"># Set up the main window</span>        <span class="hljs-variable language_">self</span>.setWindowTitle(<span class="hljs-string">&quot;Autocomplete Example&quot;</span>)        <span class="hljs-variable language_">self</span>.setGeometry(<span class="hljs-number">100</span>, <span class="hljs-number">100</span>, <span class="hljs-number">400</span>, <span class="hljs-number">200</span>)        <span class="hljs-comment"># Create a central widget and a layout</span>        central_widget = QWidget()        layout = QVBoxLayout()        <span class="hljs-comment"># Create QLineEdit widget</span>        <span class="hljs-variable language_">self</span>.line_edit = QLineEdit()        <span class="hljs-variable language_">self</span>.line_edit.setPlaceholderText(<span class="hljs-string">&quot;Type something...&quot;</span>)        <span class="hljs-comment"># Create sample data for autocomplete</span>        data = [<span class="hljs-string">&quot;apple&quot;</span>, <span class="hljs-string">&quot;banana&quot;</span>, <span class="hljs-string">&quot;grape&quot;</span>, <span class="hljs-string">&quot;orange&quot;</span>, <span class="hljs-string">&quot;peach&quot;</span>, <span class="hljs-string">&quot;pear&quot;</span>, <span class="hljs-string">&quot;plum&quot;</span>]        <span class="hljs-comment"># Create QStringListModel and QCompleter</span>        <span class="hljs-variable language_">self</span>.model = QStringListModel(data)        <span class="hljs-variable language_">self</span>.completer = QCompleter(<span class="hljs-variable language_">self</span>.model)        <span class="hljs-variable language_">self</span>.line_edit.setCompleter(<span class="hljs-variable language_">self</span>.completer)        <span class="hljs-comment"># Add the QLineEdit to the layout</span>        layout.addWidget(<span class="hljs-variable language_">self</span>.line_edit)        central_widget.setLayout(layout)        <span class="hljs-variable language_">self</span>.setCentralWidget(central_widget)<span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:    app = QApplication([])    window = AutocompleteApp()    window.show()    app.<span class="hljs-built_in">exec</span>()</code></pre><h3 id="Explanation">Explanation:</h3><ol><li><strong><code>AutocompleteApp</code> Class</strong>: This class extends <code>QMainWindow</code> to create the main application window.</li><li><strong><code>__init__</code> Method</strong>: Sets up the window title, size, and central widget.</li><li><strong><code>QLineEdit</code></strong>: A text input field where users type text.</li><li><strong><code>QStringListModel</code></strong>: Holds the list of strings that will be used for autocomplete suggestions.</li><li><strong><code>QCompleter</code></strong>: Provides the autocomplete functionality using the <code>QStringListModel</code>.</li><li><strong>Layout</strong>: Uses <code>QVBoxLayout</code> to arrange the <code>QLineEdit</code> within the main window.</li></ol><p>To run this application, save the code to a file (e.g., <code>autocomplete_app.py</code>) and execute it with Python. Make sure you have PySide6 installed in your environment.</p><h2 id="Helper">Helper</h2><p>PySide6 set <code>QLineEdit</code> autocomplete helper</p><pre><code class="hljs python"><span class="hljs-keyword">from</span> PySide6.QtWidgets <span class="hljs-keyword">import</span> QLineEdit, QCompleter<span class="hljs-keyword">from</span> PySide6.QtCore <span class="hljs-keyword">import</span> QStringListModel<span class="hljs-keyword">from</span> typing <span class="hljs-keyword">import</span> <span class="hljs-type">List</span><span class="hljs-keyword">def</span> <span class="hljs-title function_">set_completer</span>(<span class="hljs-params">line_edit: QLineEdit, data: <span class="hljs-type">List</span>[<span class="hljs-built_in">str</span>]</span>) -&gt; <span class="hljs-literal">None</span>:    <span class="hljs-string">&quot;&quot;&quot;</span><span class="hljs-string">    Configures a QLineEdit widget with a QCompleter for autocomplete functionality.</span><span class="hljs-string"></span><span class="hljs-string">    Args:</span><span class="hljs-string">        line_edit (QLineEdit): The QLineEdit widget to which the completer will be applied.</span><span class="hljs-string">        data (List[str]): A list of strings to be used as autocomplete suggestions.</span><span class="hljs-string"></span><span class="hljs-string">    Returns:</span><span class="hljs-string">        None</span><span class="hljs-string">    &quot;&quot;&quot;</span>    <span class="hljs-comment"># Create a QStringListModel with the provided data</span>    model = QStringListModel(data)    <span class="hljs-comment"># Create a QCompleter with the model</span>    completer = QCompleter(model)    <span class="hljs-comment"># Set the completer on the QLineEdit</span>    line_edit.setCompleter(completer)</code></pre>]]></content>
    
    
    <summary type="html">How to create input text with autocomplete using PySide6 python</summary>
    
    
    
    <category term="programming" scheme="https://www.webmanajemen.com/categories/programming/"/>
    
    
    <category term="python" scheme="https://www.webmanajemen.com/tags/python/"/>
    
    <category term="pyside6" scheme="https://www.webmanajemen.com/tags/pyside6/"/>
    
  </entry>
  
  <entry>
    <title>Mobile Legends To The Stars Event Clue</title>
    <link href="https://www.webmanajemen.com/2024/06/mobile-legend-to-the-stars-event.html"/>
    <id>https://www.webmanajemen.com/2024/06/mobile-legend-to-the-stars-event.html</id>
    <published>2024-06-01T03:14:14.000Z</published>
    <updated>2024-06-19T03:07:52.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Stage-1">Stage 1</h2><p><strong>Mobile Legends</strong> - <strong>To The Star</strong> event - event jalan takdir stage <strong>1-1</strong></p><h2 id="Stage-3">Stage 3</h2><p><img src="https://github.com/dimaslanjaka/source-posts/assets/12471057/5e64b7ee-cf95-4a60-949e-a4c99bd9251e" alt=""></p><p><strong>Mobile Legends</strong> - <strong>To The Star</strong> event - event jalan takdir stage <strong>3-1</strong></p><p><img src="https://github.com/dimaslanjaka/source-posts/assets/12471057/76b9ad73-d96c-4254-a64c-a71917a69fab" alt=""></p><p><strong>Mobile Legends</strong> - <strong>To The Star</strong> event - event jalan takdir stage <strong>3-2</strong></p><p><img src="https://github.com/dimaslanjaka/source-posts/assets/12471057/30ef2420-0c05-410a-9271-82b7b1e3ae91" alt=""></p><p><strong>Mobile Legends</strong> - <strong>To The Star</strong> event - event jalan takdir stage <strong>3-3</strong></p><p><img src="https://github.com/dimaslanjaka/source-posts/assets/12471057/367d259e-04db-4958-9f5e-1ea6413d650f" alt=""></p><p><strong>Mobile Legends</strong> - <strong>To The Star</strong> event - event jalan takdir stage <strong>3-4</strong></p><p><img src="https://github.com/dimaslanjaka/source-posts/assets/12471057/65ab654d-ff85-43e2-944b-16de7ac95b10" alt=""></p><p><strong>Mobile Legends</strong> - <strong>To The Star</strong> event - event jalan takdir stage <strong>3-5</strong></p><p><img src="https://github.com/dimaslanjaka/source-posts/assets/12471057/fdeec7ac-8bf8-47cc-8288-a22b519b4e19" alt=""></p><p><strong>Mobile Legends</strong> - <strong>To The Star</strong> event - event jalan takdir stage <strong>3-6</strong></p><p><img src="https://github.com/dimaslanjaka/source-posts/assets/12471057/d872c1d5-a9f1-4565-a74b-9a80a394fb24" alt=""></p><p><strong>Mobile Legends</strong> - <strong>To The Star</strong> event - event jalan takdir stage <strong>3-7</strong></p><h2 id="Stage-4">Stage 4</h2><p><img src="https://github.com/dimaslanjaka/source-posts/assets/12471057/8aed2877-b36b-4291-b748-56ea9e9a431a" alt=""></p><p><strong>Mobile Legends</strong> - <strong>To The Star</strong> event - event jalan takdir stage <strong>4-1</strong></p><p><img src="https://github.com/dimaslanjaka/source-posts/assets/12471057/b8e49d37-7e9a-4146-8604-0b961b102697" alt=""></p><p><strong>Mobile Legends</strong> - <strong>To The Star</strong> event - event jalan takdir stage <strong>4-2</strong></p><p><img src="https://github.com/dimaslanjaka/source-posts/assets/12471057/0ec447e8-6e59-4f11-b16d-94a3948da88a" alt=""></p><p><strong>Mobile Legends</strong> - <strong>To The Star</strong> event - event jalan takdir stage <strong>4-3</strong></p><p><img src="/2024/06/mobile-legend-to-the-stars-event/stage-4-3.png" alt=""></p><p><strong>Mobile Legends</strong> - <strong>To The Star</strong> event - event jalan takdir stage <strong>4-4</strong></p><p><img src="https://github.com/dimaslanjaka/source-posts/assets/12471057/e0a4ebfa-7b87-48dc-9770-c6f17e895208" alt=""></p><p><strong>Mobile Legends</strong> - <strong>To The Star</strong> event - event jalan takdir stage <strong>4-5</strong></p><p><img src="https://github.com/dimaslanjaka/source-posts/assets/12471057/ebf0e335-9aa2-4135-8337-95528ca219b5" alt=""></p><p><strong>Mobile Legends</strong> - <strong>To The Star</strong> event - event jalan takdir stage <strong>4-6</strong></p><p><img src="https://github.com/dimaslanjaka/source-posts/assets/12471057/5d2cc230-5a6a-4c48-ae4e-b5d98a29399f" alt=""></p><p><strong>Mobile Legends</strong> - <strong>To The Star</strong> event - event jalan takdir stage <strong>4-7</strong></p><h2 id="Stage-5">Stage 5</h2><p><img src="https://github.com/dimaslanjaka/source-posts/assets/12471057/db893fad-6c1b-40e1-9bd2-4a940436893b" alt=""></p><p><strong>Mobile Legends</strong> - <strong>To The Star</strong> event - event jalan takdir stage <strong>5-5</strong></p><p><img src="https://github.com/dimaslanjaka/source-posts/assets/12471057/48fb8818-84cd-4458-9887-5ec6e1ac7549" alt=""></p><p><strong>Mobile Legends</strong> - <strong>To The Star</strong> event - event jalan takdir stage <strong>5-6</strong></p><p><img src="https://github.com/dimaslanjaka/source-posts/assets/12471057/ec5f3ad4-6b94-432c-baf7-a9186b415765" alt=""></p><p><strong>Mobile Legends</strong> - <strong>To The Star</strong> event - event jalan takdir stage <strong>5-7</strong></p><p><img src="https://github.com/dimaslanjaka/source-posts/assets/12471057/f2a75d67-b2cd-42a9-8835-2118ecf25c6e" alt=""></p><h2 id="Stage-6">Stage 6</h2><p><img src="https://github.com/dimaslanjaka/source-posts/assets/12471057/f85f60d5-d2cb-4b77-a32c-53e0823ca617" alt=""></p><p><img src="https://github.com/dimaslanjaka/source-posts/assets/12471057/ca866cc2-e23c-4f6b-8667-c5b29d571f02" alt=""></p><p><img src="https://github.com/dimaslanjaka/source-posts/assets/12471057/fc26bfd9-c7b3-47f6-acdf-4ce4aed666e2" alt=""></p><p><img src="https://github.com/dimaslanjaka/source-posts/assets/12471057/8db00ef0-96a1-4a93-86e4-1aa90dd2e1e7" alt=""></p><p><img src="https://github.com/dimaslanjaka/source-posts/assets/12471057/bc5554fe-20c5-4df4-b79f-fa9a23cca66d" alt=""></p><p><img src="https://github.com/dimaslanjaka/source-posts/assets/12471057/567558ad-dd55-45a5-ae81-cd3079b490d1" alt=""></p><p><img src="https://github.com/dimaslanjaka/source-posts/assets/12471057/2834d7d4-a3e7-4bfc-a071-29efebf5c830" alt=""></p><h2 id="Stage-7">Stage 7</h2><h3 id="Stage-7-1">Stage 7-1</h3><p><img src="https://github.com/dimaslanjaka/source-posts/assets/12471057/a7933fd9-5904-47b1-9ed2-0f1d4d966470" alt=""></p><h3 id="Stage-7-2">Stage 7-2</h3><p><img src="https://github.com/dimaslanjaka/source-posts/assets/12471057/ea4b3bca-98f7-4570-9b48-69e70ee9fb85" alt=""></p><h3 id="Stage-7-3">Stage 7-3</h3><p><img src="https://github.com/dimaslanjaka/source-posts/assets/12471057/c3af09d9-6756-49a2-8306-f3531bff049e" alt=""></p><h3 id="Stage-7-4">Stage 7-4</h3><p><img src="https://github.com/dimaslanjaka/source-posts/assets/12471057/1b53f427-6998-4fa1-89b9-0d8ab00afa1d" alt=""></p><h3 id="Stage-7-5">Stage 7-5</h3><p><img src="https://github.com/dimaslanjaka/source-posts/assets/12471057/9defef2b-59cc-42d3-8a7d-654d895a8c8c" alt=""></p><h3 id="Stage-7-6">Stage 7-6</h3><p><img src="https://github.com/dimaslanjaka/source-posts/assets/12471057/8c0895f1-37f4-43ff-92f8-db32e5d0f4ff" alt=""></p><h3 id="Stage-7-7">Stage 7-7</h3><p><img src="https://github.com/dimaslanjaka/source-posts/assets/12471057/56c30a1a-43bd-4542-8d0a-788b7262604e" alt=""></p>]]></content>
    
    
    <summary type="html">How to solve event To The Stars Event in Mobile Legends</summary>
    
    
    
    <category term="games" scheme="https://www.webmanajemen.com/categories/games/"/>
    
    
    <category term="mobile legends" scheme="https://www.webmanajemen.com/tags/mobile-legends/"/>
    
  </entry>
  
  <entry>
    <title>[PHP] generate random proxy IP:PORT from CIDR</title>
    <link href="https://www.webmanajemen.com/2024/05/php-generate-random-proxy-ipport-from-cidr.html"/>
    <id>https://www.webmanajemen.com/2024/05/php-generate-random-proxy-ipport-from-cidr.html</id>
    <published>2024-05-10T04:47:10.000Z</published>
    <updated>2024-05-12T20:11:24.000Z</updated>
    
    <content type="html"><![CDATA[<p>this script will Generate a random <strong>IP:PORT</strong> address within a <strong>CIDR</strong> range.</p><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><span class="hljs-comment">/**</span><span class="hljs-comment"> * Generate a random IP address within a CIDR range.</span><span class="hljs-comment"> *</span><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> string $cidr The CIDR range (e.g., &quot;192.168.1.0/24&quot;).</span><span class="hljs-comment"> * <span class="hljs-doctag">@return</span> string The random IP address.</span><span class="hljs-comment"> */</span><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">generateRandomIP</span>(<span class="hljs-params"><span class="hljs-keyword">string</span> <span class="hljs-variable">$cidr</span></span>): <span class="hljs-title">string</span> </span>&#123;    <span class="hljs-keyword">list</span>(<span class="hljs-variable">$ip</span>, <span class="hljs-variable">$subnet</span>) = <span class="hljs-title function_ invoke__">explode</span>(<span class="hljs-string">&#x27;/&#x27;</span>, <span class="hljs-variable">$cidr</span>);        <span class="hljs-comment">// Convert IP to binary format</span>    <span class="hljs-variable">$ipBinary</span> = <span class="hljs-title function_ invoke__">ip2long</span>(<span class="hljs-variable">$ip</span>);        <span class="hljs-comment">// Calculate the number of available IP addresses in the subnet</span>    <span class="hljs-variable">$subnetSize</span> = <span class="hljs-title function_ invoke__">pow</span>(<span class="hljs-number">2</span>, (<span class="hljs-number">32</span> - <span class="hljs-variable">$subnet</span>));        <span class="hljs-comment">// Generate a random offset within the subnet</span>    <span class="hljs-variable">$offset</span> = <span class="hljs-title function_ invoke__">mt_rand</span>(<span class="hljs-number">1</span>, <span class="hljs-variable">$subnetSize</span> - <span class="hljs-number">2</span>); <span class="hljs-comment">// Exclude network address and broadcast address</span>        <span class="hljs-comment">// Calculate the resulting IP</span>    <span class="hljs-variable">$randomIP</span> = <span class="hljs-title function_ invoke__">long2ip</span>(<span class="hljs-variable">$ipBinary</span> + <span class="hljs-variable">$offset</span>);        <span class="hljs-keyword">return</span> <span class="hljs-variable">$randomIP</span>;&#125;<span class="hljs-comment">/**</span><span class="hljs-comment"> * Generate a random port number.</span><span class="hljs-comment"> *</span><span class="hljs-comment"> * <span class="hljs-doctag">@return</span> int The random port number.</span><span class="hljs-comment"> */</span><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">generateRandomPort</span>(<span class="hljs-params"></span>): <span class="hljs-title">int</span> </span>&#123;    <span class="hljs-keyword">return</span> <span class="hljs-title function_ invoke__">mt_rand</span>(<span class="hljs-number">1024</span>, <span class="hljs-number">65535</span>);&#125;<span class="hljs-comment">// Example CIDR range</span><span class="hljs-variable">$cidr</span> = <span class="hljs-string">&quot;192.168.1.0/24&quot;</span>;<span class="hljs-comment">// Generate a random IP address within the CIDR range</span><span class="hljs-variable">$randomIP</span> = <span class="hljs-title function_ invoke__">generateRandomIP</span>(<span class="hljs-variable">$cidr</span>);<span class="hljs-comment">// Generate a random port number</span><span class="hljs-variable">$randomPort</span> = <span class="hljs-title function_ invoke__">generateRandomPort</span>();<span class="hljs-comment">// Output the random IP:Port combination</span><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;Random IP:Port: <span class="hljs-subst">$randomIP</span>:<span class="hljs-subst">$randomPort</span>\n&quot;</span>;<span class="hljs-meta">?&gt;</span></code></pre>]]></content>
    
    
    <summary type="html">[PHP] generate random proxy IP:PORT from CIDR this script will Generate a random IP:PORT address within a CIDR range. IP:PORT CIDR ?php/ Generate a random IP address within a CIDR range. @param string</summary>
    
    
    
    <category term="programming" scheme="https://www.webmanajemen.com/categories/programming/"/>
    
    
    <category term="php" scheme="https://www.webmanajemen.com/tags/php/"/>
    
  </entry>
  
  <entry>
    <title>[PHP] generate big text file for testing purpose</title>
    <link href="https://www.webmanajemen.com/2024/05/php-generate-big-text-file-for-testing-purpose.html"/>
    <id>https://www.webmanajemen.com/2024/05/php-generate-big-text-file-for-testing-purpose.html</id>
    <published>2024-05-10T02:04:23.000Z</published>
    <updated>2024-05-10T02:04:23.000Z</updated>
    
    <content type="html"><![CDATA[<p>This script will generate a text file named <code>big_text_file.txt</code> with a size of approximately 10 megabytes.<br>You can adjust the size by changing the value of <code>$fileSizeMB</code>.<br>The script generates random strings of characters to fill the file.</p><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><span class="hljs-comment">// Function to generate a random string</span><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">generateRandomString</span>(<span class="hljs-params"><span class="hljs-variable">$length</span> = <span class="hljs-number">10</span></span>) </span>&#123;    <span class="hljs-variable">$characters</span> = <span class="hljs-string">&#x27;0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ&#x27;</span>;    <span class="hljs-variable">$randomString</span> = <span class="hljs-string">&#x27;&#x27;</span>;    <span class="hljs-keyword">for</span> (<span class="hljs-variable">$i</span> = <span class="hljs-number">0</span>; <span class="hljs-variable">$i</span> &lt; <span class="hljs-variable">$length</span>; <span class="hljs-variable">$i</span>++) &#123;        <span class="hljs-variable">$randomString</span> .= <span class="hljs-variable">$characters</span>[<span class="hljs-title function_ invoke__">rand</span>(<span class="hljs-number">0</span>, <span class="hljs-title function_ invoke__">strlen</span>(<span class="hljs-variable">$characters</span>) - <span class="hljs-number">1</span>)];    &#125;    <span class="hljs-keyword">return</span> <span class="hljs-variable">$randomString</span>;&#125;<span class="hljs-comment">// Define the size of the text file in megabytes</span><span class="hljs-variable">$fileSizeMB</span> = <span class="hljs-number">10</span>; <span class="hljs-comment">// Change this to the desired size</span><span class="hljs-comment">// Open a new text file for writing</span><span class="hljs-variable">$fileName</span> = <span class="hljs-string">&#x27;big_text_file.txt&#x27;</span>;<span class="hljs-variable">$file</span> = <span class="hljs-title function_ invoke__">fopen</span>(<span class="hljs-variable">$fileName</span>, <span class="hljs-string">&#x27;w&#x27;</span>);<span class="hljs-comment">// Calculate the number of iterations needed to reach the desired file size</span><span class="hljs-variable">$iterations</span> = <span class="hljs-variable">$fileSizeMB</span> * <span class="hljs-number">1024</span> * <span class="hljs-number">1024</span> / <span class="hljs-number">10</span>; <span class="hljs-comment">// Assuming each character occupies approximately 10 bytes</span><span class="hljs-comment">// Generate and write random strings to the file</span><span class="hljs-keyword">for</span> (<span class="hljs-variable">$i</span> = <span class="hljs-number">0</span>; <span class="hljs-variable">$i</span> &lt; <span class="hljs-variable">$iterations</span>; <span class="hljs-variable">$i</span>++) &#123;    <span class="hljs-variable">$randomString</span> = <span class="hljs-title function_ invoke__">generateRandomString</span>(<span class="hljs-number">100</span>); <span class="hljs-comment">// Change 100 to adjust string length if needed</span>    <span class="hljs-title function_ invoke__">fwrite</span>(<span class="hljs-variable">$file</span>, <span class="hljs-variable">$randomString</span> . PHP_EOL); <span class="hljs-comment">// Add a newline character after each string</span>&#125;<span class="hljs-comment">// Close the file</span><span class="hljs-title function_ invoke__">fclose</span>(<span class="hljs-variable">$file</span>);<span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;Text file generated successfully!&quot;</span>;<span class="hljs-meta">?&gt;</span></code></pre>]]></content>
    
    
    <summary type="html">[PHP] generate big text file for testing purpose This script will generate a text file named big_text_file.txt with a size of approximately 10 megabytes.You can adjust the size by changing the value o</summary>
    
    
    
    <category term="programming" scheme="https://www.webmanajemen.com/categories/programming/"/>
    
    
    <category term="php" scheme="https://www.webmanajemen.com/tags/php/"/>
    
  </entry>
  
  <entry>
    <title>List of Chrome Driver command line arguments</title>
    <link href="https://www.webmanajemen.com/2024/04/list-of-chrome-driver-command-line-arguments.html"/>
    <id>https://www.webmanajemen.com/2024/04/list-of-chrome-driver-command-line-arguments.html</id>
    <published>2024-04-25T00:02:47.000Z</published>
    <updated>2024-04-25T00:02:47.000Z</updated>
    
    <content type="html"><![CDATA[<h1>List of Chrome Driver command line arguments</h1><p>Here is the list of Chrome Driver command line Arguments.</p><p>If you are using chrome Driver for Selenium WebDriver or Protractor or …. then these are a handy useful list of command line arguments that can be used.</p><p>You may use this to look at the usuage: <code>https://code.google.com/p/chromium/codesearch#chromium/src/chromeos/chromeos_switches.cc</code></p><p>Run <code>chromedriver –help</code> to see command line arguments for your version.</p><pre><code class="hljs plaintext">--adaboost--aggressive--aggressive-cache-discard--aggressive-tab-discard--allow-autofill-sync-credential--allow-cross-origin-auth-prompt--allow-external-pages--allow-file-access--allow-file-access-from-files--allow-hidden-media-playback--allow-http-background-page--allow-http-screen-capture--allow-insecure-localhost--allow-legacy-extension-manifests--allow-loopback-in-peer-connection--allow-nacl-crxfs-api[2]--allow-nacl-file-handle-api[2]--allow-nacl-socket-api[2]--allow-no-sandbox-job--allow-outdated-plugins--allow-ra-in-dev-mode--allow-running-insecure-content--allow-sandbox-debugging--allow-unchecked-dangerous-downloads[3]--alsa-input-device[4]--alsa-output-device[4]--also-emit-success-logs--alternative-service-probability-threshold--always-authorize-plugins--always-on--always-use-complex-text--alwaystrue--app--app-id--app-mode-auth-code--app-mode-oauth-token--app-mode-oem-manifest--app-shell-allow-roaming--app-shell-host-window-size--app-shell-preferred-network--app-shell-refresh-token--app-shell-user--apple--apps-gallery-download-url--apps-gallery-update-url--apps-gallery-url--apps-keep-chrome-alive-in-tests[5]--artifacts-dir--ash-animate-from-boot-splash-screen--ash-browsertests[6]--ash-copy-host-background-at-boot--ash-debug-shortcuts--ash-disable-maximize-mode-window-backdrop--ash-disable-screen-orientation-lock[7]--ash-disable-stable-overview-order--ash-disable-touch-exploration-mode--ash-enable-fullscreen-app-list[7]--ash-enable-magnifier-key-scroller[7]--ash-enable-mirrored-screen--ash-enable-software-mirroring--ash-enable-stable-overview-order--ash-enable-system-sounds--ash-enable-touch-view-testing--ash-enable-unified-desktop[7]--ash-force-desktop[6]--ash-hide-notifications-for-factory--ash-host-window-bounds--ash-secondary-display-layout--ash-touch-hud--ash-use-first-display-as-internal--ash-webui-init--audio-buffer-size--audio-modem-dump-tokens-to-dir--audio-modem-enable-audible-broadcast--audio-modem-enable-inaudible-broadcast--aura-legacy-power-button--auth-ext-path--auth-server-whitelist--auth-spnego-account-type[8]--auto--auto-launch-at-startup--auto-select-desktop-capture-source--blink-platform-log-channels--blink-settings--bootstrap--browser-subprocess-path--browser-test--bwsi--bypass-app-banner-engagement-checks--canvas-msaa-sample-count--cc-layer-tree-test-no-timeout--cc-rebaseline-pixeltests--cellular-only--certificate-transparency-log--channel--check-for-update-interval--check-layout-test-sys-deps--child-process--child-wallpaper-large--child-wallpaper-small--ChromeOSMemoryPressureHandling--cipher-suite-blacklist--clear-data-reduction-proxy-data-savings--clear-token-service--cloud-devices-url--cloud-print-file--cloud-print-file-type--cloud-print-job-title--cloud-print-print-ticket--cloud-print-setup-proxy--cloud-print-url--cloud-print-xmpp-endpoint--compensate-for-unstable-pinch-zoom--compile-shader-always-succeeds--component-updater--connect-to-metro-viewer--connectivity-check-url--conservative--console--consumer-device-management-url--content-handlers--content-image-texture-target--content-shell-host-window-size--controller--copresence-server--copresence-tracing-token--crash-dumps-dir--crash-on-failure--crash-on-hang-threads--crash-test--create-browser-on-startup-for-tests--cros-region--cros-regions-mode--cryptauth-http-host--custom-launcher-page--d3d11--d3d9--daemon--daemon-pipe--data-path--data-reduction-proxy-config-url--data-reduction-proxy-experiment--data-reduction-proxy-http-proxies--data-reduction-proxy-lo-fi--data-reduction-proxy-secure-proxy-check-url--data-reduction-proxy-secure-proxy-disabled--data-reduction-proxy-warmup-url--data-reduction-ssl-proxy--dbus-stub--dbus-unstub-clients--debug-enable-frame-toggle--debug-packed-apps--debug-plugin-loading--debug-print[9]--default--default-tile-height--default-tile-width--default-wallpaper-is-oem--default-wallpaper-large--default-wallpaper-small--delete--demo--derelict-detection-timeout--derelict-idle-timeout--desktop--device-management-url--device-scale-factor[6]--diagnostics--diagnostics-format--diagnostics-recovery--disable--disable-3d-apis--disable-about-in-settings--disable-accelerated-2d-canvas--disable-accelerated-jpeg-decoding--disable-accelerated-mjpeg-decode--disable-accelerated-video-decode--disable-account-consistency--disable-add-to-shelf--disable-affiliation-based-matching--disable-app-info-dialog-mac[5]--disable-app-list-dismiss-on-blur--disable-app-window-cycling[5]--disable-appcontainer--disable-async-dns--disable-auto-hiding-toolbar-threshold[8]--disable-autofill-keyboard-accessory-view[8]--disable-background-networking--disable-backing-store-limit--disable-blink-features--disable-boot-animation--disable-breakpad--disable-bundled-ppapi-flash--disable-cache--disable-cached-picture-raster--disable-canvas-aa--disable-captive-portal-bypass-proxy--disable-cast-streaming-hw-encoding--disable-child-account-detection--disable-clear-browsing-data-counters--disable-client-side-phishing-detection--disable-cloud-import--disable-component-cloud-policy--disable-component-extensions-with-background-pages--disable-component-update--disable-composited-antialiasing--disable-confirmation--disable-contextual-search--disable-core-animation-plugins[10]--disable-credit-card-scan--disable-d3d11--disable-databases--disable-datasaver-prompt--disable-default-apps--disable-delay-agnostic-aec--disable-demo-mode--disable-device-disabling--disable-device-discovery-notifications--disable-dinosaur-easter-egg--disable-direct-npapi-requests--disable-direct-write[6]--disable-directwrite-for-ui[6]--disable-display-color-calibration[7]--disable-display-list-2d-canvas--disable-distance-field-text--disable-domain-blocking-for-3d-apis--disable-domain-reliability--disable-drive-search-in-app-launcher--disable-drop-sync-credential--disable-dwm-composition--disable-encrypted-media--disable-experimental-app-list--disable-extensions--disable-extensions-file-access-check--disable-extensions-http-throttling--disable-fast-web-scroll-view-insets--disable-features--disable-field-trial-config--disable-file-system--disable-fill-on-account-select--disable-flash-3d--disable-flash-stage3d--disable-full-form-autofill-ios--disable-gaia-services--disable-gesture-requirement-for-media-playback--disable-gl-drawing-for-tests--disable-gl-error-limit--disable-gl-extensions--disable-glsl-translator--disable-gpu--disable-gpu-compositing--disable-gpu-driver-bug-workarounds--disable-gpu-early-init--disable-gpu-memory-buffer-compositor-resources--disable-gpu-memory-buffer-video-frames--disable-gpu-process-crash-limit--disable-gpu-program-cache--disable-gpu-rasterization--disable-gpu-sandbox--disable-gpu-shader-disk-cache--disable-gpu-vsync--disable-gpu-watchdog--disable-hang-monitor--disable-hid-detection-on-oobe--disable-hide-inactive-stacked-tab-close-buttons--disable-histogram-customizer--disable-hosted-app-shim-creation[5]--disable-hosted-apps-in-windows[5]--disable-icon-ntp--disable-infobars--disable-input-view--disable-ios-password-generation--disable-ios-password-suggestions--disable-ipv4--disable-ipv6--disable-javascript-harmony-shipping--disable-keyboard-commands--disable-kill-after-bad-ipc--disable-lcd-text--disable-legacy-window[6]--disable-local-storage--disable-logging--disable-login-animations--disable-low-end-device-mode--disable-low-res-tiling--disable-lru-snapshot-cache--disable-mac-overlays[10]--disable-mac-views-native-app-windows[5]--disable-main-frame-before-activation--disable-manager-for-sync-signin--disable-md-downloads--disable-media-source--disable-media-thread-for-media-playback[8]--disable-merge-key-char-events[6]--disable-method-check--disable-minimize-on-second-launcher-item-click--disable-mojo-channel--disable-mtp-write-support--disable-multilingual-spellchecker[11]--disable-namespace-sandbox--disable-native-gpu-memory-buffers--disable-network-portal-notification--disable-new-app-list-mixer--disable-new-bookmark-apps--disable-new-channel-switcher-ui--disable-new-kiosk-ui--disable-new-korean-ime--disable-new-profile-management--disable-new-task-manager[12]--disable-new-zip-unpacker--disable-notifications--disable-ntp-favicons--disable-ntp-popular-sites--disable-offer-store-unmasked-wallet-cards--disable-offer-upload-credit-cards--disable-office-editing-component-extension--disable-offline-auto-reload--disable-offline-auto-reload-visible-only--disable-offline-pages--disable-out-of-process-pac--disable-overlay-scrollbar--disable-overscroll-edge-effect[8]--disable-page-visibility--disable-panel-fitting[7]--disable-password-generation--disable-password-manager-reauthentication--disable-password-separated-signin-flow--disable-pdf-material-ui--disable-pepper-3d--disable-permissions-api--disable-physical-keyboard-autocorrect--disable-pinch--disable-plugins-discovery--disable-pnacl-crash-throttling--disable-policy-key-verification--disable-popup-blocking--disable-preconnect--disable-prefer-compositing-to-lcd-text--disable-presentation-api--disable-print-preview--disable-prompt-on-repost--disable-pull-to-refresh-effect[8]--disable-push-api-background-mode--disable-quic--disable-quic-port-selection--disable-reading-from-canvas--disable-remote-core-animation[10]--disable-remote-fonts--disable-renderer-accessibility--disable-renderer-backgrounding--disable-rgba-4444-textures--disable-rollback-option--disable-rtc-smoothness-algorithm--disable-save-password-bubble[5]--disable-screen-orientation-lock[8]--disable-seccomp-filter-sandbox--disable-session-crashed-bubble--disable-settings-window--disable-setuid-sandbox--disable-shader-name-hashing--disable-shared-workers--disable-signin-scoped-device-id--disable-simplified-fullscreen-ui--disable-single-click-autofill--disable-site-engagement-service--disable-smooth-scrolling--disable-software-rasterizer--disable-spdy-proxy-dev-auth-origin--disable-speech-api--disable-surfaces--disable-svg1dom--disable-sync--disable-sync-app-list--disable-sync-backup--disable-sync-rollback--disable-sync-types--disable-tab-switcher--disable-threaded-animation--disable-threaded-compositing--disable-threaded-scrolling--disable-timezone-tracking-option--disable-touch-adjustment--disable-touch-drag-drop--disable-touch-feedback--disable-translate--disable-translate-new-ux[5]--disable-usb-keyboard-detect[6]--disable-v8-idle-tasks--disable-vaapi-accelerated-video-encode[7]--disable-views-rect-based-targeting--disable-virtual-keyboard-overscroll--disable-voice-input--disable-volume-adjust-sound--disable-wake-on-wifi--disable-web-notification-custom-layouts--disable-web-resources--disable-web-security--disable-webaudio--disable-webgl--disable-webrtc-encryption[13]--disable-webrtc-hw-decoding[13]--disable-webrtc-hw-encoding[13]--disable-webrtc-multiple-routes[13]--disable-win32k-renderer-lockdown[6]--disable-wkwebview--disable-x-token--disable-xss-auditor--disable-zero-browsers-open-for-tests--disable-zero-copy--disabled--disallow-autofill-sync-credential--disallow-autofill-sync-credential-for-reauth--disallow-unchecked-dangerous-downloads[3]--disk-cache-dir--disk-cache-size--display[14]--dmg-device[5]--dns-log-details--dns-prefetch-disable--dom-automation--domain-name--dont-delete-on-download--dump-browser-histograms--dump-line-box-trees--eafe-path--eafe-url--early-tracing[15]--easy-unlock-app-path--egl--elevate--embedded-extension-options--emphasize-titles-in-omnibox-dropdown--emulate-shader-precision--enable-2d-canvas-clip-aa--enable-accelerated-2d-canvas--enable-accelerated-vpx-decode[6]--enable-accessibility-tab-switcher[8]--enable-account-consistency--enable-adaptive-selection-handle-orientation[8]--enable-add-to-shelf--enable-affiliation-based-matching--enable-aggressive-domstorage-flushing--enable-alternative-services--enable-android-compositor-animation-timelines[8]--enable-android-spellchecker[11]--enable-app-info-dialog-mac[5]--enable-app-list--enable-app-window-controls--enable-app-window-cycling[5]--enable-appcontainer--enable-apps-file-associations--enable-apps-show-on-first-paint--enable-audio-hang-monitor--enable-autofill-keyboard-accessory-view[8]--enable-automatic-password-saving--enable-avfoundation[5]--enable-begin-frame-scheduling--enable-benchmarking--enable-ble-advertising-in-apps--enable-blink-features--enable-bookmark-undo--enable-browser-side-navigation--enable-centered-app-list--enable-child-account-detection--enable-clear-browsing-data-counters--enable-clear-sync-data-on-passphrase-encryption--enable-cloud-print-proxy--enable-cloud-print-xps[6]--enable-cma-media-pipeline--enable-compositor-animation-timelines--enable-compositor-property-trees--enable-consumer-management--enable-contextual-search--enable-crash-reporter--enable-crash-reporter-for-testing[16]--enable-credential-manager-api--enable-credit-card-scan--enable-crx-hash-check--enable-data-reduction-proxy-bypass-warning--enable-data-reduction-proxy-carrier-test--enable-data-reduction-proxy-config-client--enable-datasaver-prompt--enable-device-discovery-notifications--enable-devtools-experiments--enable-display-list-2d-canvas--enable-distance-field-text--enable-dom-distiller--enable-dom-distiller-button-animation[8]--enable-domain-reliability--enable-download-notification--enable-download-resumption--enable-drive-search-in-app-launcher--enable-drop-sync-credential--enable-embedded-extension-options--enable-embeddedsearch-api[8]--enable-exclusive-audio[6]--enable-experimental-app-list--enable-experimental-canvas-features--enable-experimental-extension-apis--enable-experimental-input-view-features--enable-experimental-web-platform-features--enable-extension-action-redesign--enable-extension-activity-log-testing--enable-extension-activity-logging--enable-extension-assets-sharing--enable-fast-unload--enable-fast-web-scroll-view-insets--enable-features--enable-fill-on-account-select--enable-fill-on-account-select-no-highlighting--enable-first-run-ui-transitions--enable-font-antialiasing--enable-full-form-autofill-ios--enable-gl-path-rendering--enable-gpu-benchmarking--enable-gpu-client-logging--enable-gpu-client-tracing--enable-gpu-command-logging--enable-gpu-debugging--enable-gpu-memory-buffer-compositor-resources--enable-gpu-memory-buffer-video-frames--enable-gpu-rasterization--enable-gpu-service-logging--enable-gpu-service-tracing--enable-grouped-history--enable-hardware-overlays--enable-harfbuzz-rendertext[5]--enable-heap-profiling--enable-hosted-app-quit-notification[5]--enable-hosted-apps-in-windows[5]--enable-hosted-mode[8]--enable-hotword-hardware--enable-hung-renderer-infobar[8]--enable-icon-ntp--enable-iframe-based-signin--enable-image-color-profiles--enable-inband-text-tracks--enable-input-view--enable-ios-handoff-to-other-devices--enable-ios-password-generation--enable-kiosk-mode--enable-lcd-text--enable-leak-detection--enable-link-disambiguation-popup--enable-local-file-accesses--enable-logging--enable-longpress-drag-selection[8]--enable-low-end-device-mode--enable-low-res-tiling--enable-lru-snapshot-cache--enable-mac-views-app-list[5]--enable-mac-views-dialogs[5]--enable-mac-views-native-app-windows[5]--enable-main-frame-before-activation--enable-manager-for-sync-signin--enable-md-downloads--enable-md-extensions--enable-md-policy-page--enable-media-thread-for-media-playback[8]--enable-memory-benchmarking--enable-merge-key-char-events[6]--enable-message-center-always-scroll-up-upon-notification-removal--enable-mojo-serial-service--enable-multilingual-spellchecker[11]--enable-multiprocess--enable-nacl--enable-nacl-debug--enable-nacl-nonsfi-mode--enable-native-gpu-memory-buffers--enable-natural-scroll-default--enable-navigation-tracing--enable-net-benchmarking--enable-network-information--enable-network-portal-notification--enable-new-app-list-mixer--enable-new-bookmark-apps--enable-ntp-favicons--enable-ntp-popular-sites--enable-ntp-search-engine-country-detection--enable-offer-store-unmasked-wallet-cards--enable-offer-upload-credit-cards--enable-offline-auto-reload--enable-offline-auto-reload-visible-only--enable-offline-pages--enable-overlay-scrollbar--enable-override-bookmarks-ui--enable-panels--enable-partial-raster--enable-password-change-support--enable-password-force-saving--enable-password-generation--enable-password-separated-signin-flow--enable-pdf-material-ui--enable-pepper-testing--enable-physical-keyboard-autocorrect--enable-physical-web[8]--enable-pinch--enable-pixel-output-in-tests--enable-plugin-placeholder-testing--enable-pnacl-subzero--enable-potentially-annoying-security-features--enable-power-overlay--enable-precache--enable-precise-memory-info--enable-prefer-compositing-to-lcd-text--enable-prefixed-encrypted-media--enable-print-preview-register-promos--enable-privet-v3--enable-profile-shortcut-manager[6]--enable-profiling--enable-property-tree-verification--enable-proximity-auth-bluetooth-low-energy-discovery--enable-proximity-auth-proximity-detection--enable-push-api-background-mode--enable-push-message-payload--enable-query-extraction[17]--enable-quic--enable-quic-port-selection--enable-reader-mode-toolbar-icon--enable-renderer-mojo-channel--enable-request-tablet-site--enable-rgba-4444-textures--enable-sandbox--enable-sandbox-logging--enable-save-password-bubble[5]--enable-screenshot-testing-with-mode--enable-scripts-require-action--enable-scroll-prediction--enable-seccomp-filter-sandbox--enable-session-crashed-bubble--enable-settings-window--enable-share-group-async-texture-upload--enable-simplified-fullscreen-ui--enable-single-click-autofill--enable-site-engagement-eviction-policy--enable-site-engagement-service--enable-skia-benchmarking--enable-slimming-paint-v2--enable-smooth-scrolling--enable-spatial-navigation--enable-spdy-proxy-auth--enable-spdy-proxy-dev-auth-origin--enable-speech-dispatcher[18]--enable-spelling-auto-correct[11]--enable-spelling-feedback-field-trial[11]--enable-stats-collection-bindings--enable-stats-table--enable-strict-mixed-content-checking--enable-strict-powerful-feature-restrictions--enable-subscribe-uniform-extension--enable-suggestions-with-substring-match--enable-supervised-user-managed-bookmarks-folder--enable-sync-app-list--enable-sync-articles--enable-tab-audio-muting--enable-tab-switcher--enable-tcp-fastopen--enable-threaded-compositing--enable-threaded-texture-mailboxes--enable-thumbnail-retargeting--enable-touch-drag-drop--enable-touchview[7]--enable-trace-app-source--enable-tracing--enable-tracing-output--enable-translate-new-ux[5]--enable-transparent-visuals[19]--enable-unified-media-pipeline[8]--enable-unsafe-es3-apis--enable-use-zoom-for-dsf--enable-user-controlled-alternate-protocol-ports--enable-usermedia-screen-capturing--enable-video-player-chromecast-support--enable-viewport--enable-virtual-keyboard--enable-virtual-keyboard-overscroll--enable-virtualized-time--enable-vtune-support--enable-web-app-frame--enable-web-bluetooth--enable-web-notification-custom-layouts--enable-webgl-draft-extensions--enable-webgl-image-chromium--enable-webrtc-dtls12[13]--enable-webrtc-hw-h264-encoding[13]--enable-webrtc-stun-origin[13]--enable-webusb-on-any-origin--enable-webvr--enable-wifi-credential-sync--enable-win32k-lockdown-mimetypes[6]--enable-wkwebview--enable-zero-copy--enabled--encode-binary--enforce--enforce-gl-minimums--enforce-webrtc-ip-permission-check[13]--enforce_strict--enhanced-bookmarks-experiment--enterprise-enable-forced-re-enrollment--enterprise-enrollment-initial-modulus--enterprise-enrollment-modulus-limit--error-console--explicitly-allowed-ports--expose-internals-for-testing--expose-ipc-echo--extended-response--extension-action-redesign--extension-content-verification--extension-process--extensions-install-verification--extensions-multi-account--extensions-not-webstore--extensions-on-chrome-urls--extensions-update-frequency--extra-plugin-dir--extra-search-query-params--fake-variations-channel--fast--fast-start--feedback-server--first-exec-after-boot--flag-switches-begin--flag-switches-end--floating-virtual-keyboard--font-cache-shared-handle[6]--force-app-mode--force-desktop[6]--force-dev-mode-highlighting--force-device-scale-factor--force-directshow[6]--force-display-list-2d-canvas--force-fieldtrial-params--force-fieldtrials--force-first-run--force-first-run-ui--force-gpu-mem-available-mb--force-gpu-rasterization--force-immersive[6]--force-in-process--force-load-easy-unlock-app-in-tests--force-local-ntp--force-login-manager-in-tests--force-mediafoundation[6]--force-overlay-fullscreen-video--force-qtkit[5]--force-renderer-accessibility--force-variation-ids--force-wave-audio[6]--full-memory-crash-report--gaia-url--gcm-registration-url--gesture-editing--gesture-typing--gl--gl-shader-interm-output--gles--golden-screenshots-dir--google-apis-url--google-base-url--google-profile-info--google-url--gpu-device-id--gpu-driver-bug-workarounds--gpu-driver-vendor--gpu-driver-version--gpu-launcher--gpu-no-context-lost--gpu-process--gpu-program-cache-size-kb--gpu-rasterization-msaa-sample-count--gpu-sandbox-allow-sysv-shm--gpu-sandbox-failures-fatal--gpu-sandbox-start-early--gpu-startup-dialog--gpu-vendor-id--guest-wallpaper-large--guest-wallpaper-small--h--has-chromeos-diamond-key--hdmi-sink-supported-codecs--help--hide--hide-icons[6]--homedir--homepage--host--host-pairing-oobe--host-resolver-retry-attempts--host-resolver-rules--host-rules--http-port--ignore-autocomplete-off-autofill--ignore-certificate-errors--ignore-gpu-blacklist--ignore-urlfetcher-cert-requests--ignore-user-profile-mapping-for-tests--in-process-gpu--incognito--install--install-chrome-app--install-supervised-user-whitelists--instant-process--interests-url--invalidation-use-gcm-channel--ipc-connection-timeout--ipc-dump-directory--ipc-fuzzer-testcase[20]--ipc-sync-compositing[8]--isolate-extensions--javascript-harmony--js-flags--keep-alive-for-test--kiosk--kiosk-printing--lang--last-launched-app--learning--load-and-launch-app--load-apps--load-component-extension--load-extension--load-plugin--local-heuristics-only-for-password-generation--local-ntp-reload[21]--log-gpu-control-list-decisions--log-level--log-net-log--log-plugin-messages--login-manager--login-profile--login-user--lso-url--main-frame-resizes-are-orientation-changes--make-default-browser--managed-user-id--managed-user-sync-token--map-origin--mark-non-secure-as--material[1]--material-design-ink-drop-animation-speed--material-hybrid[1]--max-gum-fps[13]--max-untiled-layer-height--max-untiled-layer-width--media-cache-size--media-router--memory-metrics--memory-pressure-off--memory-pressure-thresholds--memory-pressure-thresholds-mb[6]--message-center-changes-while-open--message-loop-histogrammer--metrics-client-id[5]--metrics-recording-only--migrate-data-dir-for-sxs[18]--mock--monitoring-destination-id--mute-audio--nacl-broker--nacl-dangerous-no-sandbox-nonsfi--nacl-debug-mask--nacl-gdb--nacl-gdb-script--nacl-loader--nacl-loader-nonsfi--net-log-capture-mode--netifs-to-ignore--network-country-iso[8]--neutral--new-profile-management--new-window--NewProfileManagement--no-announcement--no-default-browser-check--no-displaying-insecure-content--no-experiments--no-first-run--no-managed-user-acknowledgment-check--no-network-profile-warning[6]--no-pings--no-proxy-server--no-referrers--no-sandbox--no-service-autorun--no-startup-window--no-wifi--noerrdialogs--non-secure--none--num-pac-threads--num-raster-threads--oauth2-client-id--oauth2-client-secret--off--on--oobe-guest-session--oobe-skip-postlogin--oobe-timer-interval--oopif-always-create-new-frame-tree--open-ash[22]--opengraph--origin-to-force-quic-on--original-process-start-time--osmesa--override--override-metrics-upload-url--override-plugin-power-saver-for-testing--override-use-gl-with-osmesa-for-tests--overscroll-history-navigation--ozone-dump-file--ozone-initial-display-bounds--ozone-initial-display-physical-size-mm--ozone-platform--ozone-test-single-overlay-support--pack-extension--pack-extension-key--parent-profile--password-store[23]--permission-request-api-scope--permission-request-api-url--plugin--plugin-launcher--plugin-path--plugin-startup-dialog--power-stub--ppapi--ppapi-broker--ppapi-flash-args--ppapi-flash-path--ppapi-flash-version--ppapi-in-process--ppapi-plugin-launcher--ppapi-startup-dialog--precache-config-settings-url--precache-manifest-url-prefix--predictable-app-filenames--prefetch-search-results[8]--prerender--prerender-from-omnibox--previous-app--primary--privet-ipv6-only--process-per-site--process-per-tab--product-version--profile-directory--profiler-timing--profiling-at-start--profiling-file--profiling-flush--progress-bar-animation[8]--promo-server-url--prompt-for-external-extensions[24]--proxy-auto-detect--proxy-bypass-list--proxy-pac-url--proxy-server--quic-connection-options--quic-max-packet-length--quic-version--rdp_desktop_session--reader-mode-feedback--reader-mode-heuristics--rebaseline-pixel-tests[2]--reduce-security-for-testing--reduced-referrer-granularity--register-font-files--register-pepper-plugins--relaunch-shortcut[6]--relauncher[5]--remote-debugging-port--remote-debugging-socket-name[8]--remote-debugging-targets--renderer--renderer-cmd-prefix--renderer-process-limit--renderer-startup-dialog--renderer-wait-for-java-debugger[8]--require-audio-hardware-for-testing--requirements--reset-app-list-install-state--reset-variation-state--restore-last-session--restrict-iframe-permissions--root-layer-scrolls--run-layout-test--safebrowsing-disable-auto-update--safebrowsing-disable-download-protection--safebrowsing-disable-extension-blacklist--safebrowsing-manual-download-blacklist--SafeSites--sandbox-ipc--save-page-as-mhtml--scripts-require-action--scroll-end-effect--secondary--service--service-name--shill-stub--show-app-list--show-autofill-type-predictions--show-component-extension-options--show-composited-layer-borders--show-fps-counter--show-icons[6]--show-layer-animation-bounds--show-mac-overlay-borders[10]--show-paint-rects--show-property-changed-rects--show-replica-screenspace-rects--show-saved-copy--show-screenspace-rects--show-surface-damage-rects--silent-debugger-extension-api--silent-launch--simulate-critical-update--simulate-elevated-recovery--simulate-outdated--simulate-outdated-no-au--simulate-printing-errors--simulate-upgrade--single-process--site-per-process--skip-gpu-data-loading--slow--slow-connections-only--slow-down-raster-scale-factor--smart-virtual-keyboard--sms-test-messages--spdy-proxy-auth-fallback--spdy-proxy-auth-origin--spdy-proxy-auth-value--spdy-proxy-dev-auth-origin--speculative-resource-prefetching--spelling-service-feedback-interval-seconds[11]--spelling-service-feedback-url[11]--ssl-key-log-file--ssl-version-fallback-min--ssl-version-max--ssl-version-min--stable-release-mode--start--start-fullscreen--start-maximized--state-path--stop--strict-layer-property-change-checking--stub-cros-settings--supervised-user-safesites--supports-dual-gpus--swiftshader--swiftshader-path--sync-allow-insecure-xmpp-connection--sync-deferred-startup-timeout-seconds--sync-disable-deferred-startup--sync-enable-get-update-avoidance--sync-notification-host-port--sync-short-initial-retry-override--sync-url--system-developer-mode--system-log-upload-frequency--tab-capture-downscale-quality--tab-capture-upscale-quality--test-auto-update-ui--test-child-process--test-gl-lib--test-name--test-type--testing-fixed-http-port--testing-fixed-https-port--tls1--tls1.1--tls1.2--top-chrome-md[1]--top-controls-hide-threshold--top-controls-show-threshold--touch-calibration[25]--touch-devices[26]--touch-events--touch-noise-filtering[25]--touch-selection-strategy--trace-config-file--trace-export-events-to-etw[6]--trace-shutdown--trace-shutdown-file--trace-startup--trace-startup-duration--trace-startup-file--trace-to-console--trace-to-file--trace-to-file-name--trace-upload-url--translate-script-url--translate-security-origin--trusted-spdy-proxy--try-chrome-again--try-supported-channel-layouts[6]--ttl--type--ui-disable-partial-swap--ui-enable-compositor-animation-timelines--ui-enable-rgba-4444-textures--ui-enable-zero-copy--ui-prioritize-in-gpu-process--ui-show-fps-counter--ui-show-layer-animation-bounds--ui-show-layer-borders--ui-show-paint-rects--ui-show-property-changed-rects--ui-show-replica-screenspace-rects--ui-show-screenspace-rects--ui-show-surface-damage-rects--unicast-respond--uninstall--unlimited-storage--unsafely-treat-insecure-origin-as-secure--url-mappings--use-android-midi-api[8]--use-angle--use-cras[27]--use-fake-device-for-media-stream--use-fake-ui-for-media-stream--use-file-for-fake-audio-capture--use-file-for-fake-video-capture--use-gl--use-gpu-in-tests--use-gpu-memory-buffers-for-capture--use-mobile-user-agent--use-mock-keychain[5]--use-normal-priority-for-tile-task-worker-threads--use-simple-cache-backend--use-spdy--use-surfaces--use-temporary-user-data-dir--use-updater--user-agent--user-data-dir--utility--utility-allowed-dir--utility-cmd-prefix--utility-enable-mdns--utility-run-elevated--v--v8-cache-options--v8-natives-passed-by-fd--v8-pac-mojo-in-process--v8-pac-mojo-out-of-process--v8-snapshot-passed-by-fd--validate-crx--validate-input-event-stream--variations-server-url--version--video-image-texture-target--video-threads--video-underflow-threshold-ms--viewer-launch-via-appid[6]--vmodule--wait-for-debugger--wait-for-debugger-children--wait-for-mutex[6]--wake-on-wifi-packet--wallet-secure-service-url--wallet-service-url--wallet-service-use-sandbox--warp--waveout-buffers[6]--webrtc-stun-probe-trial[13]--webview-sandboxed-renderer--whitelisted-extension-id--win-jumplist-action--window-position--window-size--windows8-search[6]--winhttp-proxy-resolver--wm-window-animations-disabled--zygote--[1]--0--?</code></pre>]]></content>
    
    
    <summary type="html">List of Chrome Driver command line arguments List of Chrome Driver command line arguments Here is the list of Chrome Driver command line Arguments. If you are using chrome Driver for Selenium WebDrive</summary>
    
    
    
    <category term="programming" scheme="https://www.webmanajemen.com/categories/programming/"/>
    
    
  </entry>
  
  <entry>
    <title>Happy eid mubarak</title>
    <link href="https://www.webmanajemen.com/2024/04/happy-eid-mubarak.html"/>
    <id>https://www.webmanajemen.com/2024/04/happy-eid-mubarak.html</id>
    <published>2024-04-09T21:59:06.000Z</published>
    <updated>2024-04-10T21:59:07.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/2024/04/happy-eid-mubarak/happy-eid-mubarak.png" alt=""></p>]]></content>
    
    
    <summary type="html">Happy eid mubarak </summary>
    
    
    
    <category term="uncategorized" scheme="https://www.webmanajemen.com/categories/uncategorized/"/>
    
    
  </entry>
  
  <entry>
    <title>Install markdown engine on vite ESM typescript</title>
    <link href="https://www.webmanajemen.com/2024/04/install-markdown-on-vite-esm-typescript.html"/>
    <id>https://www.webmanajemen.com/2024/04/install-markdown-on-vite-esm-typescript.html</id>
    <published>2024-04-05T02:30:51.000Z</published>
    <updated>2024-04-19T09:41:38.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://github.com/dimaslanjaka/source-posts/assets/12471057/fb798a73-27aa-4e74-b063-f72fb66e2596" alt=""></p><h2 id="Install">Install</h2><pre><code class="hljs bash">yarn add -D vite-plugin-markdown @babel/preset-react @babel/preset-typescript @babel/env babel-plugin-module-resolver</code></pre><h2 id="Setup-babel-config">Setup babel config</h2><p>create <code>.babelrc.js</code></p><pre><code class="hljs js"><span class="hljs-keyword">const</span> presets = [<span class="hljs-string">&#x27;@babel/env&#x27;</span>, <span class="hljs-string">&#x27;@babel/react&#x27;</span>, <span class="hljs-string">&#x27;@babel/preset-typescript&#x27;</span>];<span class="hljs-keyword">const</span> plugins = [  [    <span class="hljs-built_in">require</span>.<span class="hljs-title function_">resolve</span>(<span class="hljs-string">&#x27;babel-plugin-module-resolver&#x27;</span>),    &#123;      <span class="hljs-attr">root</span>: [__dirname, <span class="hljs-string">&#x27;./src&#x27;</span>],      <span class="hljs-attr">extensions</span>: [<span class="hljs-string">&#x27;.jsx&#x27;</span>, <span class="hljs-string">&#x27;.js&#x27;</span>, <span class="hljs-string">&#x27;.ts&#x27;</span>, <span class="hljs-string">&#x27;.tsx&#x27;</span>, <span class="hljs-string">&#x27;.json&#x27;</span>]    &#125;  ]];<span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span>.<span class="hljs-property">config</span> = &#123; <span class="hljs-attr">cacheDirectory</span>: <span class="hljs-string">&#x27;./tmp/babel&#x27;</span>, presets, plugins &#125;;<span class="hljs-comment">/**</span><span class="hljs-comment"> *</span><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> &#123;<span class="hljs-type">import(&#x27;@babel/core&#x27;).ConfigAPI</span>&#125; <span class="hljs-variable">api</span></span><span class="hljs-comment"> * <span class="hljs-doctag">@returns</span> &#123;<span class="hljs-type">import(&#x27;@babel/core&#x27;).TransformOptions</span>&#125;</span><span class="hljs-comment"> */</span><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params">api</span>) &#123;  api.<span class="hljs-title function_">cache</span>(<span class="hljs-literal">true</span>);  <span class="hljs-keyword">return</span> &#123; presets, plugins &#125;;&#125;;</code></pre><h2 id="Vite-configuration">Vite configuration</h2><p>Configure Vite to handle TypeScript and ESM: Ensure your <code>vite.config.ts</code> (or <code>vite.config.js</code> if you’re using JavaScript) is set up to handle TypeScript and ESM.</p><pre><code class="hljs ts"><span class="hljs-keyword">import</span> * <span class="hljs-keyword">as</span> mdp <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vite-plugin-markdown&#x27;</span>;<span class="hljs-keyword">const</span> &#123; <span class="hljs-attr">plugin</span>: mdPlugin, <span class="hljs-title class_">Mode</span> &#125; = mdp;<span class="hljs-keyword">const</span> config = &#123;  <span class="hljs-attr">plugins</span>: [<span class="hljs-title function_">mdPlugin</span>(&#123; <span class="hljs-attr">mode</span>: [<span class="hljs-title class_">Mode</span>.<span class="hljs-property">HTML</span>, <span class="hljs-title class_">Mode</span>.<span class="hljs-property">MARKDOWN</span>, <span class="hljs-title class_">Mode</span>.<span class="hljs-property">TOC</span>, <span class="hljs-title class_">Mode</span>.<span class="hljs-property">REACT</span>] &#125;)], <span class="hljs-comment">// you can change react to Mode.VUE</span>&#125;<span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title function_">defineConfig</span>(config);</code></pre><p>Here my full working <code>vite.config.ts</code> for reference</p><pre><code class="hljs ts"><span class="hljs-keyword">import</span> react <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@vitejs/plugin-react&#x27;</span>;<span class="hljs-keyword">import</span> dotenv <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;dotenv&#x27;</span>;<span class="hljs-keyword">import</span> &#123; createRequire &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;node:module&#x27;</span>;<span class="hljs-keyword">import</span> path <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;upath&#x27;</span>;<span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">UserConfig</span>, defineConfig &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vite&#x27;</span>;<span class="hljs-keyword">import</span> * <span class="hljs-keyword">as</span> mdp <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vite-plugin-markdown&#x27;</span>;<span class="hljs-keyword">const</span> &#123; <span class="hljs-attr">plugin</span>: mdPlugin, <span class="hljs-title class_">Mode</span> &#125; = mdp;dotenv.<span class="hljs-title function_">config</span>(&#123; <span class="hljs-attr">override</span>: <span class="hljs-literal">true</span> &#125;);<span class="hljs-keyword">const</span> <span class="hljs-built_in">require</span> = <span class="hljs-title function_">createRequire</span>(<span class="hljs-keyword">import</span>.<span class="hljs-property">meta</span>.<span class="hljs-property">url</span>);<span class="hljs-keyword">const</span> <span class="hljs-attr">config</span>: <span class="hljs-title class_">UserConfig</span> = &#123;  <span class="hljs-attr">plugins</span>: [<span class="hljs-title function_">react</span>(), <span class="hljs-title function_">mdPlugin</span>(&#123; <span class="hljs-attr">mode</span>: [<span class="hljs-title class_">Mode</span>.<span class="hljs-property">HTML</span>, <span class="hljs-title class_">Mode</span>.<span class="hljs-property">MARKDOWN</span>, <span class="hljs-title class_">Mode</span>.<span class="hljs-property">TOC</span>, <span class="hljs-title class_">Mode</span>.<span class="hljs-property">REACT</span>] &#125;)],  <span class="hljs-attr">server</span>: &#123;    <span class="hljs-attr">port</span>: <span class="hljs-number">4000</span>  &#125;,  <span class="hljs-attr">resolve</span>: &#123;    <span class="hljs-attr">alias</span>: &#123;      <span class="hljs-string">&#x27;*&#x27;</span>: path.<span class="hljs-title function_">resolve</span>(<span class="hljs-string">&#x27;.&#x27;</span>),      <span class="hljs-string">&#x27;@utils&#x27;</span>: path.<span class="hljs-title function_">resolve</span>(<span class="hljs-string">&#x27;./src/utils&#x27;</span>),      <span class="hljs-string">&#x27;@components&#x27;</span>: path.<span class="hljs-title function_">resolve</span>(<span class="hljs-string">&#x27;./src/components&#x27;</span>),      <span class="hljs-string">&#x27;@routes&#x27;</span>: path.<span class="hljs-title function_">resolve</span>(<span class="hljs-string">&#x27;./src/routes&#x27;</span>),      <span class="hljs-string">&#x27;@assets&#x27;</span>: path.<span class="hljs-title function_">resolve</span>(<span class="hljs-string">&#x27;./src/assets&#x27;</span>),      <span class="hljs-string">&#x27;@src&#x27;</span>: path.<span class="hljs-title function_">resolve</span>(<span class="hljs-string">&#x27;./src&#x27;</span>),      <span class="hljs-string">&#x27;@root&#x27;</span>: path.<span class="hljs-title function_">resolve</span>(<span class="hljs-string">&#x27;./&#x27;</span>),      <span class="hljs-string">&#x27;@post&#x27;</span>: path.<span class="hljs-title function_">resolve</span>(<span class="hljs-string">&#x27;./src/posts&#x27;</span>),      <span class="hljs-string">&#x27;react/jsx-dev-runtime&#x27;</span>: <span class="hljs-built_in">require</span>.<span class="hljs-title function_">resolve</span>(<span class="hljs-string">&#x27;react/jsx-dev-runtime&#x27;</span>),      <span class="hljs-string">&#x27;react/jsx-runtime&#x27;</span>: <span class="hljs-built_in">require</span>.<span class="hljs-title function_">resolve</span>(<span class="hljs-string">&#x27;react/jsx-runtime&#x27;</span>)    &#125;  &#125;&#125;;<span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title function_">defineConfig</span>(config);</code></pre><h2 id="Conclusion">Conclusion</h2><p>all done. you can refer to <a href="https://github.com/hmsk/vite-plugin-markdown/tree/b7f3e0f789b35437f38d37ea61f8992927c897bf/examples">this repository</a> to view examples usage to render markdown</p>]]></content>
    
    
    <summary type="html">How to install markdown renderer engine on vite ESM typescript</summary>
    
    
    
    <category term="programming" scheme="https://www.webmanajemen.com/categories/programming/"/>
    
    
    <category term="typescript" scheme="https://www.webmanajemen.com/tags/typescript/"/>
    
  </entry>
  
  <entry>
    <title>Android Activity lifecycle</title>
    <link href="https://www.webmanajemen.com/2024/03/android-activity-lifecycle.html"/>
    <id>https://www.webmanajemen.com/2024/03/android-activity-lifecycle.html</id>
    <published>2024-03-25T05:23:10.000Z</published>
    <updated>2024-03-25T05:23:10.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="is-onStart-or-onCreate-first-will-be-triggered-in-android-activity">is <code>onStart</code> or <code>onCreate</code> first will be triggered in android activity?</h2><p>In the Android Activity lifecycle, <code>onCreate()</code> is triggered before <code>onStart()</code>. Here’s a brief overview of the sequence of method calls when an Activity is created:</p><ol><li><p><code>onCreate()</code>: This method is called when the activity is first created. It is where you typically perform one-time initialization such as setting up the user interface, binding data to lists, or initializing variables.</p></li><li><p><code>onStart()</code>: This method is called after <code>onCreate()</code> (if the activity is being started for the first time) or when the activity is being brought back to the foreground from a stopped state. It is where the activity becomes visible to the user, but it may not yet be in the foreground and interactive.</p></li></ol><p>So, <code>onCreate()</code> is always triggered before <code>onStart()</code> in the Android Activity lifecycle.</p><h2 id="Basic-ifecycle-of-android-activity">Basic ifecycle of android activity</h2><p>Here’s the basic lifecycle of an Android Activity:</p><ol><li><p><strong>onCreate()</strong>: This method is called when the activity is first created. Here, you typically perform initialization of the activity, such as setting up the user interface with <code>setContentView()</code> and initializing variables.</p></li><li><p><strong>onStart()</strong>: This method is called when the activity becomes visible to the user. It prepares the activity to enter the foreground and become interactive.</p></li><li><p><strong>onResume()</strong>: This method is called when the activity is about to start interacting with the user. It signals that the activity is now in the foreground and ready to receive user input.</p></li><li><p><strong>onPause()</strong>: This method is called when the activity is going into the background but is still partially visible to the user. It indicates that the activity is no longer in the foreground and may be paused or stopped.</p></li><li><p><strong>onStop()</strong>: This method is called when the activity is no longer visible to the user. It typically happens when the activity is being covered by another activity or when the user navigates away from it.</p></li><li><p><strong>onDestroy()</strong>: This method is called when the activity is being destroyed. It is the final callback that the activity receives before it is removed from memory. Here, you release any resources or unregister any listeners that were associated with the activity.</p></li></ol><p>Additionally, there are two other methods that are important for handling configuration changes:</p><ul><li><p><strong>onRestart()</strong>: This method is called when the activity is being restarted after being stopped. It is called after <code>onStop()</code> and before <code>onStart()</code>.</p></li><li><p><strong>onSaveInstanceState()</strong> and <strong>onRestoreInstanceState()</strong>: These methods are called when the activity is being temporarily destroyed and recreated due to a configuration change (such as screen rotation). They allow you to save and restore the state of your activity’s UI and data.</p></li></ul><p>Understanding these lifecycle methods is crucial for properly managing the state and behavior of your Android activities.</p><h2 id="Graph-of-android-lifecycle">Graph of android lifecycle</h2><p>here’s a graphical representation of the Android Activity lifecycle:</p><pre><code class="hljs plaintext">       +-------------------+       |                   |       |      onCreate()   |       |                   |       +---------+---------+                 |                 v       +-------------------+       |                   |       |      onStart()    |       |                   |       +---------+---------+                 |                 v       +-------------------+       |                   |       |      onResume()   |       |                   |       +---------+---------+                 |                 v+-------------------------+|                         || User interacts with the ||       Activity          ||                         |+------------+------------+             |             v       +-------------------+       |                   |       |      onPause()    |       |                   |       +---------+---------+                 |                 v       +-------------------+       |                   |       |      onStop()     |       |                   |       +---------+---------+                 |                 v       +-------------------+       |                   |       |      onDestroy()  |       |                   |       +-------------------+</code></pre><p><img src="https://i.stack.imgur.com/VW8m8.jpg" alt=""></p><h2 id="is-I-can-extends-superclass-activity-which-superclass-extends-AppCompatActivity">is I can extends superclass activity which superclass extends AppCompatActivity?</h2><p>Yes, you can certainly extend a superclass that extends <code>AppCompatActivity</code> in your Android application. In fact, it’s a common practice to create a custom base activity that extends <code>AppCompatActivity</code> and then have your other activities in the application extend this custom base activity.</p><p>For example, you might create a custom base activity like this:</p><p>java</p><pre><code class="hljs java"><span class="hljs-keyword">import</span> androidx.appcompat.app.AppCompatActivity;<span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyBaseActivity</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AppCompatActivity</span> &#123;    <span class="hljs-comment">// Common functionality or configurations can be implemented here</span>&#125;</code></pre><p>And then your other activities can extend this base activity:</p><p>java</p><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyActivity</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">MyBaseActivity</span> &#123;    <span class="hljs-comment">// Your activity-specific code goes here</span>&#125;</code></pre><p>This approach allows you to centralize common functionality or configurations in one place, making it easier to maintain and manage your activities.</p>]]></content>
    
    
    <summary type="html">Android Activity lifecycle is onStart or onCreate first will be triggered in android activity? onStart onCreate In the Android Activity lifecycle, onCreate is triggered before onStart. Heres a brief o</summary>
    
    
    
    <category term="programming" scheme="https://www.webmanajemen.com/categories/programming/"/>
    
    
    <category term="android" scheme="https://www.webmanajemen.com/tags/android/"/>
    
    <category term="java" scheme="https://www.webmanajemen.com/tags/java/"/>
    
    <category term="kotlin" scheme="https://www.webmanajemen.com/tags/kotlin/"/>
    
  </entry>
  
  <entry>
    <title>OkHttp cookie handling on android webview supported</title>
    <link href="https://www.webmanajemen.com/2024/03/okhttp-cookie-handling-on-android.html"/>
    <id>https://www.webmanajemen.com/2024/03/okhttp-cookie-handling-on-android.html</id>
    <published>2024-03-16T19:06:22.000Z</published>
    <updated>2024-03-16T19:06:22.000Z</updated>
    
    <content type="html"><![CDATA[<p>Here how i implement cookie handling for android lollipop - tiramisu and also jvm and non-persistent connection.</p><p>requires:</p><pre><code class="hljs toml"><span class="hljs-section">[versions]</span><span class="hljs-attr">webkit</span> = <span class="hljs-string">&quot;1.10.0&quot;</span><span class="hljs-attr">okhttp</span> = <span class="hljs-string">&quot;4.12.0&quot;</span><span class="hljs-section">[libraries]</span><span class="hljs-attr">webkit</span> = &#123; module = <span class="hljs-string">&quot;androidx.webkit:webkit&quot;</span>, version.ref = <span class="hljs-string">&quot;webkit&quot;</span> &#125;<span class="hljs-attr">okhttp</span> = &#123; module = <span class="hljs-string">&quot;com.squareup.okhttp3:okhttp-bom&quot;</span>, version.ref = <span class="hljs-string">&quot;okhttp&quot;</span> &#125;<span class="hljs-attr">okhttp-lib</span> = &#123; module = <span class="hljs-string">&quot;com.squareup.okhttp3:okhttp&quot;</span> &#125;</code></pre><pre><code class="hljs gradle">implementation libs.webkitimplementation platform(libs.okhttp)implementation libs.okhttp.lib</code></pre><p>create <code>WebkitCookieManager.kt</code></p><pre><code class="hljs kotlin"><span class="hljs-keyword">import</span> android.content.Context<span class="hljs-keyword">import</span> android.webkit.WebView<span class="hljs-keyword">import</span> okhttp3.Cookie<span class="hljs-keyword">import</span> okhttp3.CookieJar<span class="hljs-keyword">import</span> okhttp3.HttpUrl<span class="hljs-keyword">import</span> java.net.CookieHandler<span class="hljs-keyword">import</span> java.net.CookiePolicy<span class="hljs-keyword">import</span> java.net.HttpCookie<span class="hljs-comment">/**</span><span class="hljs-comment"> * android webkit webview cookie manager.</span><span class="hljs-comment"> * [FULL USAGES](https://dimaslanjaka.github.io/2024/03/okhttp-cookie-handling-on-android.html)</span><span class="hljs-comment"> *</span><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> Dimas Lanjaka &lt;a href=&quot;https://www.webmanajemen.com&quot;&gt;https://www.webmanajemen.com&lt;/a&gt;</span><span class="hljs-comment"> */</span><span class="hljs-keyword">open</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">WebkitCookieManager</span> : <span class="hljs-type">CookieJar</span> &#123;    <span class="hljs-comment">/**</span><span class="hljs-comment">     * support for below android 10</span><span class="hljs-comment">     */</span>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">var</span> webkitCookieManager: android.webkit.CookieManager? = <span class="hljs-literal">null</span>    <span class="hljs-comment">/**</span><span class="hljs-comment">     * support for jvm or android 10+</span><span class="hljs-comment">     */</span>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">var</span> javaCookieManager: java.net.CookieManager? = <span class="hljs-literal">null</span>    <span class="hljs-comment">/**</span><span class="hljs-comment">     * support for webview intercept connection cookie handling</span><span class="hljs-comment">     */</span>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">var</span> webview: WebView? = <span class="hljs-literal">null</span>    <span class="hljs-comment">/**</span><span class="hljs-comment">     * the android context for clearing cookies on non-webview instance</span><span class="hljs-comment">     */</span>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">var</span> context: Context? = <span class="hljs-literal">null</span>    <span class="hljs-comment">/**</span><span class="hljs-comment">     * for non-persistent cookies</span><span class="hljs-comment">     */</span>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">val</span> cookieStore = mutableMapOf&lt;HttpUrl, List&lt;Cookie&gt;&gt;()    <span class="hljs-comment">/**</span><span class="hljs-comment">     * construct android cookie manager without webview</span><span class="hljs-comment">     */</span>    <span class="hljs-keyword">constructor</span>(manager: android.webkit.CookieManager, ctx: Context? = <span class="hljs-literal">null</span>) &#123;        webkitCookieManager = manager        setupAndroidCookieManager()        <span class="hljs-keyword">this</span>.context = ctx    &#125;    <span class="hljs-comment">/**</span><span class="hljs-comment">     * construct android cookie manager with webview</span><span class="hljs-comment">     */</span>    <span class="hljs-keyword">constructor</span>(manager: android.webkit.CookieManager, webView: WebView, ctx: Context? = <span class="hljs-literal">null</span>) &#123;        webkitCookieManager = manager        setupAndroidCookieManager(webView)        <span class="hljs-keyword">this</span>.webview = webView        <span class="hljs-keyword">this</span>.context = ctx    &#125;    <span class="hljs-comment">/**</span><span class="hljs-comment">     * construct non-persistent cookie manager</span><span class="hljs-comment">     */</span>    <span class="hljs-keyword">constructor</span>(ctx: Context? = <span class="hljs-literal">null</span>) &#123;        <span class="hljs-keyword">this</span>.context = ctx    &#125;    <span class="hljs-comment">/**</span><span class="hljs-comment">     * construct java cookie manager</span><span class="hljs-comment">     */</span>    <span class="hljs-keyword">constructor</span>(manager: java.net.CookieManager, ctx: Context? = <span class="hljs-literal">null</span>) &#123;        manager.setCookiePolicy(CookiePolicy.ACCEPT_ALL)        javaCookieManager = manager        CookieHandler.setDefault(javaCookieManager)        <span class="hljs-keyword">this</span>.context = ctx    &#125;    <span class="hljs-comment">/**</span><span class="hljs-comment">     * make android webkit cookie manager accept third-party cookies</span><span class="hljs-comment">     */</span>    <span class="hljs-keyword">private</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">setupAndroidCookieManager</span><span class="hljs-params">(webView: <span class="hljs-type">WebView</span>? = <span class="hljs-literal">null</span>)</span></span> &#123;        webkitCookieManager?.setAcceptCookie(<span class="hljs-literal">true</span>);        <span class="hljs-keyword">if</span> (webView != <span class="hljs-literal">null</span>) webkitCookieManager?.setAcceptThirdPartyCookies(webView, <span class="hljs-literal">true</span>);    &#125;    <span class="hljs-comment">/**</span><span class="hljs-comment">     * save cookies after request finished</span><span class="hljs-comment">     */</span>    <span class="hljs-keyword">override</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">saveFromResponse</span><span class="hljs-params">(url: <span class="hljs-type">HttpUrl</span>, cookies: <span class="hljs-type">List</span>&lt;<span class="hljs-type">Cookie</span>&gt;)</span></span> &#123;        cookies.forEach &#123; cookie -&gt;            webkitCookieManager?.setCookie(url.toString(), cookie.toString())            javaCookieManager?.cookieStore?.add(url.toUri(), HttpCookie.parse(cookie.toString())[<span class="hljs-number">0</span>])        &#125;        cookieStore.put(url, cookies);    &#125;    <span class="hljs-comment">/**</span><span class="hljs-comment">     * load cookies before okhttp execute request &#123;<span class="hljs-doctag">@link</span> okhttp3.OkHttpClient#newCall(request)&#125;</span><span class="hljs-comment">     */</span>    <span class="hljs-keyword">override</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">loadForRequest</span><span class="hljs-params">(url: <span class="hljs-type">HttpUrl</span>)</span></span>: List&lt;Cookie&gt; &#123;        <span class="hljs-keyword">return</span> <span class="hljs-keyword">if</span> (webkitCookieManager != <span class="hljs-literal">null</span>) &#123;            <span class="hljs-comment">// get from android webkit cookie manager</span>            <span class="hljs-keyword">when</span> (<span class="hljs-keyword">val</span> cookies = webkitCookieManager?.getCookie(url.toString())) &#123;                <span class="hljs-literal">null</span> -&gt; emptyList()                <span class="hljs-keyword">else</span> -&gt; cookies.split(<span class="hljs-string">&quot;; &quot;</span>).mapNotNull &#123; Cookie.parse(url, it) &#125;            &#125;        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (javaCookieManager != <span class="hljs-literal">null</span>) &#123;            <span class="hljs-comment">// get from java cookie manager</span>            <span class="hljs-keyword">when</span> (<span class="hljs-keyword">val</span> cookies = javaCookieManager?.cookieStore?.cookies) &#123;                <span class="hljs-literal">null</span> -&gt; emptyList()                <span class="hljs-keyword">else</span> -&gt; cookies.toString().split(<span class="hljs-string">&quot;; &quot;</span>).mapNotNull &#123; Cookie.parse(url, it) &#125;            &#125;        &#125; <span class="hljs-keyword">else</span> &#123;            <span class="hljs-comment">// get from non-persisten cookie store</span>            <span class="hljs-keyword">val</span> cookies = cookieStore[url]            <span class="hljs-keyword">return</span> cookies ?: ArrayList()        &#125;    &#125;    <span class="hljs-comment">/**</span><span class="hljs-comment">     * clear all stored cookies everywhere</span><span class="hljs-comment">     */</span>    <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">clearCookies</span><span class="hljs-params">()</span></span> &#123;        <span class="hljs-comment">// remove non-persistent stored cookies</span>        cookieStore.clear()        <span class="hljs-comment">// initialize android webkit cookie manager on null</span>        <span class="hljs-keyword">if</span> (webkitCookieManager == <span class="hljs-literal">null</span>) &#123;            webkitCookieManager = android.webkit.CookieManager.getInstance()            setupAndroidCookieManager()        &#125;        <span class="hljs-comment">// indicator when webview not initialized</span>        <span class="hljs-keyword">var</span> standaloneWebview = <span class="hljs-literal">false</span>        <span class="hljs-comment">// initalize fake webview instance</span>        <span class="hljs-keyword">if</span> (webview == <span class="hljs-literal">null</span> &amp;&amp; context != <span class="hljs-literal">null</span>) &#123;            <span class="hljs-comment">// declare standalone webview</span>            webview = WebView(context!!)            <span class="hljs-comment">// treat as standalone webview</span>            standaloneWebview = <span class="hljs-literal">true</span>        &#125;        <span class="hljs-comment">// remove all stored cookies from android webkit cookie manager</span>        webkitCookieManager?.removeAllCookies(<span class="hljs-literal">null</span>)        webkitCookieManager?.flush()        webkitCookieManager?.removeSessionCookies(<span class="hljs-literal">null</span>);        <span class="hljs-comment">// clear all caches from webview</span>        webview?.clearCache(<span class="hljs-literal">true</span>)        webview?.clearHistory()        webview?.clearFormData();        webview?.clearSslPreferences();        <span class="hljs-keyword">if</span> (standaloneWebview) &#123;            <span class="hljs-comment">// destroy standalone webview</span>            webview?.destroy()            webview = <span class="hljs-literal">null</span>        &#125;        <span class="hljs-comment">// initialize java cookie manager</span>        <span class="hljs-keyword">if</span> (javaCookieManager == <span class="hljs-literal">null</span>) &#123;            javaCookieManager = java.net.CookieManager(<span class="hljs-literal">null</span>, CookiePolicy.ACCEPT_ALL)            java.net.CookieHandler.setDefault(javaCookieManager)        &#125;        <span class="hljs-comment">// remove all stored cookies from java cookie manager</span>        javaCookieManager?.cookieStore?.removeAll()    &#125;&#125;</code></pre><p>my usage within view binding webview + custom webviewclient intercept using okhttp</p><pre><code class="hljs kotlin"><span class="hljs-keyword">val</span> clientBuilder = OkHttpClient.Builder()clientBuilder.cookieJar(WebkitCookieManager(CookieManager.getInstance(), binding!!webview, applicationContext))</code></pre><p><a href="https://i.stack.imgur.com/1AcJt.png"><img src="https://i.stack.imgur.com/1AcJt.png" alt=""></a></p><p><a href="https://i.stack.imgur.com/EgV2P.png"><img src="https://i.stack.imgur.com/EgV2P.png" alt=""></a></p><p>this work and tested, when i clear cookies the value of cookies on website changed, otherwise all same until expiration date of cookie.</p>]]></content>
    
    
    <summary type="html">OkHttp cookie handling on android webview supported Here how i implement cookie handling for android lollipop - tiramisu and also jvm and non-persistent connection. requires: [versions]webkit = 1.10.0</summary>
    
    
    
    <category term="programming" scheme="https://www.webmanajemen.com/categories/programming/"/>
    
    
    <category term="android" scheme="https://www.webmanajemen.com/tags/android/"/>
    
    <category term="java" scheme="https://www.webmanajemen.com/tags/java/"/>
    
    <category term="kotlin" scheme="https://www.webmanajemen.com/tags/kotlin/"/>
    
  </entry>
  
  <entry>
    <title>Turn git log history into markdown</title>
    <link href="https://www.webmanajemen.com/2024/03/turn-git-log-history-to-markdown.html"/>
    <id>https://www.webmanajemen.com/2024/03/turn-git-log-history-to-markdown.html</id>
    <published>2024-03-15T12:18:05.000Z</published>
    <updated>2024-03-15T12:18:05.000Z</updated>
    
    <content type="html"><![CDATA[<pre><code class="hljs bash"><span class="hljs-meta">#!/bin/bash</span><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;writing github commit history&quot;</span>git <span class="hljs-built_in">log</span> --pretty=format:<span class="hljs-string">&quot;%ad%n%h %s%n%b&quot;</span> --<span class="hljs-built_in">date</span>=format:<span class="hljs-string">&quot;%Y-%m-%d %H:%M:%S&quot;</span> | <span class="hljs-keyword">while</span> IFS= <span class="hljs-built_in">read</span> -r line; <span class="hljs-keyword">do</span>  trimmed_line=<span class="hljs-string">&quot;<span class="hljs-variable">$&#123;line#&quot;<span class="hljs-variable">$&#123;line%%[![:space:]]*&#125;</span>&quot;&#125;</span>&quot;</span>  trimmed_line=<span class="hljs-string">&quot;<span class="hljs-variable">$&#123;trimmed_line%&quot;<span class="hljs-variable">$&#123;trimmed_line##*[![:space:]]&#125;</span>&quot;&#125;</span>&quot;</span>  <span class="hljs-keyword">if</span> [ -n <span class="hljs-string">&quot;<span class="hljs-variable">$trimmed_line</span>&quot;</span> ]; <span class="hljs-keyword">then</span>    <span class="hljs-keyword">if</span> [[ <span class="hljs-string">&quot;<span class="hljs-variable">$trimmed_line</span>&quot;</span> =~ ^[0-9]&#123;4&#125;-[0-9]&#123;2&#125;-[0-9]&#123;2&#125;\ [0-9]&#123;2&#125;:[0-9]&#123;2&#125;:[0-9]&#123;2&#125;$ ]]; <span class="hljs-keyword">then</span>      <span class="hljs-built_in">echo</span> -e <span class="hljs-string">&quot;**<span class="hljs-variable">$trimmed_line</span>**\n&quot;</span>    <span class="hljs-keyword">elif</span> [ <span class="hljs-string">&quot;<span class="hljs-variable">$first_line</span>&quot;</span> = <span class="hljs-literal">true</span> ]; <span class="hljs-keyword">then</span>      first_line=<span class="hljs-literal">false</span>    <span class="hljs-keyword">else</span>      <span class="hljs-built_in">echo</span> -e <span class="hljs-string">&quot;  <span class="hljs-variable">$trimmed_line</span>\n&quot;</span>    <span class="hljs-keyword">fi</span>  <span class="hljs-keyword">fi</span><span class="hljs-keyword">done</span> &gt; release-repo/changelog-commit.md<span class="hljs-comment"># Wait for 3 seconds</span><span class="hljs-built_in">sleep</span> 3</code></pre><p>the format markdown like</p><pre><code class="hljs markdown"><span class="hljs-strong">**2024-03-07 18:41:29**</span><span class="hljs-bullet">-</span> 39d989ee chore: round double value<span class="hljs-strong">**2024-03-07 18:38:32**</span><span class="hljs-bullet">-</span> 0586bd98 chore: improve performance</code></pre><p>above script also works with multiline commits, looks like below:</p><pre><code class="hljs log">**2024-03-07 18:37:53**- 064c3b79 chore: update preparation activity UI  improve performance stability</code></pre>]]></content>
    
    
    <summary type="html">Turn git log history into markdown /bin/bashecho writing github commit historygit log --pretty=format:adnh snb --date=format:Y-m-d H:M:S while IFS= read -r line; do trimmed_line=lineline[[:space:]] tr</summary>
    
    
    
    <category term="programming" scheme="https://www.webmanajemen.com/categories/programming/"/>
    
    
    <category term="github" scheme="https://www.webmanajemen.com/tags/github/"/>
    
    <category term="bash" scheme="https://www.webmanajemen.com/tags/bash/"/>
    
  </entry>
  
  <entry>
    <title>enable automatic memory heap resizing of android studio</title>
    <link href="https://www.webmanajemen.com/2024/03/android-studio-enable-automatic-memory-heap-resizing.html"/>
    <id>https://www.webmanajemen.com/2024/03/android-studio-enable-automatic-memory-heap-resizing.html</id>
    <published>2024-03-02T11:44:44.000Z</published>
    <updated>2024-03-02T11:44:44.000Z</updated>
    
    <content type="html"><![CDATA[<p>To limit Android Studio’s memory usage, you can modify the <code>studio.vmoptions</code> file. This file contains configuration settings for Android Studio, including memory-related settings. Follow these steps:</p><ol><li><p><strong>Locate the <code>studio.vmoptions</code> file:</strong></p><ul><li>On Windows, it is usually located in the <code>bin</code> directory of the Android Studio installation directory. For example, <code>C:\Program Files\Android\Android Studio\bin\studio64.exe.vmoptions</code>.</li><li>On macOS, it is often found in the <code>Contents/bin</code> directory within the application bundle. For example, <code>/Applications/Android Studio.app/Contents/bin/studio.vmoptions</code>.</li><li>On Linux, it is also typically in the <code>bin</code> directory of the installation. For example, <code>/opt/android-studio/bin/studio64.vmoptions</code>.</li></ul></li><li><p><strong>Open the <code>studio.vmoptions</code> file in a text editor:</strong> Use a text editor like Notepad (on Windows), TextEdit (on macOS), or any code editor of your choice.</p></li><li><p><strong>Modify the memory settings:</strong> Add or modify the following lines to set the maximum heap size (Xmx) and the initial heap size (Xms). Adjust the values according to your system’s available memory.</p></li></ol><pre><code class="hljs plaintext">-Xms256m-Xmx2048m</code></pre><p>Example values are used above (<code>-Xms256m</code> for the initial heap size and <code>-Xmx2048m</code> for the maximum heap size). You can increase or decrease these values based on your system’s configuration.</p><ol start="2"><li><strong>Save the changes and restart Android Studio:</strong> Save the modifications to the <code>studio.vmoptions</code> file and restart Android Studio for the changes to take effect.</li></ol><p>Keep in mind that setting the maximum heap size too high might cause issues if your system doesn’t have enough available memory. Adjust the values based on your system’s specifications to achieve optimal performance.</p><h2 id="Enable-automatic-memory-heap-resizing">Enable automatic memory heap resizing</h2><p>To add garbage collection options and parallelism while limiting the maximum heap size to 1GB in Android Studio, you can modify the <code>studio.vmoptions</code> file. Here’s an example configuration:</p><p>java</p><pre><code class="hljs plaintext"># custom Android Studio VM options# Set the maximum heap size to 1GB-Xmx1g# Set the initial heap size-Xms256m# Enable parallel garbage collection-XX:+UseParallelGC# Enable concurrent garbage collection (for parallel)-XX:+UseConcMarkSweepGC# Set the size of the young generation (you may adjust this based on your needs)-XX:NewSize=512m-XX:MaxNewSize=512m# Enable automatic heap resizing-XX:+UseAdaptiveSizePolicy</code></pre><p>In this configuration:</p><ul><li><code>-XX:+UseParallelGC</code> enables the parallel garbage collector.</li><li><code>-XX:+UseConcMarkSweepGC</code> enables concurrent garbage collection, which works in conjunction with parallel garbage collection.</li><li><code>-XX:NewSize</code> and <code>-XX:MaxNewSize</code> set the size of the young generation, which is part of the heap where new objects are created. Adjust these values based on your requirements.</li><li><code>-XX:+UseAdaptiveSizePolicy</code> enables automatic heap resizing based on the application’s behavior.</li></ul><p>Feel free to adjust these settings based on your system’s specifications and the specific needs of your Android Studio projects. Keep in mind that tuning garbage collection settings can be a trial-and-error process, so monitor the performance and adjust as needed. Save the changes, restart Android Studio, and observe the impact on performance.</p>]]></content>
    
    
    <summary type="html">enable automatic memory heap resizing of android studio To limit Android Studios memory usage, you can modify the studio.vmoptions file. This file contains configuration settings for Android Studio, i</summary>
    
    
    
    <category term="programming" scheme="https://www.webmanajemen.com/categories/programming/"/>
    
    
    <category term="java" scheme="https://www.webmanajemen.com/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>is defining screen density on gradle.build can reduce build time ?</title>
    <link href="https://www.webmanajemen.com/2024/02/is-defining-screen-density-on-gradlebuild-can-reduce-build-time.html"/>
    <id>https://www.webmanajemen.com/2024/02/is-defining-screen-density-on-gradlebuild-can-reduce-build-time.html</id>
    <published>2024-02-28T06:27:35.000Z</published>
    <updated>2024-02-28T06:27:35.000Z</updated>
    
    <content type="html"><![CDATA[<p>Setting screen density in  an Android project’s “build.gradle” file usually has no direct impact on build time.</p><p>Screen density refers to the resources used in your Android app and  affects how your app runs on different devices with different screen densities.</p><p>This is not configured at build time.</p><p>To clarify, when you set screen density in the ‘build.gradle’ file, you typically specify different versions of the drawable resource for different screen densities.</p><p>For example:</p><p>gradle</p><pre><code class="language-gradle">android &#123;    // ...    splits &#123;        density &#123;            enable true            exclude &quot;ldpi&quot;, &quot;xxxhdpi&quot;            compatibleScreens 'small', 'normal', 'large', 'xlarge'        &#125;    &#125;&#125;</code></pre><p>This configuration is more about generating APKs with different drawables for different screen densities and is not directly related to  build times.</p><p>To improve  your Android project build time, you may want to consider other strategies such as:</p><ol><li><p><strong>Caching:</strong> Utilize Gradle’s built-in caching mechanisms to avoid redundant work in subsequent builds.</p></li><li><p><strong>Parallel Builds:</strong> Configure Gradle to perform parallel builds, allowing it to build multiple modules concurrently.</p></li><li><p><strong>Incremental Builds:</strong> Enable incremental builds to only rebuild the parts of the project that have changed.</p></li><li><p><strong>Dependency Analysis:</strong> Use tools like the Gradle build scans or build dashboard to analyze dependencies and understand which dependencies are impacting build times.</p></li><li><p><strong>Profile Your Build:</strong> Use tools like the Gradle profiler or Android Studio’s built-in profiler to identify bottlenecks in your build process.</p></li></ol><p>Remember that screen density configurations are important for the runtime behavior of your app on different devices, but they aren’t the primary factor influencing build times.</p>]]></content>
    
    
    <summary type="html">is defining screen density on gradle.build can reduce build time ? Setting screen density in an Android projects build.gradle file usually has no direct impact on build time. Screen density refers to </summary>
    
    
    
    <category term="programming" scheme="https://www.webmanajemen.com/categories/programming/"/>
    
    
    <category term="android" scheme="https://www.webmanajemen.com/tags/android/"/>
    
    <category term="java" scheme="https://www.webmanajemen.com/tags/java/"/>
    
    <category term="gradle" scheme="https://www.webmanajemen.com/tags/gradle/"/>
    
    <category term="kotlin" scheme="https://www.webmanajemen.com/tags/kotlin/"/>
    
    <category term="groovy" scheme="https://www.webmanajemen.com/tags/groovy/"/>
    
  </entry>
  
  <entry>
    <title>setup vmoption intellij idea for 8GB RAM processor intel i3</title>
    <link href="https://www.webmanajemen.com/2024/02/setup-vmoption-intellij-idea-for-8gb-ram-processor-intel-i3.html"/>
    <id>https://www.webmanajemen.com/2024/02/setup-vmoption-intellij-idea-for-8gb-ram-processor-intel-i3.html</id>
    <published>2024-02-27T07:39:32.000Z</published>
    <updated>2024-02-27T07:39:32.000Z</updated>
    
    <content type="html"><![CDATA[<p>When configuring IntelliJ IDEA’s VM options, we recommend that you  consider the available memory on your computer, in this case 8GB of RAM.<br>With this in mind, you need to configure your Java Virtual Machine (JVM) settings so that IntelliJ IDEA runs properly within the available resources.</p><p>Here are some suggestions for setting  VM options in IntelliJ IDEA with an 8GB RAM machine and an Intel i3 processor:</p><ol><li><p>Heap Memory (Xmx and Xms):</p><ul><li>Set the maximum heap size (<code>-Xmx</code>) to a value that is suitable for your system. With 8GB of RAM, you could allocate a significant portion, but not all, of the memory to IntelliJ. For example, you might use <code>-Xmx4g</code> to allocate 4GB of memory. Adjust this value based on your preferences and the other applications you might be running.</li><li>Set the initial heap size (<code>-Xms</code>) to a reasonable value, perhaps half of the maximum heap size. For example, <code>-Xms2g</code> for 2GB.</li></ul><p>Example:</p></li></ol><pre><code class="hljs bash">-Xms2g -Xmx4g</code></pre><ol start="2"><li><p>Permsize and Metaspace:</p><ul><li>If you are using a Java version before Java 8, consider specifying PermGen size. However, for Java 8 and later, this is replaced by Metaspace. Adjust the Metaspace size based on your needs.</li></ul><p>Example:</p></li></ol><pre><code class="hljs bash">-XX:MaxMetaspaceSize=512m</code></pre><ol start="3"><li><p>Garbage Collection:</p><ul><li>You can use JVM options to configure garbage collection algorithms based on your application’s characteristics. However, for day-to-day development, the default settings are usually sufficient.</li></ul></li><li><p>Additional Configuration:</p><ul><li>Depending on your specific requirements and the plugins you use, you might need additional configurations. For example, if you work with Android projects, you might need to allocate additional memory for Gradle builds.</li></ul><p>Example:</p></li></ol><pre><code class="hljs bash">-XX:MaxPermSize=512m -XX:+UseConcMarkSweepGC</code></pre><p>To set these options in IntelliJ IDEA:</p><ol><li>Open IntelliJ IDEA.</li><li>Navigate to “Help” &gt; “Edit Custom VM Options…”</li><li>Add or modify the VM options according to your preferences.</li></ol><p>Keep in mind to screen your system’s execution whereas utilizing <strong>IntelliJ Idea</strong>, particularly in the event that you run other memory-intensive applications at the same time. Alter the JVM alternatives based on your real needs and accessible assets.</p><p>Here my <strong>optimal setup for low-end device</strong>:</p><pre><code class="hljs text">-Xms128m-Xmx1024m-XX:ReservedCodeCacheSize=100m-XX:+IgnoreUnrecognizedVMOptions-XX:MaxPermSize=512m-XX:+UseConcMarkSweepGC-XX:+UseCodeCacheFlushing-XX:+UseCompressedOops--add-opens=java.base/jdk.internal.org.objectweb.asm=ALL-UNNAMED--add-opens=java.base/jdk.internal.org.objectweb.asm.tree=ALL-UNNAMED-javaagent:D:\ja-netfilter-all\ja-netfilter.jar=jetbrains</code></pre><ul><li><p><code>-Xmx</code>: Sets the maximum heap size, specifying the maximum amount of memory that the Java Virtual Machine (JVM) can use for the heap. For example, <code>-Xmx2000m</code> sets the maximum heap size to 2000 megabytes.</p></li><li><p><code>-Xms</code>: Sets the initial heap size, defining the amount of memory reserved for the heap when the JVM starts. For example, <code>-Xms300m</code> sets the initial heap size to 300 megabytes.</p></li><li><p><code>-XX:MaxMetaspaceSize</code>: Sets the maximum size of the Metaspace, which is the memory area used for class metadata in Java 8 and later versions. For example, <code>-XX:MaxMetaspaceSize=256m</code> sets the maximum Metaspace size to 256 megabytes.</p></li></ul>]]></content>
    
    
    <summary type="html">Here are some suggestions for setting up VM options in IntelliJ IDEA with an 8GB RAM machine and an Intel i3 processor</summary>
    
    
    
    <category term="programming" scheme="https://www.webmanajemen.com/categories/programming/"/>
    
    
    <category term="tips &amp; tricks" scheme="https://www.webmanajemen.com/tags/tips-tricks/"/>
    
    <category term="java" scheme="https://www.webmanajemen.com/tags/java/"/>
    
    <category term="kotlin" scheme="https://www.webmanajemen.com/tags/kotlin/"/>
    
  </entry>
  
  <entry>
    <title>How to use kotlin-bom?</title>
    <link href="https://www.webmanajemen.com/2024/02/how-to-use-kotlin-bom.html"/>
    <id>https://www.webmanajemen.com/2024/02/how-to-use-kotlin-bom.html</id>
    <published>2024-02-25T10:00:00.000Z</published>
    <updated>2024-02-25T17:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>In <strong>Kotlin</strong>, a bill of materials is a more centralized way to manage dependencies. This allows you to specify a set of dependencies and their versions in one place, making it easier to manage and update dependencies across your projects.</p><p>To use <strong>Kotlin BOM</strong>, you typically follow these steps:</p><h2 id="Add-the-BOM-Dependency-to-Your-Build-File">Add the BOM Dependency to Your Build File:</h2><p>You need to add the BOM dependency to your build file. If you’re using Gradle, you can add it like this:</p><pre><code class="hljs gradle">implementation platform(<span class="hljs-string">&quot;org.jetbrains.kotlin:kotlin-bom:1.5.31&quot;</span>)</code></pre><p>Make sure to replace <code>1.5.31</code> with the <strong>kotlin version</strong> you want to use.</p><h2 id="Use-the-BOM-Dependency-in-Your-Dependencies-Section">Use the BOM Dependency in Your Dependencies Section:</h2><p>After adding the BOM dependency, you can declare dependencies without specifying their versions. The BOM will manage the versions for you. For example:</p><pre><code class="hljs gradle">implementation <span class="hljs-string">&quot;org.jetbrains.kotlin:kotlin-stdlib&quot;</span>implementation <span class="hljs-string">&quot;org.jetbrains.kotlin:kotlin-reflect&quot;</span></code></pre><p>You don’t need to specify the version for <code>kotlin-stdlib</code> and <code>kotlin-reflect</code> as it will be inherited from the BOM.</p><h2 id="Sync-Your-Project">Sync Your Project:</h2><p>After making changes to your build file, sync your project with your build tool (e.g., run <code>./gradlew</code> or click “Sync Project with Gradle Files” in Android Studio).</p><p>Here’s an example of how your build.gradle (Kotlin DSL) file might look like:</p><pre><code class="hljs gradle">plugins &#123;    kotlin(<span class="hljs-string">&quot;jvm&quot;</span>) version <span class="hljs-string">&quot;1.5.31&quot;</span>&#125;<span class="hljs-keyword">repositories</span> &#123;    mavenCentral()&#125;<span class="hljs-keyword">dependencies</span> &#123;    implementation platform(<span class="hljs-string">&quot;org.jetbrains.kotlin:kotlin-bom:1.5.31&quot;</span>)    implementation <span class="hljs-string">&quot;org.jetbrains.kotlin:kotlin-stdlib&quot;</span>    implementation <span class="hljs-string">&quot;org.jetbrains.kotlin:kotlin-reflect&quot;</span>&#125;</code></pre><p>This way, you only need to update the version of the Kotlin BOM in one place, and it will automatically update the versions of all Kotlin dependencies in your project.</p><p>Keep in mind that the syntax might vary slightly depending on your build tool (Gradle, Maven, etc.) and the Kotlin plugin version you are using. Always refer to the official documentation for the most accurate and up-to-date information.</p><h2 id="Force-kotlin-using-same-version">Force kotlin using same version</h2><p>Gradle’s <strong>ResolutionStrategy</strong> allows you to force all subprojects to use the same Kotlin version.<br>The following is an example of using the <strong>ResolutionStrategy</strong> block in the root project’s. Here the implementation of both <code>build.gradle.kts</code> and <code>build.gradle</code> file:</p><p><strong>Ensure you set the right kotlin version</strong>.</p><p>For example i will set the kotlin version in variable</p><h4 id="build-gradle-file"><code>build.gradle</code> file:</h4><pre><code class="hljs gradle">ext &#123;    kotlin_version = <span class="hljs-string">&#x27;1.5.31&#x27;</span>&#125;</code></pre><pre><code class="hljs groovy"><span class="hljs-comment">// force kotlin same version</span>configurations.configureEach &#123;    resolutionStrategy.eachDependency &#123; details -&gt;        <span class="hljs-keyword">if</span> (requested.group == <span class="hljs-string">&quot;org.jetbrains.kotlin&quot;</span>) &#123;            useVersion <span class="hljs-string">&quot;$kotlin_version&quot;</span>            because <span class="hljs-string">&quot;To avoid different kotlin version&quot;</span>        &#125;    &#125;&#125;</code></pre><h4 id="build-gradle-kts-file"><code>build.gradle.kts</code> file:</h4><pre><code class="hljs kotlin">ext &#123;    <span class="hljs-keyword">val</span> kotlinVersion = <span class="hljs-string">&quot;1.5.31&quot;</span>&#125;</code></pre><pre><code class="hljs kotlin">configure&lt;DependencyResolutionManagement&gt; &#123;    resolutionStrategy &#123;        eachDependency &#123; details -&gt;            <span class="hljs-keyword">if</span> (details.requested.group == <span class="hljs-string">&quot;org.jetbrains.kotlin&quot;</span>) &#123;                details.useVersion(<span class="hljs-string">&quot;<span class="hljs-variable">$kotlin_version</span>&quot;</span>)            &#125;        &#125;    &#125;&#125;</code></pre>]]></content>
    
    
    <summary type="html">To use the Kotlin BOM, you typically follow these steps</summary>
    
    
    
    <category term="uncategorized" scheme="https://www.webmanajemen.com/categories/uncategorized/"/>
    
    
  </entry>
  
  <entry>
    <title>Hexo Cannot GET /</title>
    <link href="https://www.webmanajemen.com/2024/02/hexo-cannot-get.html"/>
    <id>https://www.webmanajemen.com/2024/02/hexo-cannot-get.html</id>
    <published>2024-02-24T07:58:30.000Z</published>
    <updated>2024-02-24T07:58:30.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Check-config-yaml">Check config yaml</h2><p>check your <code>_config.yml</code></p><pre><code class="hljs yaml"><span class="hljs-attr">url:</span> <span class="hljs-string">https://www.webmanajemen.com/</span><span class="hljs-attr">root:</span> <span class="hljs-string">/</span><span class="hljs-comment"># Home page setting</span><span class="hljs-comment"># path: Root path for your blogs index page. (default = &#x27;&#x27;)</span><span class="hljs-comment"># per_page: Posts displayed per page. (0 = disable pagination)</span><span class="hljs-comment"># order_by: Posts order. (Order by date descending by default)</span><span class="hljs-attr">index_generator:</span>  <span class="hljs-attr">path:</span> <span class="hljs-string">&#x27;/&#x27;</span>  <span class="hljs-attr">per_page:</span> <span class="hljs-number">10</span>  <span class="hljs-attr">order_by:</span> <span class="hljs-string">-updated</span> <span class="hljs-comment"># updated | date | -date | -updated</span>  <span class="hljs-attr">pagination_dir:</span> <span class="hljs-string">page</span></code></pre><h2 id="Check-the-URL-and-Paths">Check the URL and Paths:</h2><p>Ensure that you are accessing the correct URL.<br>Hexo may be configured to generate content under different paths.<br>For example, if your site is located in a subdirectory, you might need to access <code>http://localhost:4000/subdirectory/</code></p><h2 id="Reinstall-Dependencies">Reinstall Dependencies:</h2><p>Sometimes, issues can arise from corrupted dependencies.<br>You can try deleting the node_modules directory and reinstalling dependencies:</p><pre><code class="hljs bash"><span class="hljs-built_in">rm</span> -rf node_modulesnpm install</code></pre>]]></content>
    
    
    <summary type="html">How to fix Hexo Cannot GET /</summary>
    
    
    
    <category term="programming" scheme="https://www.webmanajemen.com/categories/programming/"/>
    
    
    <category term="typescript" scheme="https://www.webmanajemen.com/tags/typescript/"/>
    
    <category term="javascript" scheme="https://www.webmanajemen.com/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>Detect NodeJS if called using import or directly</title>
    <link href="https://www.webmanajemen.com/2024/02/detect-if-called-via-request-or-directly-by-command-line.html"/>
    <id>https://www.webmanajemen.com/2024/02/detect-if-called-via-request-or-directly-by-command-line.html</id>
    <published>2024-02-23T04:16:51.000Z</published>
    <updated>2024-02-23T04:33:33.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="CommonJS">CommonJS</h2><p>CommonJS modules can use the <code>require.main</code> object to determine whether the module is  executed directly or  imported. The <code>require.main</code> object is the main module that started your Node.js application.</p><pre><code class="hljs js"><span class="hljs-comment">// CommonJS</span><span class="hljs-comment">// main.js</span><span class="hljs-keyword">if</span> (<span class="hljs-built_in">require</span>.<span class="hljs-property">main</span> === <span class="hljs-variable language_">module</span>) &#123;  <span class="hljs-comment">// This script is being run directly</span>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;This script is the main module.&#x27;</span>);&#125; <span class="hljs-keyword">else</span> &#123;  <span class="hljs-comment">// This script is being imported as a module</span>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;This script is being imported as a module.&#x27;</span>);&#125;</code></pre><p>In this example, if you run <code>main.js</code> directly using the <code>main.js</code> node, you will see the output <strong>This script is the main module.</strong> When I import <code>main.js</code> into another script or module using <code>require('./main')</code> I get the output <strong>This script will be imported as a module</strong>.</p><p>Note that this approach works with Node.js versions that support ES Module (ESM) syntax.</p><p>If you are using <code>CommonJS</code> syntax, you may want to use the <code>require.main === module</code> check.</p><h2 id="ESM">ESM</h2><p>In the ECMAScript Module (ESM), you can use the “import.meta” object  to determine whether a module is  executed directly or  imported. In particular, you can check the <code>import.meta.url</code> property.</p><pre><code class="hljs ts"><span class="hljs-comment">// main.mjs</span><span class="hljs-keyword">if</span> (<span class="hljs-keyword">import</span>.<span class="hljs-property">meta</span>.<span class="hljs-property">url</span> === <span class="hljs-string">`file://<span class="hljs-subst">$&#123;process.argv[<span class="hljs-number">1</span>]&#125;</span>`</span>) &#123;  <span class="hljs-comment">// This module is being run directly</span>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;This module is the main module.&#x27;</span>);&#125; <span class="hljs-keyword">else</span> &#123;  <span class="hljs-comment">// This module is being imported as a module</span>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;This module is being imported as a module.&#x27;</span>);&#125;</code></pre><p>or you can using module <a href="http://npmjs.com/es-main">es-main</a>:</p><pre><code class="hljs ts"><span class="hljs-comment">// ESM</span><span class="hljs-keyword">import</span> esMain <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;es-main&#x27;</span>;<span class="hljs-keyword">if</span> (<span class="hljs-title function_">esMain</span>(<span class="hljs-keyword">import</span>.<span class="hljs-property">meta</span>)) &#123;    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;called directly&#x27;</span>);&#125; <span class="hljs-keyword">else</span> &#123;    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;required as a module&#x27;</span>);&#125;</code></pre><p>In this example, if you run <code>main.mjs</code> directly using the <code>main.mjs</code> node, you will see the output: &quot;This module is the main module.<br>&quot; If you import <code>main.mjs</code> into another ESM module using <code>import './main.mjs';</code>, you will see the output <strong>This module will be imported as a module.</strong> Note  the ESM file extension.</p><p>Modules are usually <code>.mjs</code>. If you want to use CommonJS syntax, you can use the approach described in the previous answer <code>(&quot;require.main === module&quot;)</code>.</p>]]></content>
    
    
    <summary type="html">How can I detect if my NodeJS file is called using node file path node path-to-file or requirepath-to-file or import path-to-file ?</summary>
    
    
    
    <category term="programming" scheme="https://www.webmanajemen.com/categories/programming/"/>
    
    
    <category term="typescript" scheme="https://www.webmanajemen.com/tags/typescript/"/>
    
    <category term="javascript" scheme="https://www.webmanajemen.com/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>How to disable WebRTC in Chrome, Firefox, Safari, Opera  Edge</title>
    <link href="https://www.webmanajemen.com/2024/02/how-to-disable-webrtc-in-chrome-firefox-safari-opera-edge.html"/>
    <id>https://www.webmanajemen.com/2024/02/how-to-disable-webrtc-in-chrome-firefox-safari-opera-edge.html</id>
    <published>2024-02-22T08:56:24.000Z</published>
    <updated>2024-04-14T09:55:50.000Z</updated>
    
    <content type="html"><![CDATA[<p align="center"><img src="https://github.com/K3V1991/How-to-disable-WebRTC-in-Chrome-Firefox-Safari-Opera-and-Edge/blob/main/Disable-WebRTC.png" width="200"></a><h2 id="NFO">NFO:</h2><blockquote><p>WebRTC is often talked about on VPN Websites. <br /><br>WebRTC is a Technology that allows your Browser to have Video and Voice Communication Abilities. <br /><br>When you use Google Meet to hold a Video Conference, you’re using WebRTC. <br /><br>The same is with the Facebook Messenger Video Call. <br /><br>There are other Applications that make use of WebRTC. For Example, if you’re on Discord. <br /><br>It enables live Communications in real Time.<br><br /></p></blockquote><h2 id="What-is-WebRTC-Leak">What is WebRTC Leak?</h2><blockquote><p>WebRTC works by sending Audio/Video Feeds between two Entities. <br /><br>This means your Browser will share some of your Information with the Website, which will include your IP Address. <br /><br>And these Channels can bypass the encrypted Tunnel you have Setup. <br /><br>So basically, a WebRTC Leak can reveal your real IP Address even if you are using a VPN.<br><br /></p></blockquote><h2 id="How-to-know-about-a-WebRTC-Leak">How to know about a WebRTC Leak?</h2><blockquote><p>To see if your IP is leaked go to <a href="https://ipleak.net/">IPLEAK.NET</a>. <br /><br>If you see your real IP on the Website, your IP is being leaked. <br /><br>If you can see the IP Address of the VPN Server, you’re safe and your browsing is secure.<br><br /></p></blockquote><h2 id="WebRTC-Leaks-can-be-blocked">WebRTC Leaks can be blocked</h2><blockquote><p>One Way is by getting a VPN that doesn’t allow these Leaks. <br /><br>Another Option is to block the WebRTC Requests directly from the Browser. <br /><br>You can also use browser Extensions if you cannot disable WebRTC.<br><br /></p></blockquote><h2 id="Note">Note:</h2><blockquote><p>Keep in Mind that if you disable WebRTC, you won’t be able to enjoy the Functionalities that come with it.<br><br /><br><br /></p></blockquote><h2 id="Disabling-WebRTC-in-Chrome">Disabling WebRTC in Chrome:</h2><blockquote><p>You cannot disable WebRTC in Chrome. The only thing you can do is use Add-ons. A good Chrome Add-on is <a href="https://chrome.google.com/webstore/detail/webrtc-leak-prevent/eiadekoaikejlgdbkbdfeijglgfdalml?hl=en">WebRTC Leak Prevent</a>. <br /><br>It controls the hidden WebRTC Settings and protects you against the Leaks.</p></blockquote><h2 id="Disabling-WebRTC-in-Chrome-Mobile">Disabling WebRTC in Chrome Mobile</h2><ol><li>Type this URL: <code>chrome://flags/#disable-webrtc</code> in your Android Chrome Address Bar. It will open a Settings Page</li><li>Scroll down and you’ll find WebRTC STUN Origin Header. You can disable it here</li><li>You can even disable WebRTC Hardware Video Encoding and decoding Options if you want<br><br /></li></ol><h2 id="Disabling-WebRTC-in-Mozilla-Firefox">Disabling WebRTC in Mozilla Firefox:</h2><ol><li>Go to the URL Bar, type <code>about:config</code> and press Enter</li><li>Firefox will display a Warning Message. Click on <code>Accept the Risk and Continue</code></li><li>It will take you to another Page. In the Search Bar, type: <code>media.peerconnection.enabled</code></li><li>Double click on the Row and change its Value to “false”. Now WebRTC will be disabled.<br><br /></li></ol><h2 id="Disabling-WebRTC-on-Safari-Browser">Disabling WebRTC on Safari Browser:</h2><ol><li>On Safari, visit <code>Preferences</code></li><li>Check <code>Show Develop menu in menu bar</code></li><li>In the Develop Section, go to <code>Experimental Features</code></li><li>Click on <code>Remove Legacy WebRTC API</code><br><br /></li></ol><h2 id="Disabling-WebRTC-in-Opera">Disabling WebRTC in Opera:</h2><blockquote><p>Opera doesn’t have a Way to disable WebRTC. You can use third-party Addons like <code>WebRTC Leak Prevent</code> just like you did with Chrome. <br /><br>Keep in mind that these Extensions do not fix the Leak. Instead, they block the Attempts the Websites make to collect IP Addresses.<br><br /></p></blockquote><h2 id="Disabling-WebRTC-on-Microsoft-Edge">Disabling WebRTC on Microsoft Edge:</h2><ol><li>Open Edge and type: <code>about:flags</code> in the Address Bar &amp; press Enter</li><li>You’ll see WebRTC here. Under that, there’s an Option to hide your real IP Address. Check the Box: <code>Hide my local IP address over WebRTC connections</code> to activate.<br><br /></li></ol><h2 id="How-to-stay-secure">How to stay secure:</h2><blockquote><p>Make sure you use a VPN. The VPN should be able to bypass the WebRTC Leak. <br /><br>With a VPN, you can use a Secure Browsers like LibreWolf that does not keep any of your Details.</p></blockquote>]]></content>
    
    
    <summary type="html">How to disable WebRTC in Chrome, Firefox, Safari, Opera Edge NFO: WebRTC is often talked about on VPN Websites. WebRTC is a Technology that allows your Browser to have Video and Voice Communication Ab</summary>
    
    
    
    <category term="programming" scheme="https://www.webmanajemen.com/categories/programming/"/>
    
    
    <category term="software" scheme="https://www.webmanajemen.com/tags/software/"/>
    
  </entry>
  
  <entry>
    <title>How to exclude anoying tags in intellij idea or android studio</title>
    <link href="https://www.webmanajemen.com/2024/02/how-to-exclude-anoying-tags-from-logcat-intellij-android-studio.html"/>
    <id>https://www.webmanajemen.com/2024/02/how-to-exclude-anoying-tags-from-logcat-intellij-android-studio.html</id>
    <published>2024-02-22T00:12:51.000Z</published>
    <updated>2024-02-22T01:07:53.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://github.com/dimaslanjaka/source-posts/assets/12471057/5241507b-bdf2-48b4-8712-5d1dc0761690" alt=""></p><p>In IntelliJ IDEA and Android Studio, you can exclude specific log tags in the Logcat view. Here’s how you can do it:</p><ul><li>Open Android Studio or Intellij IDEA.</li><li>Go to Tools &gt; Android &gt; Logcat.</li><li>In Logcat, seek for options related to “Ignore Tags” or “Ignored Log Tags”.</li><li>Add a list of tags that you want to ignore, by separating it using spaces or commas.</li></ul><pre><code class="hljs text">HardwareCodecCapability AudioCapabilities OpenGLRenderer ViewRoot ForceDarkHelper Looper PlayCore AudioTrack SurfaceUtils cr_ChildProcessConn FA ActivityThread DynamiteModule Perf DynamitePackage EgretLoader cr_LibraryLoader BpBinder chatty FeatureParser MediaCodec ExtendedACodec MapperHal OMXClient VideoCapabilities Gralloc3 MetadataUtil AdrenoGLES chromium DpmTcmClient WebViewFactory cr_CachingUmaRecorder AdrenoUtils cr_media AudioManager cr_SpareChildConn Chrome_InProcGp Choreographer AdInternalSettings Keep-Alive Vary pool-15-thread- WifiMulticast WifiHW MtpService PushClient EGL_emulation OpenGl* InputReader art dalvik Environment DataRouter AlarmManager WindowManager PhoneStatusBar ActivityManager ResourceType PackageManager gralloc Gnss NetRec ResolverController GAv4 AsyncOperation AppOps WificondControl aofp wifi netmgr ctxmgr BestClock FirebaseInstanceId android.os.Debug memtrack netd system_server StrictMode bluetooth NetworkMonitor BroadcastQueue ConnextivityService WakeLock HttpClientWrapper RAWR Tenor BgTask WifiService BluetoothAdapter UpdateStatsService AppIdleHistory Connectivity VelvetNetworkClient WorkerManager ActivityTaskManager UsageStatsService ocess.gservice DropBoxManagerService EventLogChimeraService PContextMetricsRunner MemoryController MultiDex AutofillManager libMEOW</code></pre><h2 id="Setting-result-looks-like-below-screenshoot">Setting result looks like below screenshoot</h2><p><img src="https://github.com/dimaslanjaka/source-posts/assets/12471057/1061e3cb-b57f-44de-96b8-78aab3cebeba" alt=""></p><h2 id="Additional-for-GeckoView">Additional for GeckoView</h2><p>Put below pattern to logcat filter column</p><pre><code class="hljs text">-tag~:GeckoConsole|SurfaceComposerClient|BufferQueueConsumer|GeckoSession|GeckoThread|Web\sContent|GeckoEventDispatcher|BLASTBufferQueue|GeckoNetworkManager|linker</code></pre><p><img src="https://github.com/dimaslanjaka/source-posts/assets/12471057/78a27118-5eae-43e1-abba-0a6a3ad81270" alt=""></p><h2 id="Conclusion">Conclusion</h2><p>Done, now all common anoying tags should not be displayed on logcat logs. Looks like below screenshot, no more annoying tags shown :)</p><p><img src="https://github.com/dimaslanjaka/source-posts/assets/12471057/6a72637d-6ee7-410d-bed5-a6d666663201" alt=""></p>]]></content>
    
    
    <summary type="html">In IntelliJ IDEA and Android Studio, you can exclude specific log tags in the Logcat view</summary>
    
    
    
    <category term="uncategorized" scheme="https://www.webmanajemen.com/categories/uncategorized/"/>
    
    
  </entry>
  
  <entry>
    <title>Fix The inferred type of X cannot be named without a reference</title>
    <link href="https://www.webmanajemen.com/2024/02/the-inferred-type-of-x-cannot-be-named-without-a-reference-to.html"/>
    <id>https://www.webmanajemen.com/2024/02/the-inferred-type-of-x-cannot-be-named-without-a-reference-to.html</id>
    <published>2024-02-16T20:03:26.000Z</published>
    <updated>2024-02-16T23:50:16.000Z</updated>
    
    <content type="html"><![CDATA[<p>If you’re experiencing a TypeScript mistake related to module determination or sort induction.<br><em>The blunder message recommends that the sort of ‘X’ cannot be named without a reference to ‘path/from/node_modules’, and it may not be convenient.</em></p><p>To resolve this issue, you’ll have to be give a type annotation for ‘X’ or adjust your module determination settings.<br>Here are a few of methods you’ll be able take:</p><h2 id="Sample-problem">Sample problem</h2><p>For example I will resolve these error</p><pre><code class="hljs log">The inferred type of &#x27;loadSavedCredentialsIfExist&#x27; cannot be named without a reference to &#x27;googleapis-common/node_modules/google-auth-library/build/src/auth/googleauth&#x27;. This is likely not portable. A type annotation is necessary.ts(2742)</code></pre><p><img src="https://github.com/dimaslanjaka/source-posts/assets/12471057/01783fa3-de3d-4b37-9ed1-c51238b10164" alt=""></p><p>with the problem codes is</p><pre><code class="hljs typescript"><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">Auth</span>, google &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;googleapis&#x27;</span>;<span class="hljs-comment">/**</span><span class="hljs-comment"> * Reads previously authorized credentials from the save file.</span><span class="hljs-comment"> *</span><span class="hljs-comment"> * <span class="hljs-doctag">@return</span></span><span class="hljs-comment"> */</span><span class="hljs-keyword">export</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">loadSavedCredentialsIfExist</span>(<span class="hljs-params"></span>) &#123;  <span class="hljs-keyword">try</span> &#123;    <span class="hljs-keyword">const</span> content = fs.<span class="hljs-title function_">readFileSync</span>(<span class="hljs-variable constant_">TOKEN_PATH</span>).<span class="hljs-title function_">toString</span>();    <span class="hljs-keyword">const</span> credentials = <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">parse</span>(content);    <span class="hljs-comment">// const uri = &#x27;https://www.googleapis.com/oauth2/v3/tokeninfo?access_token=&#x27; + credentials.accestoken;</span>    <span class="hljs-keyword">return</span> google.<span class="hljs-property">auth</span>.<span class="hljs-title function_">fromJSON</span>(credentials);  &#125; <span class="hljs-keyword">catch</span> (err) &#123;    <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;  &#125;&#125;</code></pre><h2 id="Clean-install">Clean install</h2><details>  <summary>Performing a clean introduce of Yarn can offer a few benefits</summary><ol><li><p><strong>Guarantees a New Begin:</strong> Expelling any existing establishments and arrangements guarantees simply begin with a clean slate. This will be accommodating on the off chance that you’ve experienced issues or irregularities along with your past Yarn setup.</p></li><li><p><strong>Settle Dependency Conflicts:</strong> A clean introduce makes a difference in settling potential reliance clashes or issues with obsolete bundles. It guarantees merely bring the most recent forms of Yarn and its dependencies.</p></li><li><p><strong>Dodges Versioning Issues:</strong> Over time, you might have different forms of Yarn introduced on your framework. A clean introduce guarantees merely are working with the most recent steady form, diminishing the chance of versioning issues.</p></li><li><p><strong>Makes strides Framework Soundness:</strong> Evacuating any leftovers of past establishments can contribute to a more steady and unsurprising environment. It makes a difference in avoiding unforeseen behavior caused by obsolete or clashing setups.</p></li><li><p><strong>Improves Security:</strong> Remaining up-to-date with the most recent forms of bundle directors is vital for security. A clean introduce guarantees simply have the foremost later form of Yarn, which may incorporate security patches and advancements.</p></li><li><p><strong>Tackles Establishment Issues:</strong> In the event that you’ve experienced troubles amid the establishment of Yarn or have issues related to lost conditions, a clean introduce can offer assistance resolve these issues.</p></li><li><p><strong>Simplifies Troubleshooting:</strong> When looking for offer assistance or investigating issues with Yarn, beginning with a clean establishment gives a steady standard. It makes it simpler for others to help you, as they won’t got to consider potential complications from past configurations.</p></li><li><p><strong>Advances Best Practices:</strong> Intermittently performing clean installs could be a great hone to preserve a solid improvement environment. It guarantees that you’re working with an optimized setup and diminishes the probability of experiencing unforeseen issues.</p></li></ol></details><p>On Unix-based systems (Linux or macOS):</p><pre><code class="hljs bash"><span class="hljs-built_in">rm</span> -rf node_modules<span class="hljs-built_in">rm</span> yarn.lock<span class="hljs-built_in">rm</span> package-lock.jsonyarn cache cleannpm cache clean --force</code></pre><p>On Windows (using Command Prompt):</p><pre><code class="hljs batch">rmdir /s /q node_modulesdel yarn.lockdel package-lock.jsonyarn cache cleannpm cache clean --force</code></pre><p>then <code>yarn install</code> or <code>npm install</code> again</p><h2 id="Type-Annotation">Type Annotation</h2><p>Provide a type annotation for ‘loadSavedCredentialsIfExist’. For example:</p><pre><code class="hljs ts"><span class="hljs-keyword">const</span> <span class="hljs-attr">loadSavedCredentialsIfExist</span>: <span class="hljs-keyword">import</span>(<span class="hljs-string">&#x27;googleapis-common/node_modules/google-auth-library/build/src/auth/googleauth&#x27;</span>).<span class="hljs-property">JSONClient</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;  <span class="hljs-keyword">try</span> &#123;    <span class="hljs-keyword">const</span> content = fs.<span class="hljs-title function_">readFileSync</span>(<span class="hljs-variable constant_">TOKEN_PATH</span>).<span class="hljs-title function_">toString</span>();    <span class="hljs-keyword">const</span> credentials = <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">parse</span>(content);    <span class="hljs-comment">// const uri = &#x27;https://www.googleapis.com/oauth2/v3/tokeninfo?access_token=&#x27; + credentials.accestoken;</span>    <span class="hljs-keyword">return</span> google.<span class="hljs-property">auth</span>.<span class="hljs-title function_">fromJSON</span>(credentials);  &#125; <span class="hljs-keyword">catch</span> (err) &#123;    <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;  &#125;&#125;</code></pre><h2 id="Boundary-return-type">Boundary return type</h2><p>Provide a boundary return type for ‘loadSavedCredentialsIfExist’. For example:</p><pre><code class="hljs ts"><span class="hljs-comment">/**</span><span class="hljs-comment"> * Reads previously authorized credentials from the save file.</span><span class="hljs-comment"> *</span><span class="hljs-comment"> * <span class="hljs-doctag">@return</span></span><span class="hljs-comment"> */</span><span class="hljs-keyword">export</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">loadSavedCredentialsIfExist</span>(<span class="hljs-params"></span>): <span class="hljs-keyword">import</span>(<span class="hljs-string">&#x27;googleapis-common/node_modules/google-auth-library/build/src/auth/googleauth&#x27;</span>).<span class="hljs-property">JSONClient</span> &#123;  <span class="hljs-keyword">try</span> &#123;    <span class="hljs-keyword">const</span> content = fs.<span class="hljs-title function_">readFileSync</span>(<span class="hljs-variable constant_">TOKEN_PATH</span>).<span class="hljs-title function_">toString</span>();    <span class="hljs-keyword">const</span> credentials = <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">parse</span>(content);    <span class="hljs-comment">// const uri = &#x27;https://www.googleapis.com/oauth2/v3/tokeninfo?access_token=&#x27; + credentials.accestoken;</span>    <span class="hljs-keyword">return</span> google.<span class="hljs-property">auth</span>.<span class="hljs-title function_">fromJSON</span>(credentials);  &#125; <span class="hljs-keyword">catch</span> (err) &#123;    <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;  &#125;&#125;</code></pre>]]></content>
    
    
    <summary type="html">How to fix The inferred type of X cannot be named without a reference to path. This is likely not portable. A type annotation is necessary.</summary>
    
    
    
    <category term="programming" scheme="https://www.webmanajemen.com/categories/programming/"/>
    
    
    <category term="typescript" scheme="https://www.webmanajemen.com/tags/typescript/"/>
    
  </entry>
  
  <entry>
    <title>List loaded posts in HexoJS</title>
    <link href="https://www.webmanajemen.com/2024/02/hexo-list-loaded-posts.html"/>
    <id>https://www.webmanajemen.com/2024/02/hexo-list-loaded-posts.html</id>
    <published>2024-02-12T06:50:16.000Z</published>
    <updated>2024-02-12T07:08:52.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Basic-codes-to-list-loaded-hexo-posts">Basic codes to list loaded hexo posts</h2><p>by default to list all posts you can using below codes:</p><pre><div class="caption">javascript</div><code class="hljs javascript"><span class="hljs-keyword">const</span> posts = hexo.<span class="hljs-property">locals</span>.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;posts&#x27;</span>).<span class="hljs-property">data</span>.<span class="hljs-title function_">map</span>(<span class="hljs-function">(<span class="hljs-params">&#123; title, keywords, description, raw, tags, categories, path &#125;</span>) =&gt;</span> (&#123;    title,    keywords,    description,    raw,    path,    <span class="hljs-attr">tags</span>: tags.<span class="hljs-property">data</span>.<span class="hljs-title function_">map</span>(<span class="hljs-function">(<span class="hljs-params">tag</span>) =&gt;</span> tag.<span class="hljs-property">name</span>),    <span class="hljs-attr">categories</span>: categories.<span class="hljs-property">data</span>.<span class="hljs-title function_">map</span>(<span class="hljs-function">(<span class="hljs-params">category</span>) =&gt;</span> category.<span class="hljs-property">name</span>)&#125;));</code></pre><h2 id="Fix-missing-description">Fix missing description</h2><p>by default hexo not provide property <code>description</code>, you have to add it manually to all your Hexo Markdown posts. Or you provide the <code>post excerpt</code> to assign with missing <code>description</code></p><pre><code class="hljs js"><span class="hljs-keyword">const</span> posts = hexo.<span class="hljs-property">locals</span>.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;posts&#x27;</span>).<span class="hljs-property">data</span>.<span class="hljs-title function_">map</span>(<span class="hljs-function">(<span class="hljs-params">&#123; description, excerpt &#125;</span>) =&gt;</span> (&#123;  <span class="hljs-attr">description</span>: description || excerpt&#125;));</code></pre><h2 id="List-loaded-hexo-posts-in-typescript">List loaded hexo posts in typescript</h2><p>in typescript you should declare custom type</p><pre><code class="hljs ts"><span class="hljs-keyword">interface</span> <span class="hljs-title class_">PostList</span> &#123;  <span class="hljs-attr">title</span>: <span class="hljs-built_in">string</span>;  <span class="hljs-attr">description</span>: <span class="hljs-built_in">string</span>;  <span class="hljs-attr">keywords</span>: <span class="hljs-built_in">string</span>[];  <span class="hljs-attr">tags</span>: <span class="hljs-built_in">string</span>[];  <span class="hljs-attr">categories</span>: <span class="hljs-built_in">string</span>[];  <span class="hljs-attr">permalink</span>: <span class="hljs-built_in">string</span>;&#125;<span class="hljs-keyword">const</span> posts = hexo.<span class="hljs-property">locals</span>  .<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;posts&#x27;</span>)  .<span class="hljs-property">data</span>.<span class="hljs-title function_">map</span>(    <span class="hljs-function">(<span class="hljs-params">&#123;</span></span><span class="hljs-params"><span class="hljs-function">      title,</span></span><span class="hljs-params"><span class="hljs-function">      keywords,</span></span><span class="hljs-params"><span class="hljs-function">      description,</span></span><span class="hljs-params"><span class="hljs-function">      excerpt,</span></span><span class="hljs-params"><span class="hljs-function">      raw,</span></span><span class="hljs-params"><span class="hljs-function">      tags,</span></span><span class="hljs-params"><span class="hljs-function">      categories,</span></span><span class="hljs-params"><span class="hljs-function">      path</span></span><span class="hljs-params"><span class="hljs-function">    &#125;</span>) =&gt;</span> (&#123;      title,      <span class="hljs-comment">// fix non-array keywords</span>      <span class="hljs-attr">keywords</span>: <span class="hljs-title class_">Array</span>.<span class="hljs-title function_">isArray</span>(keywords) ? keywords : [keywords],      <span class="hljs-comment">// fix missing description</span>      <span class="hljs-attr">description</span>: description || excerpt,      raw,      <span class="hljs-attr">permalink</span>: path,      <span class="hljs-attr">tags</span>: tags.<span class="hljs-property">data</span>.<span class="hljs-title function_">map</span>(<span class="hljs-function">(<span class="hljs-params">tag</span>) =&gt;</span> tag.<span class="hljs-property">name</span>),      <span class="hljs-attr">categories</span>: categories.<span class="hljs-property">data</span>.<span class="hljs-title function_">map</span>(<span class="hljs-function">(<span class="hljs-params">category</span>) =&gt;</span> category.<span class="hljs-property">name</span>)    &#125;)  ) <span class="hljs-keyword">as</span> <span class="hljs-title class_">PostList</span>;</code></pre>]]></content>
    
    
    <summary type="html">List loaded posts in HexoJS Basic codes to list loaded hexo posts by default to list all posts you can using below codes: Fix missing description by default hexo not provide property description, you </summary>
    
    
    
    <category term="programming" scheme="https://www.webmanajemen.com/categories/programming/"/>
    
    
    <category term="typescript" scheme="https://www.webmanajemen.com/tags/typescript/"/>
    
    <category term="javascript" scheme="https://www.webmanajemen.com/tags/javascript/"/>
    
  </entry>
  
</feed>
