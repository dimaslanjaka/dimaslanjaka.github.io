#!/usr/bin/env node
"use strict";

const { exec } = require("child_process");
const { existsSync } = require("fs");
const path = require("path");
const minimist = require("minimist")(process.argv.slice(2));
//console.dir(minimist);

// commit -f=package.json "update dependencies"
if (minimist._.length) {
  const help = minimist.help || minimist.h || (minimist._.length == 1 && minimist._[0] == "help");
  if (help) {
    console.log({ cwd: process.cwd(), dependencies: [require.resolve("minimist")] });
    return;
  }
  let message = minimist._.length == 1 ? minimist._[0] : minimist._.join(" ");
  const filesToCommit = [];
  let argFiles = minimist.file || minimist.f;
  if (argFiles) {
    argFiles.split(",").forEach(
      /**
       * @param {string} f
       */
      (f) => {
        if (f.trim().length) {
          const cwd = process.cwd();
          let find;
          if (existsSync(path.join(cwd, f))) {
            find = path.join(cwd, f);
          }

          if (find) {
            filesToCommit.push(find);
          }
        }
      }
    );
  }

  if (filesToCommit.length) {
    filesToCommit.forEach((f) => {
      execute(`git add ${f}`).then((err) => {
        if (!err) {
          execute(`git commit -m "${message}"`).then(gitPush).catch(console.error);
        } else {
          // reset git add
          execute("git reset --soft HEAD^").catch(console.error);
        }
      });
    });
  } else if (message.trim().length > 0) {
    // if custom files empty, then add all files and commit them
    execute(`git add -A`).then((err) => {
      if (!err) {
        execute(`git commit -m "${message}"`).then(gitPush).catch(console.error);
      } else {
        console.log("(git) failed to add");
        execute("git reset --soft HEAD^");
      }
    });
  }
}

function gitPush(err, stdout, stderr) {
  if (!err) {
    if (minimist.push) execute("git push").catch(console.error);
  }
}

//git commit -m $*

function execute(command) {
  return new Promise(function (resolve, reject) {
    exec(command, { cwd: process.cwd() }, (err, stdout, stderr) => {
      if (err) return reject(err, stdout, stderr);
      if (stderr) console.error(stderr);
      resolve(null, stdout, stderr);
    });
  });
}
