<?xml version="1.0"?>
<rss version="2.0">
    <channel>
        <title>Website Management Indonesia • Posts by &#34;quest&#34; tag</title>
        <link>https://www.webmanajemen.com</link>
        <description>External source WMI Github Laboratory</description>
        <language>en</language>
        <pubDate>Mon, 16 Aug 2021 17:00:00 +0000</pubDate>
        <lastBuildDate>Mon, 16 Aug 2021 17:00:00 +0000</lastBuildDate>
        <category>RegExp</category>
        <category>Test</category>
        <category>Game Control</category>
        <category>Macros</category>
        <category>Life Skill</category>
        <category>Auto Click</category>
        <category>Event</category>
        <category>Wordpress</category>
        <category>Blogger</category>
        <category>Blogging</category>
        <category>CSS</category>
        <category>SEO</category>
        <category>Adsense</category>
        <category>JS</category>
        <category>PHP</category>
        <category>HTML</category>
        <category>AMP</category>
        <category>Facebook</category>
        <category>Social Media</category>
        <category>Android</category>
        <category>Script</category>
        <category>Tools</category>
        <category>Tips &amp; Tricks</category>
        <category>CodeIgniter</category>
        <category>Miscellaneous</category>
        <category>Linux/Unix</category>
        <category>Marketing Strategies</category>
        <category>VainGlory</category>
        <category>Hosting</category>
        <category>Games</category>
        <category>Durango</category>
        <category>Software</category>
        <category>Movies</category>
        <category>Musics</category>
        <category>Popular</category>
        <category>Fonts</category>
        <category>Share</category>
        <category>Proxy</category>
        <category>Java</category>
        <category>Gradle</category>
        <category>Kotlin</category>
        <category>Github</category>
        <category>TS</category>
        <category>Windows</category>
        <category>Genshin Impact</category>
        <category>Chest Location</category>
        <category>Quest</category>
        <item>
            <guid isPermalink="true">https://www.webmanajemen.com/The%20Legend%20Of%20Neverland/Expel%20Incident/Crystals%20Fairy%20Exp.html</guid>
            <title>Highest Fairies Exp And Crystals Expel Incident</title>
            <link>https://www.webmanajemen.com/The%20Legend%20Of%20Neverland/Expel%20Incident/Crystals%20Fairy%20Exp.html</link>
            <category>Quest</category>
            <pubDate>Mon, 16 Aug 2021 17:00:00 +0000</pubDate>
            <description><![CDATA[ &lt;!-- toc --&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#gaya-snow-mountain-f2&#34;&gt;Gaya Snow Mountain F2&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#gaya-snow-mountain-f3&#34;&gt;Gaya Snow Mountain F3&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#skala-desert-f2&#34;&gt;Skala Desert F2&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#skala-desert-f3&#34;&gt;Skala Desert F3&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#maple-grove-f1&#34;&gt;Maple Grove F1&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- tocstop --&gt;
&lt;h2&gt;&lt;span id=&#34;expel-incident-the-legend-of-neverland&#34;&gt;Expel Incident The Legend Of NeverLand&lt;/span&gt;&lt;/h2&gt;
In the game The Legend Of Neverland, every day is given 6 kinds of Expel Incidents. Each incident has a reward variant. There are those who have Exp for more characters, more Exp for fairies and crystals, and standard rewards (balance rewards). The following is the Expel Incident with the most FAIRY EXP AND CRYSTALS.
&lt;h2&gt;&lt;span id=&#34;gaya-snow-mountain-f2&#34;&gt; Gaya Snow Mountain F2&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;Crystals%20Fairy%20Exp/Gaya%20Snow%20Mountain%202F.png&#34; alt&gt;&lt;/p&gt;
&lt;h2&gt;&lt;span id=&#34;gaya-snow-mountain-f3&#34;&gt; Gaya Snow Mountain F3&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;Crystals%20Fairy%20Exp/Gaya%20Snow%20Mountain%203F.png&#34; alt&gt;&lt;/p&gt;
&lt;h2&gt;&lt;span id=&#34;skala-desert-f2&#34;&gt; Skala Desert F2&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/12471057/136436283-942699d6-be8d-4b55-9ebc-6641ca9884ac.png&#34; alt=&#34;Scorpion&#39;s Revenge&#34;&gt;&lt;br&gt;
&lt;em&gt;Scorpion’s Revenge - Kill toxic desert scorpions&lt;/em&gt;&lt;/p&gt;
&lt;h2&gt;&lt;span id=&#34;skala-desert-f3&#34;&gt; Skala Desert F3&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;Crystals%20Fairy%20Exp/Skala%20Desert%203F.png&#34; alt&gt;&lt;/p&gt;
&lt;h2&gt;&lt;span id=&#34;maple-grove-f1&#34;&gt; Maple Grove F1&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/12471057/136435907-f0b7241e-a0c0-4091-8c2c-f04358acbfcc.png&#34; alt=&#34;Troublemaker&#34;&gt;&lt;br&gt;
&lt;em&gt;Troublemaker - Defeat adult kappa&lt;/em&gt;&lt;/p&gt;
&lt;style&gt;em::before{content:&#34;Gate Name : &#34;;}&lt;/style&gt;
&lt;div id=&#34;hexo-adsense-hidden&#34; style=&#34;display:none&#34;&gt;&lt;div hexo-adsense=&#34;ads-content&#34;&gt;
&lt;ins class=&#34;adsbygoogle&#34; style=&#34;display:block; text-align:center;&#34; data-ad-layout=&#34;in-article&#34; data-ad-format=&#34;fluid&#34; data-ad-client=&#34;ca-pub-1165447249910969&#34; data-ad-slot=&#34;8418182273&#34;&gt;&lt;/ins&gt;
&lt;script&gt;
     
&lt;/script&gt;
&lt;/div&gt;&lt;div hexo-adsense=&#34;ads-content&#34;&gt;
&lt;ins class=&#34;adsbygoogle&#34; style=&#34;display:block; text-align:center;&#34; data-ad-layout=&#34;in-article&#34; data-ad-format=&#34;fluid&#34; data-ad-client=&#34;ca-pub-1165447249910969&#34; data-ad-slot=&#34;7823254087&#34;&gt;&lt;/ins&gt;
&lt;script&gt;
     
&lt;/script&gt;
&lt;/div&gt;&lt;/div&gt;&lt;style&gt;*[hexo-adsense=&#34;ads-content&#34;] {
  display: block;
  background: #fff url(//i.imgur.com/mBbv90p.png) no-repeat top right;
  color: #303030;
  /*min-height: 18px;
  min-width: 81px;*/
  min-width: 250px;
  text-align: center;
  margin-left: auto;
  margin-right: auto;
}
&lt;/style&gt;&lt;script&gt;/**
 * Browser processor
 */

const isBrowser = new Function(&#34;try {return this===window;}catch(e){ return false;}&#34;);

/**
 * @type {import(&#34;../lib/config&#34;)}
 */
const hexoAdsenseConfig = JSON.parse(document.getElementById(&#34;hexo-adsense-config&#34;).textContent);
//console.log(hexoAdsenseConfig);

/**
 * Insert after element
 * @param {HTMLElement} newElement
 * @param {HTMLElement} oldElement
 */
function insertAfter(newElement, oldElement) {
  if (oldElement &amp;&amp; newElement) {
    let parent = oldElement.parentNode;
    if (parent.lastChild == oldElement) {
      parent.appendChild(newElement);
    } else {
      parent.insertBefore(newElement, oldElement.nextSibling);
    }
  } else {
    console.error(&#34;cannot insert element&#34;);
  }
}

/**
 * Replace elements with new
 * @param {HTMLElement} newElement
 * @param {HTMLElement} oldElement
 */
function replaceWith(newElement, oldElement) {
  if (!oldElement.parentNode) {
    console.log(oldElement, &#34;parent null&#34;);
    let d = document.createElement(&#34;div&#34;);
    d.appendChild(oldElement);
  } else {
    //console.log(oldElement.parentNode.tagName);
    oldElement.parentNode.replaceChild(newElement, oldElement);
  }
  /*
  try {
    oldElement.parentNode.replaceChild(newElement, oldElement);
  } catch (e) {}
  */
}

let createElementFromHTML = function (htmlString) {
  if (htmlString instanceof HTMLElement) {
    return htmlString;
  }
  var div = document.createElement(&#34;div&#34;);
  div.innerHTML = htmlString.trim();

  // Change this to div.childNodes to support multiple top-level nodes
  return div.firstChild;
};

function oldMethod() {
  let article = document.getElementsByTagName(&#34;article&#34;);
  let adscont = document.getElementById(&#34;hexo-adsense-ads-content&#34;);
  if (adscont &amp;&amp; adscont.length) {
    if (article &amp;&amp; article.length) {
      let linebreak = article.item(0).getElementsByTagName(&#34;br&#34;);
      if (linebreak.length &gt; 0) {
        return replaceWith(adscont, linebreak.item(0));
      }

      let headings = article.item(0).querySelectorAll(&#34;h2,h3,h4,h5&#34;);
      if (headings &amp;&amp; headings.length &gt; 0) {
        return insertAfter(adscont, headings.item(0));
      }
    }
  }
}

/**
 * random number between min and max
 */
function ranumb(min, max) {
  // min and max included
  return Math.floor(Math.random() * (max - min + 1) + min);
}

function newMethod() {
  const adshide = document.getElementById(&#34;hexo-adsense-hidden&#34;);
  let adscont = adshide.querySelectorAll(&#39;[hexo-adsense=&#34;ads-content&#34;]&#39;);
  const article = document.querySelectorAll(&#34;article&#34;);
  if (article.length &gt; 0 &amp;&amp; adscont.length &gt; 0) {
    /**
     * @type {HTMLElement}
     */
    let ads;
    if (article.length == 1) {
      console.log(&#34;webpage is post&#34;);
      let targetArticle = article.item(0);

      // prioritize hexo-adsense-fill before auto ads on other elements
      const ads_fill = targetArticle.querySelectorAll(&#34;*[hexo-adsense-fill]&#34;);
      if (ads_fill.length &gt; 0) {
        for (let index = 0; index &lt; ads_fill.length; index++) {
          const toFill = ads_fill[index];
          if (typeof adscont[index] !== &#34;undefined&#34;) {
            toFill.appendChild(adscont[index]);
          }
        }
      }

      // the rest of the ads will show automatically after headers elements
      adscont = adshide.querySelectorAll(&#39;[hexo-adsense=&#34;ads-content&#34;]&#39;);
      //console.log(adscont.length, &#34;ads left&#34;);
      if (adscont.length &gt; 0) {
        const headers = targetArticle.querySelectorAll(&#34;h1,h2,h3,h4,h5,h6&#34;);
        if (headers.length &gt; 0) {
          // generate index of headers
          let headers_index = Array.apply(null, { length: headers.length }).map(Number.call, Number);
          //console.log(headers_index);
          for (let index = 0; index &lt; adscont.length; index++) {
            ads = adscont[index];
            const rheaders = shuffleArr2(headers_index);
            // pick a random index
            const rheader = rheaders.next().value;
            if (typeof rheader === &#34;number&#34;) {
              const header = headers.item(rheader);
              insertAfter(createElementFromHTML(ads), header);
            }
          }
        }
      }

      // the rest of the ads will show automatically to linebreak elements
      adscont = adshide.querySelectorAll(&#39;[hexo-adsense=&#34;ads-content&#34;]&#39;);
      if (adscont.length &gt; 0) {
        const linebreaks = targetArticle.querySelectorAll(&#34;br,hr&#34;);
        if (linebreaks.length &gt; 0) {
          // generate index of linebreaks
          let linebreaks_index = Array.apply(null, { length: linebreaks.length }).map(Number.call, Number);
          //console.log(linebreaks_index);
          // randomize linebreaks index
          const rlinebreaks = shuffleArr2(linebreaks_index);
          for (let index = 0; index &lt; adscont.length; index++) {
            ads = adscont[index];
            // pick a random index
            const rlinebreak = rlinebreaks.next().value;
            if (typeof rlinebreak == &#34;number&#34;) {
              const linebreak = linebreaks.item(rlinebreak);
              if ([&#34;blockquote&#34;, &#34;img&#34;, &#34;a&#34;].includes(linebreak.parentNode.tagName.toLowerCase())) {
                index--;
                continue;
              }
              //console.log(linebreak.tagName);
              replaceWith(createElementFromHTML(ads), linebreak);
            }
          }
        }
      }
    } else {
      console.log(&#34;webpage is not post&#34;);
      // generate index of articles
      let articles_index = Array.apply(null, { length: article.length }).map(Number.call, Number);
      // randomize linebreaks index
      const rArticles = shuffleArr2(articles_index);
      for (let index = 0; index &lt; adscont.length; index++) {
        ads = adscont[index];
        // pick a random index
        const rArticle = rArticles.next().value;
        if (typeof rArticle == &#34;number&#34;) {
          //console.log(&#34;adsense display to article index&#34;, rArticle);
          const pickArticle = article.item(rArticle);
          pickArticle.appendChild(createElementFromHTML(ads));
        }
      }
    }

    // summon adsbygoogle.push()
    adsensePush();
  }
}

function eventMethod() {
  document.addEventListener(&#34;DOMContentLoaded&#34;, function () {
    // we look for the jump break
    var _moreElm = document.querySelector(&#34;a[name=more]&#34;);

    // here is your adsense code
    var _adsenseCode = &#34; [replace this with code from the last step] &#34;;

    // This inserts the ad inside of the blog post
    _moreElm.insertAdjacentHTML(&#34;afterend&#34;, &#39;&lt;div class=&#34;adsense-after-break&#34;&gt;&#39; + _adsenseCode + &#34;&lt;/div&gt;&#34;);

    // Initialize the ads here
    (adsbygoogle = window.adsbygoogle || []).push({});
  });
}

/**
 * Shuffle Array
 * @param {any[]} array
 * @see {@link https://stackoverflow.com/a/18806417}
 * @returns
 */
function shuffleArr(array) {
  var i = array.length,
    j = 0,
    temp;

  while (i--) {
    j = Math.floor(Math.random() * (i + 1));

    // swap randomly chosen element with current element
    temp = array[i];
    array[i] = array[j];
    array[j] = temp;
  }

  return array;
}

/**
 * Next generation of non-repeated randomizer
 * @see {@link shuffleArr}
 * @param {any[]} array
 */
function* shuffleArr2(array) {
  var i = array.length;

  while (i--) {
    yield array.splice(Math.floor(Math.random() * (i + 1)), 1)[0];
  }
}

function adsensePush() {
  for (let index = 0; index &lt; document.querySelectorAll(&#39;[hexo-adsense=&#34;ads-content&#34;]&#39;).length; index++) {
    (adsbygoogle = window.adsbygoogle || []).push({
      google_ad_client: hexoAdsenseConfig.pub,
    });
  }
}

if (!isBrowser()) {
  module.exports = {
    replaceWith,
    insertAfter,
  };
} else {
  window.__tcfapi = (command, parameter, callback) =&gt; {
    if (command === &#34;checkConsent&#34;) {
      callback(true);
    }
    if (command === &#34;addEventListener&#34;) {
      callback({ eventStatus: &#34;tcloaded&#34;, gdprApplies: false }, true);
    }
  };

  if (typeof document.addEventListener == &#34;function&#34;) {
    document.addEventListener(&#34;DOMContentLoaded&#34;, newMethod);
  } else if (typeof window.attachEvent == &#34;function&#34;) {
    window.attachEvent(&#34;onload&#34;, newMethod);
  } else {
    window.onload = newMethod;
  }
}
&lt;/script&gt; ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://www.webmanajemen.com/The%20Legend%20Of%20Neverland/Expel%20Incident/Exp%20Char.html</guid>
            <title>Highest Exp Character Expel Incident</title>
            <link>https://www.webmanajemen.com/The%20Legend%20Of%20Neverland/Expel%20Incident/Exp%20Char.html</link>
            <category>Quest</category>
            <pubDate>Mon, 16 Aug 2021 17:00:00 +0000</pubDate>
            <description><![CDATA[ &lt;!-- toc --&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#kagmaw-grassland-f3&#34;&gt;Kagmaw Grassland F3&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#kagmaw-grassland-f1&#34;&gt;Kagmaw Grassland F1&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#skala-desert-f1&#34;&gt;Skala Desert F1&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#skala-desert-f3&#34;&gt;Skala Desert F3&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#oak-town&#34;&gt;Oak Town&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#twilight-rainforest-f1&#34;&gt;Twilight Rainforest F1&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#twilight-rainforest-f3&#34;&gt;Twilight Rainforest F3&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#gaia-snow-mountain-f1&#34;&gt;Gaia Snow Mountain F1&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#gaia-snow-mountain-f2&#34;&gt;Gaia Snow Mountain F2&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#gaia-snow-mountain-f3&#34;&gt;Gaia Snow Mountain F3&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#fog-swamp-f1&#34;&gt;Fog Swamp F1&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#fog-swamp-f3&#34;&gt;Fog Swamp F3&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#maple-grove-f3&#34;&gt;Maple Grove F3&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#morcuri-mines-f1&#34;&gt;Morcuri Mines F1&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#morcuri-mines-f2&#34;&gt;Morcuri Mines F2&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- tocstop --&gt;
&lt;h2&gt;&lt;span id=&#34;expel-incident-the-legend-of-neverland&#34;&gt;Expel Incident The Legend Of NeverLand&lt;/span&gt;&lt;/h2&gt;
In the game The Legend Of Neverland, every day is given 6 kinds of Expel Incidents. Each incident has a reward variant. There are those who have Exp for more characters, more Exp for fairies and crystals, and standard rewards (balance rewards). The following is the Expel Incident with the most CHARACTER EXP.
&lt;h2&gt;&lt;span id=&#34;kagmaw-grassland-f3&#34;&gt; Kagmaw Grassland F3&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;./Exp%20Char/Kagmaw%20Grassland%20F3.png&#34; alt=&#34;Running Wolf Pack&#34;&gt;&lt;br&gt;
&lt;em&gt;Running Wolf Pack&lt;/em&gt;&lt;br&gt;
&lt;img src=&#34;./Exp%20Char/../Exp%20Char/Kagmaw%20Grassland%20F3%202.png&#34; alt=&#34;Black Wolf King&#34;&gt;&lt;br&gt;
&lt;em&gt;Black Wolf King&lt;/em&gt;&lt;/p&gt;
&lt;h2&gt;&lt;span id=&#34;kagmaw-grassland-f1&#34;&gt; Kagmaw Grassland F1&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;../../The%20Legend%20Of%20Neverland/Expel%20Incident/Exp%20Char/Kagmaw%20Grassland%20F1.png&#34; alt=&#34;Silk And Satin&#34;&gt;&lt;br&gt;
&lt;em&gt;Silk And Satin&lt;/em&gt;&lt;br&gt;
&lt;img src=&#34;./Exp%20Char/Kagmaw%20Grassland%20F1%202.png&#34; alt=&#34;Rolling Rock&#34;&gt;&lt;br&gt;
&lt;em&gt;Rolling Rock&lt;/em&gt;&lt;/p&gt;
&lt;h2&gt;&lt;span id=&#34;skala-desert-f1&#34;&gt; Skala Desert F1&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;Exp%20Char/Skala%20Desert%20F1.png&#34; alt=&#34;Raiders of the lost arks&#34;&gt;&lt;br&gt;
&lt;em&gt;Raiders of the lost arks&lt;/em&gt;&lt;/p&gt;
&lt;h2&gt;&lt;span id=&#34;skala-desert-f3&#34;&gt; Skala Desert F3&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;https://drive.google.com/uc?export=view&amp;amp;id=1P3LF3l1ViyaXKAZ2-EDQkKctNU63IBR0&#34; alt=&#34;Cherish Food&#34;&gt;&lt;br&gt;
&lt;em&gt;Cherish Food&lt;/em&gt;&lt;/p&gt;
&lt;h2&gt;&lt;span id=&#34;oak-town&#34;&gt; Oak Town&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;Exp%20Char/Oak%20Town%202.png&#34; alt&gt;&lt;br&gt;
&lt;img src=&#34;Exp%20Char/Oak%20Town.png&#34; alt&gt;&lt;/p&gt;
&lt;h2&gt;&lt;span id=&#34;twilight-rainforest-f1&#34;&gt; Twilight Rainforest F1&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;Exp%20Char/Twilight%20Rainforest%201F.png&#34; alt&gt;&lt;br&gt;
&lt;em&gt;Rampant Insect&lt;/em&gt;&lt;br&gt;
&lt;img src=&#34;Exp%20Char/Twilight%20Rainforest%20F1.png&#34; alt&gt;&lt;/p&gt;
&lt;h2&gt;&lt;span id=&#34;twilight-rainforest-f3&#34;&gt; Twilight Rainforest F3&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/12471057/132796579-01ac578a-c4d9-4c3f-8497-216e238ef8c3.png&#34; alt=&#34;Lemuridae Chief&#34;&gt;&lt;br&gt;
&lt;em&gt;Lemuridae Chief&lt;/em&gt;&lt;/p&gt;
&lt;h2&gt;&lt;span id=&#34;gaia-snow-mountain-f1&#34;&gt; Gaia Snow Mountain F1&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/12471057/133004330-3b54aef9-6bcf-4e9d-9dd6-da6b5672afb2.png&#34; alt=&#34;Winter Fashion&#34;&gt;&lt;br&gt;
&lt;em&gt;Winter Fashion&lt;/em&gt;&lt;/p&gt;
&lt;h2&gt;&lt;span id=&#34;gaia-snow-mountain-f2&#34;&gt; Gaia Snow Mountain F2&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;./Exp%20Char/Gaia%20Snow%20Mountain%20F2.png&#34; alt=&#34;Stock up for Halloween&#34;&gt;&lt;br&gt;
&lt;em&gt;Stock up for Halloween - pick up the pumpkin for the merchant&lt;/em&gt;&lt;/p&gt;
&lt;h2&gt;&lt;span id=&#34;gaia-snow-mountain-f3&#34;&gt; Gaia Snow Mountain F3&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/12471057/133228994-3f8d9ba4-b09a-46ee-b46d-5f680f728331.png&#34; alt=&#34;Sparkling&#34;&gt;&lt;br&gt;
&lt;em&gt;Sparkling&lt;/em&gt;&lt;/p&gt;
&lt;h2&gt;&lt;span id=&#34;fog-swamp-f1&#34;&gt; Fog Swamp F1&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;./Exp%20Char/Fog%20Swamp%20F1.png&#34; alt=&#34;Hurry-Curry&#34;&gt;&lt;br&gt;
&lt;em&gt;Hurry-Curry&lt;/em&gt;&lt;br&gt;
&lt;img src=&#34;./Exp%20Char/Fog%20Swamp%20F1%202.png&#34; alt=&#34;Poacher Doomsday&#34;&gt;&lt;br&gt;
&lt;em&gt;Poacher Doomsday&lt;/em&gt;&lt;/p&gt;
&lt;h2&gt;&lt;span id=&#34;fog-swamp-f3&#34;&gt; Fog Swamp F3&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;./Exp%20Char/Fog%20Swamp%20F3.png&#34; alt=&#34;Liar Raid&#34;&gt;&lt;br&gt;
&lt;em&gt;Liar Raid&lt;/em&gt;&lt;br&gt;
&lt;img src=&#34;./Exp%20Char/Fog%20Swamp%20F3%202.png&#34; alt=&#34;Murloc Sushi&#34;&gt;&lt;br&gt;
&lt;em&gt;Murloc Sushi&lt;/em&gt;&lt;/p&gt;
&lt;h2&gt;&lt;span id=&#34;maple-grove-f3&#34;&gt; Maple Grove F3&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/12471057/136435134-713014a9-c3aa-446d-888f-4eab62ef85a9.png&#34; alt=&#34;Organize Fruits&#34;&gt;&lt;br&gt;
&lt;em&gt;Organize and arrange - Organize Fruits&lt;/em&gt;&lt;/p&gt;
&lt;h2&gt;&lt;span id=&#34;morcuri-mines-f1&#34;&gt; Morcuri Mines F1&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/12471057/135747669-08d437bf-eeba-463f-b8cd-64403c3e8d0a.png&#34; alt=&#34;Missing Parts&#34;&gt;&lt;br&gt;
&lt;em&gt;Missing Parts - collect and submit parts&lt;/em&gt;&lt;/p&gt;
&lt;h2&gt;&lt;span id=&#34;morcuri-mines-f2&#34;&gt; Morcuri Mines F2&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/12471057/133885294-5c64c56c-bb09-414f-a479-b300b0c7cb88.png&#34; alt=&#34;Mechanic&#34;&gt;&lt;br&gt;
&lt;em&gt;Mechanic&lt;/em&gt;&lt;/p&gt;
&lt;style&gt;em::before{content: &#34;Gate Name : &#34;;}&lt;/style&gt;
&lt;div id=&#34;hexo-adsense-hidden&#34; style=&#34;display:none&#34;&gt;&lt;div hexo-adsense=&#34;ads-content&#34;&gt;
&lt;ins class=&#34;adsbygoogle&#34; style=&#34;display:block; text-align:center;&#34; data-ad-layout=&#34;in-article&#34; data-ad-format=&#34;fluid&#34; data-ad-client=&#34;ca-pub-1165447249910969&#34; data-ad-slot=&#34;8418182273&#34;&gt;&lt;/ins&gt;
&lt;script&gt;
     
&lt;/script&gt;
&lt;/div&gt;&lt;div hexo-adsense=&#34;ads-content&#34;&gt;
&lt;ins class=&#34;adsbygoogle&#34; style=&#34;display:block; text-align:center;&#34; data-ad-layout=&#34;in-article&#34; data-ad-format=&#34;fluid&#34; data-ad-client=&#34;ca-pub-1165447249910969&#34; data-ad-slot=&#34;7823254087&#34;&gt;&lt;/ins&gt;
&lt;script&gt;
     
&lt;/script&gt;
&lt;/div&gt;&lt;/div&gt;&lt;style&gt;*[hexo-adsense=&#34;ads-content&#34;] {
  display: block;
  background: #fff url(//i.imgur.com/mBbv90p.png) no-repeat top right;
  color: #303030;
  /*min-height: 18px;
  min-width: 81px;*/
  min-width: 250px;
  text-align: center;
  margin-left: auto;
  margin-right: auto;
}
&lt;/style&gt;&lt;script&gt;/**
 * Browser processor
 */

const isBrowser = new Function(&#34;try {return this===window;}catch(e){ return false;}&#34;);

/**
 * @type {import(&#34;../lib/config&#34;)}
 */
const hexoAdsenseConfig = JSON.parse(document.getElementById(&#34;hexo-adsense-config&#34;).textContent);
//console.log(hexoAdsenseConfig);

/**
 * Insert after element
 * @param {HTMLElement} newElement
 * @param {HTMLElement} oldElement
 */
function insertAfter(newElement, oldElement) {
  if (oldElement &amp;&amp; newElement) {
    let parent = oldElement.parentNode;
    if (parent.lastChild == oldElement) {
      parent.appendChild(newElement);
    } else {
      parent.insertBefore(newElement, oldElement.nextSibling);
    }
  } else {
    console.error(&#34;cannot insert element&#34;);
  }
}

/**
 * Replace elements with new
 * @param {HTMLElement} newElement
 * @param {HTMLElement} oldElement
 */
function replaceWith(newElement, oldElement) {
  if (!oldElement.parentNode) {
    console.log(oldElement, &#34;parent null&#34;);
    let d = document.createElement(&#34;div&#34;);
    d.appendChild(oldElement);
  } else {
    //console.log(oldElement.parentNode.tagName);
    oldElement.parentNode.replaceChild(newElement, oldElement);
  }
  /*
  try {
    oldElement.parentNode.replaceChild(newElement, oldElement);
  } catch (e) {}
  */
}

let createElementFromHTML = function (htmlString) {
  if (htmlString instanceof HTMLElement) {
    return htmlString;
  }
  var div = document.createElement(&#34;div&#34;);
  div.innerHTML = htmlString.trim();

  // Change this to div.childNodes to support multiple top-level nodes
  return div.firstChild;
};

function oldMethod() {
  let article = document.getElementsByTagName(&#34;article&#34;);
  let adscont = document.getElementById(&#34;hexo-adsense-ads-content&#34;);
  if (adscont &amp;&amp; adscont.length) {
    if (article &amp;&amp; article.length) {
      let linebreak = article.item(0).getElementsByTagName(&#34;br&#34;);
      if (linebreak.length &gt; 0) {
        return replaceWith(adscont, linebreak.item(0));
      }

      let headings = article.item(0).querySelectorAll(&#34;h2,h3,h4,h5&#34;);
      if (headings &amp;&amp; headings.length &gt; 0) {
        return insertAfter(adscont, headings.item(0));
      }
    }
  }
}

/**
 * random number between min and max
 */
function ranumb(min, max) {
  // min and max included
  return Math.floor(Math.random() * (max - min + 1) + min);
}

function newMethod() {
  const adshide = document.getElementById(&#34;hexo-adsense-hidden&#34;);
  let adscont = adshide.querySelectorAll(&#39;[hexo-adsense=&#34;ads-content&#34;]&#39;);
  const article = document.querySelectorAll(&#34;article&#34;);
  if (article.length &gt; 0 &amp;&amp; adscont.length &gt; 0) {
    /**
     * @type {HTMLElement}
     */
    let ads;
    if (article.length == 1) {
      console.log(&#34;webpage is post&#34;);
      let targetArticle = article.item(0);

      // prioritize hexo-adsense-fill before auto ads on other elements
      const ads_fill = targetArticle.querySelectorAll(&#34;*[hexo-adsense-fill]&#34;);
      if (ads_fill.length &gt; 0) {
        for (let index = 0; index &lt; ads_fill.length; index++) {
          const toFill = ads_fill[index];
          if (typeof adscont[index] !== &#34;undefined&#34;) {
            toFill.appendChild(adscont[index]);
          }
        }
      }

      // the rest of the ads will show automatically after headers elements
      adscont = adshide.querySelectorAll(&#39;[hexo-adsense=&#34;ads-content&#34;]&#39;);
      //console.log(adscont.length, &#34;ads left&#34;);
      if (adscont.length &gt; 0) {
        const headers = targetArticle.querySelectorAll(&#34;h1,h2,h3,h4,h5,h6&#34;);
        if (headers.length &gt; 0) {
          // generate index of headers
          let headers_index = Array.apply(null, { length: headers.length }).map(Number.call, Number);
          //console.log(headers_index);
          for (let index = 0; index &lt; adscont.length; index++) {
            ads = adscont[index];
            const rheaders = shuffleArr2(headers_index);
            // pick a random index
            const rheader = rheaders.next().value;
            if (typeof rheader === &#34;number&#34;) {
              const header = headers.item(rheader);
              insertAfter(createElementFromHTML(ads), header);
            }
          }
        }
      }

      // the rest of the ads will show automatically to linebreak elements
      adscont = adshide.querySelectorAll(&#39;[hexo-adsense=&#34;ads-content&#34;]&#39;);
      if (adscont.length &gt; 0) {
        const linebreaks = targetArticle.querySelectorAll(&#34;br,hr&#34;);
        if (linebreaks.length &gt; 0) {
          // generate index of linebreaks
          let linebreaks_index = Array.apply(null, { length: linebreaks.length }).map(Number.call, Number);
          //console.log(linebreaks_index);
          // randomize linebreaks index
          const rlinebreaks = shuffleArr2(linebreaks_index);
          for (let index = 0; index &lt; adscont.length; index++) {
            ads = adscont[index];
            // pick a random index
            const rlinebreak = rlinebreaks.next().value;
            if (typeof rlinebreak == &#34;number&#34;) {
              const linebreak = linebreaks.item(rlinebreak);
              if ([&#34;blockquote&#34;, &#34;img&#34;, &#34;a&#34;].includes(linebreak.parentNode.tagName.toLowerCase())) {
                index--;
                continue;
              }
              //console.log(linebreak.tagName);
              replaceWith(createElementFromHTML(ads), linebreak);
            }
          }
        }
      }
    } else {
      console.log(&#34;webpage is not post&#34;);
      // generate index of articles
      let articles_index = Array.apply(null, { length: article.length }).map(Number.call, Number);
      // randomize linebreaks index
      const rArticles = shuffleArr2(articles_index);
      for (let index = 0; index &lt; adscont.length; index++) {
        ads = adscont[index];
        // pick a random index
        const rArticle = rArticles.next().value;
        if (typeof rArticle == &#34;number&#34;) {
          //console.log(&#34;adsense display to article index&#34;, rArticle);
          const pickArticle = article.item(rArticle);
          pickArticle.appendChild(createElementFromHTML(ads));
        }
      }
    }

    // summon adsbygoogle.push()
    adsensePush();
  }
}

function eventMethod() {
  document.addEventListener(&#34;DOMContentLoaded&#34;, function () {
    // we look for the jump break
    var _moreElm = document.querySelector(&#34;a[name=more]&#34;);

    // here is your adsense code
    var _adsenseCode = &#34; [replace this with code from the last step] &#34;;

    // This inserts the ad inside of the blog post
    _moreElm.insertAdjacentHTML(&#34;afterend&#34;, &#39;&lt;div class=&#34;adsense-after-break&#34;&gt;&#39; + _adsenseCode + &#34;&lt;/div&gt;&#34;);

    // Initialize the ads here
    (adsbygoogle = window.adsbygoogle || []).push({});
  });
}

/**
 * Shuffle Array
 * @param {any[]} array
 * @see {@link https://stackoverflow.com/a/18806417}
 * @returns
 */
function shuffleArr(array) {
  var i = array.length,
    j = 0,
    temp;

  while (i--) {
    j = Math.floor(Math.random() * (i + 1));

    // swap randomly chosen element with current element
    temp = array[i];
    array[i] = array[j];
    array[j] = temp;
  }

  return array;
}

/**
 * Next generation of non-repeated randomizer
 * @see {@link shuffleArr}
 * @param {any[]} array
 */
function* shuffleArr2(array) {
  var i = array.length;

  while (i--) {
    yield array.splice(Math.floor(Math.random() * (i + 1)), 1)[0];
  }
}

function adsensePush() {
  for (let index = 0; index &lt; document.querySelectorAll(&#39;[hexo-adsense=&#34;ads-content&#34;]&#39;).length; index++) {
    (adsbygoogle = window.adsbygoogle || []).push({
      google_ad_client: hexoAdsenseConfig.pub,
    });
  }
}

if (!isBrowser()) {
  module.exports = {
    replaceWith,
    insertAfter,
  };
} else {
  window.__tcfapi = (command, parameter, callback) =&gt; {
    if (command === &#34;checkConsent&#34;) {
      callback(true);
    }
    if (command === &#34;addEventListener&#34;) {
      callback({ eventStatus: &#34;tcloaded&#34;, gdprApplies: false }, true);
    }
  };

  if (typeof document.addEventListener == &#34;function&#34;) {
    document.addEventListener(&#34;DOMContentLoaded&#34;, newMethod);
  } else if (typeof window.attachEvent == &#34;function&#34;) {
    window.attachEvent(&#34;onload&#34;, newMethod);
  } else {
    window.onload = newMethod;
  }
}
&lt;/script&gt; ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://www.webmanajemen.com/The%20Legend%20Of%20Neverland/Expel%20Incident/Standard%20Rewards.html</guid>
            <title>Standard Rewards Expel Incident</title>
            <link>https://www.webmanajemen.com/The%20Legend%20Of%20Neverland/Expel%20Incident/Standard%20Rewards.html</link>
            <category>Quest</category>
            <pubDate>Mon, 16 Aug 2021 17:00:00 +0000</pubDate>
            <description><![CDATA[ &lt;!-- toc --&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#sophila&#34;&gt;Sophila&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#kagmaw-grassland-f1&#34;&gt;Kagmaw Grassland F1&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#twilight-rainforest-f2&#34;&gt;Twilight Rainforest F2&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#fog-swamp-f1&#34;&gt;Fog Swamp F1&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#skala-desert-f2&#34;&gt;Skala Desert F2&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#skala-desert-f3&#34;&gt;Skala Desert F3&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- tocstop --&gt;
&lt;h2&gt;&lt;span id=&#34;expel-incident-the-legend-of-neverland&#34;&gt;Expel Incident The Legend Of NeverLand&lt;/span&gt;&lt;/h2&gt;
In the game The Legend Of Neverland, every day is given 6 kinds of Expel Incidents. Each incident has a reward variant. There are those who have Exp for more characters, more Exp for fairies and crystals, and standard rewards (balance rewards). The following is the Expel Incident with the STANDARD REWARDS.
&lt;h2&gt;&lt;span id=&#34;sophila&#34;&gt; Sophila&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;Standard%20Rewards/Sophilia.png&#34; alt&gt;&lt;br&gt;
&lt;img src=&#34;https://user-images.githubusercontent.com/12471057/131433396-702bbcc8-1c0b-43d8-a688-caff61d8d8b2.png&#34; alt=&#34;Work Together&#34;&gt;&lt;br&gt;
&lt;em&gt;Work Together&lt;/em&gt;&lt;/p&gt;
&lt;h2&gt;&lt;span id=&#34;kagmaw-grassland-f1&#34;&gt; Kagmaw Grassland F1&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/12471057/131432947-509bdb14-e643-4859-965f-b634ea8f8805.png&#34; alt=&#34;Monkey Tricks&#34;&gt;&lt;br&gt;
&lt;em&gt;Monkey Tricks&lt;/em&gt;&lt;br&gt;
&lt;img src=&#34;https://user-images.githubusercontent.com/12471057/131443088-50778773-7e35-4474-bbc9-14d75b3943d0.png&#34; alt=&#34;Grassland Busy Man&#34;&gt;&lt;br&gt;
&lt;em&gt;Grassland Busy Man&lt;/em&gt;&lt;br&gt;
&lt;img src=&#34;https://user-images.githubusercontent.com/12471057/132125883-1c0ca56c-f32e-4b86-b0d3-d56876384cde.png&#34; alt=&#34;Lawless&#34;&gt;&lt;br&gt;
&lt;em&gt;Lawless&lt;/em&gt;&lt;/p&gt;
&lt;h2&gt;&lt;span id=&#34;twilight-rainforest-f2&#34;&gt; Twilight Rainforest F2&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;./Standard%20Rewards/Twilight%20Rainforest%20F2.png&#34; alt&gt;&lt;br&gt;
&lt;em&gt;Rat Crisis&lt;/em&gt;&lt;/p&gt;
&lt;h2&gt;&lt;span id=&#34;fog-swamp-f1&#34;&gt; Fog Swamp F1&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/12471057/136440610-bf123bea-e18a-4ff8-9de6-b735d2ddb3bf.png&#34; alt=&#34;Gory Plague&#34;&gt;&lt;br&gt;
&lt;em&gt;Gory Plague - Expel Vampiric Bats&lt;/em&gt;&lt;/p&gt;
&lt;h2&gt;&lt;span id=&#34;skala-desert-f2&#34;&gt; Skala Desert F2&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;Standard%20Rewards/Skala%20Desert%20F2.png&#34; alt&gt;&lt;/p&gt;
&lt;h2&gt;&lt;span id=&#34;skala-desert-f3&#34;&gt; Skala Desert F3&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/12471057/131433100-70aa2477-fc05-4e1d-be15-b63ac72b8841.png&#34; alt=&#34;Flaming Heart&#34;&gt;&lt;br&gt;
&lt;em&gt;Flaming Heart&lt;/em&gt;&lt;/p&gt;
&lt;style&gt;em::before{content:&#34;Gate Name : &#34;;}&lt;/style&gt;
&lt;div id=&#34;hexo-adsense-hidden&#34; style=&#34;display:none&#34;&gt;&lt;div hexo-adsense=&#34;ads-content&#34;&gt;
&lt;ins class=&#34;adsbygoogle&#34; style=&#34;display:block; text-align:center;&#34; data-ad-layout=&#34;in-article&#34; data-ad-format=&#34;fluid&#34; data-ad-client=&#34;ca-pub-1165447249910969&#34; data-ad-slot=&#34;8418182273&#34;&gt;&lt;/ins&gt;
&lt;script&gt;
     
&lt;/script&gt;
&lt;/div&gt;&lt;div hexo-adsense=&#34;ads-content&#34;&gt;
&lt;ins class=&#34;adsbygoogle&#34; style=&#34;display:block; text-align:center;&#34; data-ad-layout=&#34;in-article&#34; data-ad-format=&#34;fluid&#34; data-ad-client=&#34;ca-pub-1165447249910969&#34; data-ad-slot=&#34;7823254087&#34;&gt;&lt;/ins&gt;
&lt;script&gt;
     
&lt;/script&gt;
&lt;/div&gt;&lt;/div&gt;&lt;style&gt;*[hexo-adsense=&#34;ads-content&#34;] {
  display: block;
  background: #fff url(//i.imgur.com/mBbv90p.png) no-repeat top right;
  color: #303030;
  /*min-height: 18px;
  min-width: 81px;*/
  min-width: 250px;
  text-align: center;
  margin-left: auto;
  margin-right: auto;
}
&lt;/style&gt;&lt;script&gt;/**
 * Browser processor
 */

const isBrowser = new Function(&#34;try {return this===window;}catch(e){ return false;}&#34;);

/**
 * @type {import(&#34;../lib/config&#34;)}
 */
const hexoAdsenseConfig = JSON.parse(document.getElementById(&#34;hexo-adsense-config&#34;).textContent);
//console.log(hexoAdsenseConfig);

/**
 * Insert after element
 * @param {HTMLElement} newElement
 * @param {HTMLElement} oldElement
 */
function insertAfter(newElement, oldElement) {
  if (oldElement &amp;&amp; newElement) {
    let parent = oldElement.parentNode;
    if (parent.lastChild == oldElement) {
      parent.appendChild(newElement);
    } else {
      parent.insertBefore(newElement, oldElement.nextSibling);
    }
  } else {
    console.error(&#34;cannot insert element&#34;);
  }
}

/**
 * Replace elements with new
 * @param {HTMLElement} newElement
 * @param {HTMLElement} oldElement
 */
function replaceWith(newElement, oldElement) {
  if (!oldElement.parentNode) {
    console.log(oldElement, &#34;parent null&#34;);
    let d = document.createElement(&#34;div&#34;);
    d.appendChild(oldElement);
  } else {
    //console.log(oldElement.parentNode.tagName);
    oldElement.parentNode.replaceChild(newElement, oldElement);
  }
  /*
  try {
    oldElement.parentNode.replaceChild(newElement, oldElement);
  } catch (e) {}
  */
}

let createElementFromHTML = function (htmlString) {
  if (htmlString instanceof HTMLElement) {
    return htmlString;
  }
  var div = document.createElement(&#34;div&#34;);
  div.innerHTML = htmlString.trim();

  // Change this to div.childNodes to support multiple top-level nodes
  return div.firstChild;
};

function oldMethod() {
  let article = document.getElementsByTagName(&#34;article&#34;);
  let adscont = document.getElementById(&#34;hexo-adsense-ads-content&#34;);
  if (adscont &amp;&amp; adscont.length) {
    if (article &amp;&amp; article.length) {
      let linebreak = article.item(0).getElementsByTagName(&#34;br&#34;);
      if (linebreak.length &gt; 0) {
        return replaceWith(adscont, linebreak.item(0));
      }

      let headings = article.item(0).querySelectorAll(&#34;h2,h3,h4,h5&#34;);
      if (headings &amp;&amp; headings.length &gt; 0) {
        return insertAfter(adscont, headings.item(0));
      }
    }
  }
}

/**
 * random number between min and max
 */
function ranumb(min, max) {
  // min and max included
  return Math.floor(Math.random() * (max - min + 1) + min);
}

function newMethod() {
  const adshide = document.getElementById(&#34;hexo-adsense-hidden&#34;);
  let adscont = adshide.querySelectorAll(&#39;[hexo-adsense=&#34;ads-content&#34;]&#39;);
  const article = document.querySelectorAll(&#34;article&#34;);
  if (article.length &gt; 0 &amp;&amp; adscont.length &gt; 0) {
    /**
     * @type {HTMLElement}
     */
    let ads;
    if (article.length == 1) {
      console.log(&#34;webpage is post&#34;);
      let targetArticle = article.item(0);

      // prioritize hexo-adsense-fill before auto ads on other elements
      const ads_fill = targetArticle.querySelectorAll(&#34;*[hexo-adsense-fill]&#34;);
      if (ads_fill.length &gt; 0) {
        for (let index = 0; index &lt; ads_fill.length; index++) {
          const toFill = ads_fill[index];
          if (typeof adscont[index] !== &#34;undefined&#34;) {
            toFill.appendChild(adscont[index]);
          }
        }
      }

      // the rest of the ads will show automatically after headers elements
      adscont = adshide.querySelectorAll(&#39;[hexo-adsense=&#34;ads-content&#34;]&#39;);
      //console.log(adscont.length, &#34;ads left&#34;);
      if (adscont.length &gt; 0) {
        const headers = targetArticle.querySelectorAll(&#34;h1,h2,h3,h4,h5,h6&#34;);
        if (headers.length &gt; 0) {
          // generate index of headers
          let headers_index = Array.apply(null, { length: headers.length }).map(Number.call, Number);
          //console.log(headers_index);
          for (let index = 0; index &lt; adscont.length; index++) {
            ads = adscont[index];
            const rheaders = shuffleArr2(headers_index);
            // pick a random index
            const rheader = rheaders.next().value;
            if (typeof rheader === &#34;number&#34;) {
              const header = headers.item(rheader);
              insertAfter(createElementFromHTML(ads), header);
            }
          }
        }
      }

      // the rest of the ads will show automatically to linebreak elements
      adscont = adshide.querySelectorAll(&#39;[hexo-adsense=&#34;ads-content&#34;]&#39;);
      if (adscont.length &gt; 0) {
        const linebreaks = targetArticle.querySelectorAll(&#34;br,hr&#34;);
        if (linebreaks.length &gt; 0) {
          // generate index of linebreaks
          let linebreaks_index = Array.apply(null, { length: linebreaks.length }).map(Number.call, Number);
          //console.log(linebreaks_index);
          // randomize linebreaks index
          const rlinebreaks = shuffleArr2(linebreaks_index);
          for (let index = 0; index &lt; adscont.length; index++) {
            ads = adscont[index];
            // pick a random index
            const rlinebreak = rlinebreaks.next().value;
            if (typeof rlinebreak == &#34;number&#34;) {
              const linebreak = linebreaks.item(rlinebreak);
              if ([&#34;blockquote&#34;, &#34;img&#34;, &#34;a&#34;].includes(linebreak.parentNode.tagName.toLowerCase())) {
                index--;
                continue;
              }
              //console.log(linebreak.tagName);
              replaceWith(createElementFromHTML(ads), linebreak);
            }
          }
        }
      }
    } else {
      console.log(&#34;webpage is not post&#34;);
      // generate index of articles
      let articles_index = Array.apply(null, { length: article.length }).map(Number.call, Number);
      // randomize linebreaks index
      const rArticles = shuffleArr2(articles_index);
      for (let index = 0; index &lt; adscont.length; index++) {
        ads = adscont[index];
        // pick a random index
        const rArticle = rArticles.next().value;
        if (typeof rArticle == &#34;number&#34;) {
          //console.log(&#34;adsense display to article index&#34;, rArticle);
          const pickArticle = article.item(rArticle);
          pickArticle.appendChild(createElementFromHTML(ads));
        }
      }
    }

    // summon adsbygoogle.push()
    adsensePush();
  }
}

function eventMethod() {
  document.addEventListener(&#34;DOMContentLoaded&#34;, function () {
    // we look for the jump break
    var _moreElm = document.querySelector(&#34;a[name=more]&#34;);

    // here is your adsense code
    var _adsenseCode = &#34; [replace this with code from the last step] &#34;;

    // This inserts the ad inside of the blog post
    _moreElm.insertAdjacentHTML(&#34;afterend&#34;, &#39;&lt;div class=&#34;adsense-after-break&#34;&gt;&#39; + _adsenseCode + &#34;&lt;/div&gt;&#34;);

    // Initialize the ads here
    (adsbygoogle = window.adsbygoogle || []).push({});
  });
}

/**
 * Shuffle Array
 * @param {any[]} array
 * @see {@link https://stackoverflow.com/a/18806417}
 * @returns
 */
function shuffleArr(array) {
  var i = array.length,
    j = 0,
    temp;

  while (i--) {
    j = Math.floor(Math.random() * (i + 1));

    // swap randomly chosen element with current element
    temp = array[i];
    array[i] = array[j];
    array[j] = temp;
  }

  return array;
}

/**
 * Next generation of non-repeated randomizer
 * @see {@link shuffleArr}
 * @param {any[]} array
 */
function* shuffleArr2(array) {
  var i = array.length;

  while (i--) {
    yield array.splice(Math.floor(Math.random() * (i + 1)), 1)[0];
  }
}

function adsensePush() {
  for (let index = 0; index &lt; document.querySelectorAll(&#39;[hexo-adsense=&#34;ads-content&#34;]&#39;).length; index++) {
    (adsbygoogle = window.adsbygoogle || []).push({
      google_ad_client: hexoAdsenseConfig.pub,
    });
  }
}

if (!isBrowser()) {
  module.exports = {
    replaceWith,
    insertAfter,
  };
} else {
  window.__tcfapi = (command, parameter, callback) =&gt; {
    if (command === &#34;checkConsent&#34;) {
      callback(true);
    }
    if (command === &#34;addEventListener&#34;) {
      callback({ eventStatus: &#34;tcloaded&#34;, gdprApplies: false }, true);
    }
  };

  if (typeof document.addEventListener == &#34;function&#34;) {
    document.addEventListener(&#34;DOMContentLoaded&#34;, newMethod);
  } else if (typeof window.attachEvent == &#34;function&#34;) {
    window.attachEvent(&#34;onload&#34;, newMethod);
  } else {
    window.onload = newMethod;
  }
}
&lt;/script&gt; ]]></description>
        </item>
    </channel>
</rss>
