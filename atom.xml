<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>WMI</title>
  <icon>https://www.webmanajemen.com/logo.png</icon>
  <subtitle>Website Management Indonesia</subtitle>
  <link href="https://www.webmanajemen.com/atom.xml" rel="self"/>
  
  <link href="https://www.webmanajemen.com/"/>
  <updated>2024-02-03T12:07:22.000Z</updated>
  <id>https://www.webmanajemen.com/</id>
  
  <author>
    <name>Dimas Lanjaka</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Exported variable has or is using name from external module</title>
    <link href="https://www.webmanajemen.com/2024/02/typescript-error-private-name.html"/>
    <id>https://www.webmanajemen.com/2024/02/typescript-error-private-name.html</id>
    <published>2024-02-03T12:04:52.000Z</published>
    <updated>2024-02-03T12:07:22.000Z</updated>
    
    <content type="html"><![CDATA[<p>In TypeScript, when you have an exported variable that uses a private type from an external module, you may run into issues because private types are not accessible outside of their module.</p><p>answers for exported variable that uses a private type from an external module:</p><ul><li><a href="https://stackoverflow.com/questions/61456979/solve-react-typescript-error-export-variable-is-using-name-from-external-modul/77933352#77933352">Exported variable ‘yourVariable’ has or is using name ‘TypeName’ from external module “module/path” but cannot be named. ts(4023)</a></li><li><a href="https://stackoverflow.com/questions/43900035/ts4023-exported-variable-x-has-or-is-using-name-y-from-external-module-but">TS4023: Exported Variable <x> has or is using name <y> from external module but cannot be named</a></li><li><a href="https://stackoverflow.com/questions/62538330/exported-variable-x-has-or-is-using-name-y-from-external-module-z-but-cannot-be">Exported variable X has or is using name Y from external module Z but cannot be named</a></li><li><a href="https://www.google.com/search?q=Exported+variable+%27projectConfig%27+has+or+is+using+name+%27Config%27+from+external+module+site:stackoverflow.com&amp;client=firefox-b-d&amp;sca_esv=5c40852b81bce253&amp;sxsrf=ACQVn0_cbfoN2nZaFBculzZNSiBrQy0xKw:1706986272038&amp;sa=X&amp;ved=2ahUKEwig_oWz64-EAxXH4jgGHU4tD10QrQIoBHoECBMQBQ&amp;biw=1366&amp;bih=615&amp;dpr=1">Exported variable ‘projectConfig’ has or is using name ‘Config’ from external module site:stackoverflow.com</a></li></ul><p>To fix exported variable using private type from external module, you can consider a few approaches:</p><h2 id="Fix-steps">Fix steps</h2><p>just declare the type, for example:</p><p>in external lib has code like below:</p><pre><code class="hljs ts"><span class="hljs-keyword">interface</span> privateProperty &#123;  <span class="hljs-attr">name</span>: <span class="hljs-built_in">string</span>;&#125;<span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> config = &#123;  <span class="hljs-attr">propName</span>: &#123;&#125; <span class="hljs-keyword">as</span> privateProperty&#125;</code></pre><p>in your code</p><pre><code class="hljs ts"><span class="hljs-comment">// this config[&#x27;propName&#x27;] contains non-exported type/interface</span><span class="hljs-keyword">import</span> &#123; config &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;external-lib&#x27;</span>;<span class="hljs-comment">// declare new type from private property</span><span class="hljs-keyword">type</span> Y = config[<span class="hljs-string">&#x27;propName&#x27;</span>]; <span class="hljs-comment">// or typeof config[&#x27;propName&#x27;]</span><span class="hljs-comment">// declare new type that extends Y</span><span class="hljs-keyword">export</span> <span class="hljs-keyword">interface</span> X <span class="hljs-keyword">extends</span> Y &#123;&#125;<span class="hljs-comment">// apply interface X which contains Private Type Name</span><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> yourVariable = &#123;&#125; <span class="hljs-keyword">as</span> X;</code></pre><h2 id="Conclusion">Conclusion</h2><p>done. now the problem fixed</p><p>result</p><p>before<br><a href="https://i.stack.imgur.com/6zwQS.png"><img src="https://i.stack.imgur.com/6zwQS.png" alt=""></a></p><p>after<br><a href="https://i.stack.imgur.com/uVeAs.png"><img src="https://i.stack.imgur.com/uVeAs.png" alt=""></a></p>]]></content>
    
    
    <summary type="html">How to fix exported variable using private type from external module</summary>
    
    
    
    <category term="programming" scheme="https://www.webmanajemen.com/categories/programming/"/>
    
    
    <category term="typescript" scheme="https://www.webmanajemen.com/tags/typescript/"/>
    
  </entry>
  
  <entry>
    <title>Enable CORS globally in spring boot</title>
    <link href="https://www.webmanajemen.com/2024/02/spring-boot-enable-cors-globally.html"/>
    <id>https://www.webmanajemen.com/2024/02/spring-boot-enable-cors-globally.html</id>
    <published>2024-02-02T22:29:15.000Z</published>
    <updated>2024-02-02T22:48:58.000Z</updated>
    
    <content type="html"><![CDATA[<p>To enable Cross-Origin Resource Sharing (CORS) globally in a Spring Boot application with Spring Security,<br>you can configure CORS in your security configuration class.<br>Here’s an example of codes how you can do this:</p><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.List;<span class="hljs-keyword">import</span> javax.sql.DataSource;<span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<span class="hljs-keyword">import</span> org.springframework.context.annotation.Bean;<span class="hljs-keyword">import</span> org.springframework.context.annotation.Configuration;<span class="hljs-keyword">import</span> org.springframework.security.authentication.AuthenticationManager;<span class="hljs-keyword">import</span> org.springframework.security.config.Customizer;<span class="hljs-keyword">import</span> org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;<span class="hljs-keyword">import</span> org.springframework.security.config.annotation.web.builders.HttpSecurity;<span class="hljs-keyword">import</span> org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;<span class="hljs-keyword">import</span> org.springframework.security.config.annotation.web.configurers.AbstractHttpConfigurer;<span class="hljs-keyword">import</span> org.springframework.security.core.userdetails.UserDetailsService;<span class="hljs-keyword">import</span> org.springframework.security.web.SecurityFilterChain;<span class="hljs-keyword">import</span> org.springframework.security.web.util.matcher.AntPathRequestMatcher;<span class="hljs-keyword">import</span> org.springframework.web.cors.CorsConfiguration;<span class="hljs-keyword">import</span> org.springframework.web.cors.CorsConfigurationSource;<span class="hljs-keyword">import</span> org.springframework.web.cors.UrlBasedCorsConfigurationSource;<span class="hljs-meta">@Configuration</span><span class="hljs-meta">@EnableWebSecurity</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SecurityConfig</span> &#123;    <span class="hljs-meta">@Bean</span>    <span class="hljs-keyword">public</span> SecurityFilterChain <span class="hljs-title function_">filterChain</span><span class="hljs-params">(HttpSecurity http)</span> <span class="hljs-keyword">throws</span> Exception &#123;        <span class="hljs-comment">// disable CSRF (optional)</span>        http.csrf(AbstractHttpConfigurer::disable);        <span class="hljs-comment">// enable CORS globally</span>        <span class="hljs-comment">// by default uses a Bean by the name of corsConfigurationSource</span>        http.cors(Customizer.withDefaults());        <span class="hljs-comment">// your others http configuration here</span>        <span class="hljs-comment">// build the http configurations</span>        <span class="hljs-keyword">return</span> http.build();    &#125;    <span class="hljs-meta">@Bean</span>    CorsConfigurationSource <span class="hljs-title function_">corsConfigurationSource</span><span class="hljs-params">()</span> &#123;        <span class="hljs-type">CorsConfiguration</span> <span class="hljs-variable">configuration</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CorsConfiguration</span>();        configuration.setAllowedHeaders(List.of(<span class="hljs-string">&quot;*&quot;</span>));        configuration.setAllowedOrigins(List.of(<span class="hljs-string">&quot;*&quot;</span>));        configuration.setAllowedMethods(List.of(<span class="hljs-string">&quot;*&quot;</span>));        <span class="hljs-type">UrlBasedCorsConfigurationSource</span> <span class="hljs-variable">source</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UrlBasedCorsConfigurationSource</span>();        source.registerCorsConfiguration(<span class="hljs-string">&quot;/**&quot;</span>, configuration);        <span class="hljs-keyword">return</span> source;    &#125;&#125;</code></pre><p><a href="https://stackoverflow.com/a/76319932/6404439">reference</a></p><p><strong>Description of <code>CorsConfiguration</code> methods</strong></p><ul><li><p><strong>setAllowedHeaders</strong>-&gt; you have to specify which parameters are allowed to be sent to the backend services through the front-end app, for example, if you are using Bearer/Basic Token Authorization methods, you need to pass your JWT-Token through the “Authorization” header. So you need to make sure that backed would accept this data accordingly and for this purpose, you must put “Authorization” in the list of Allowed-Headers.</p></li><li><p><strong>setAllowedMethods</strong>-&gt; Do not forget to put “OPTIONS” method in the list for Pre-flight process. Don’t worry, <a href="https://developer.mozilla.org/en-US/docs/Glossary/Preflight_request">read more here!</a></p></li><li><p><strong>setAllowCredentials</strong>-&gt; If you are using Authorization header, set it True.</p></li><li><p><strong>setExposedHeaders</strong>-&gt; If you are returning data through Response Headers, you need to specify them here. for example, some APIs are designed to return Authorization token after success /authentication through Response Headers. Thus, the related header needs to be exposed accordingly.</p></li><li><p><strong>setAllowedOrigins</strong>-&gt; You must specify the domains that are eligible to send requests to your backend applications. for example, if your application is hosted on <a href="https://penguin.com">https://penguin.com</a> and your APIs are on <a href="https://api.penguin.com">https://api.penguin.com</a>, you need to allow “<a href="https://penguing.com">https://penguing.com</a>” to send requests to your backend. Also, you are able to pass wildcard (*) to allow any domains to send requests to your backend. But it’s recommended to not use “any” unless you are providing public APIs or you are deploying in the non-production environments.</p></li></ul><h2 id="Customize">Customize</h2><p>You can customize header allowed like <code>Authorization</code>, request methods, etc. Below is example of codes:</p><pre><code class="hljs java"><span class="hljs-type">CorsConfiguration</span> <span class="hljs-variable">corsConfiguration</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CorsConfiguration</span>();<span class="hljs-comment">// allow cors when these headers sent</span>corsConfiguration.setAllowedHeaders(List.of(<span class="hljs-string">&quot;Authorization&quot;</span>, <span class="hljs-string">&quot;Cache-Control&quot;</span>, <span class="hljs-string">&quot;Content-Type&quot;</span>));<span class="hljs-comment">// allow for all hostname of CORS came from,</span><span class="hljs-comment">// or you can specify hostnames List.of(&quot;example.com&quot;, &quot;sub.example.com&quot;)</span>corsConfiguration.setAllowedOrigins(List.of(<span class="hljs-string">&quot;*&quot;</span>));<span class="hljs-comment">// allow only these request method</span>corsConfiguration.setAllowedMethods(List.of(<span class="hljs-string">&quot;GET&quot;</span>, <span class="hljs-string">&quot;POST&quot;</span>, <span class="hljs-string">&quot;PUT&quot;</span>, <span class="hljs-string">&quot;DELETE&quot;</span>, <span class="hljs-string">&quot;PUT&quot;</span>,<span class="hljs-string">&quot;OPTIONS&quot;</span>,<span class="hljs-string">&quot;PATCH&quot;</span>, <span class="hljs-string">&quot;DELETE&quot;</span>));<span class="hljs-comment">// allow credentials</span>corsConfiguration.setAllowCredentials(<span class="hljs-literal">true</span>);<span class="hljs-comment">// expose Authorization header</span>corsConfiguration.setExposedHeaders(List.of(<span class="hljs-string">&quot;Authorization&quot;</span>));</code></pre><p><a href="https://stackoverflow.com/a/66590699/6404439">reference</a></p><h2 id="Conclusion">Conclusion</h2><p>Now you need to customize the CORS configuration based on your need. Adjust the configuration according to your specific needs. Ensure that your Spring Boot application has the necessary dependencies, such as spring-boot-starter-security and spring-boot-starter-web.</p><p><img src="https://github.com/dimaslanjaka/source-posts/assets/12471057/c5f5e304-9e64-4cc0-b763-8df4020fc83d" alt=""></p>]]></content>
    
    
    <summary type="html">How spring boot enable CORS globally</summary>
    
    
    
    <category term="programming" scheme="https://www.webmanajemen.com/categories/programming/"/>
    
    
    <category term="java" scheme="https://www.webmanajemen.com/tags/java/"/>
    
    <category term="kotlin" scheme="https://www.webmanajemen.com/tags/kotlin/"/>
    
  </entry>
  
  <entry>
    <title>How to render single post hexo</title>
    <link href="https://www.webmanajemen.com/2024/01/hexo-render-single-post.html"/>
    <id>https://www.webmanajemen.com/2024/01/hexo-render-single-post.html</id>
    <published>2024-01-29T11:40:36.000Z</published>
    <updated>2024-01-29T11:49:59.000Z</updated>
    
    <content type="html"><![CDATA[<p>According <a href="https://github.com/orgs/hexojs/discussions/5203#discussioncomment-5946132">my discussion on github</a> I solved how to render single post markdown using HexoJS.</p><h2 id="Render-existing-loaded-post">Render existing loaded post</h2><p>Basically render a single post you need load database, like below:</p><pre><code class="hljs js"><span class="hljs-keyword">const</span> hexo = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;hexo&#x27;</span>)();<span class="hljs-comment">// Replace &#x27;my-first-post&#x27; with the actual filename of your post (without the file extension).</span><span class="hljs-keyword">const</span> postToRender = <span class="hljs-string">&#x27;my-first-post&#x27;</span>;<span class="hljs-comment">// Initialize Hexo</span>hexo.<span class="hljs-title function_">init</span>().<span class="hljs-title function_">then</span>(<span class="hljs-function">() =&gt;</span> &#123;  <span class="hljs-comment">// Load the Hexo database</span>  <span class="hljs-keyword">return</span> hexo.<span class="hljs-title function_">load</span>();&#125;).<span class="hljs-title function_">then</span>(<span class="hljs-function">() =&gt;</span> &#123;  <span class="hljs-comment">// Find the specified post</span>  <span class="hljs-keyword">const</span> post = hexo.<span class="hljs-property">locals</span>.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;posts&#x27;</span>).<span class="hljs-title function_">filter</span>(<span class="hljs-function"><span class="hljs-params">post</span> =&gt;</span> post.<span class="hljs-property">slug</span> === postToRender)[<span class="hljs-number">0</span>];  <span class="hljs-keyword">if</span> (post) &#123;    <span class="hljs-comment">// Render the post</span>    <span class="hljs-keyword">return</span> post.<span class="hljs-title function_">render</span>().<span class="hljs-title function_">then</span>(<span class="hljs-function">() =&gt;</span> &#123;      <span class="hljs-comment">// Access the rendered HTML content</span>      <span class="hljs-keyword">const</span> renderedContent = post.<span class="hljs-property">content</span>;      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(renderedContent);    &#125;);  &#125; <span class="hljs-keyword">else</span> &#123;    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">error</span>(<span class="hljs-string">`Post &#x27;<span class="hljs-subst">$&#123;postToRender&#125;</span>&#x27; not found.`</span>);  &#125;&#125;).<span class="hljs-title function_">catch</span>(<span class="hljs-function"><span class="hljs-params">err</span> =&gt;</span> &#123;  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">error</span>(err);&#125;).<span class="hljs-title function_">finally</span>(<span class="hljs-function">() =&gt;</span> &#123;  <span class="hljs-comment">// Stop Hexo gracefully</span>  <span class="hljs-keyword">return</span> hexo.<span class="hljs-title function_">exit</span>();&#125;);</code></pre><h2 id="Render-single-post-using-markdown-file-location-path">Render single post using markdown file location path</h2><p>You also can render any frontmatter markdown files in specific location by initialize -&gt; load plugins -&gt; render post. See below snippets:</p><pre><code class="hljs js"><span class="hljs-keyword">import</span> <span class="hljs-title class_">Hexo</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;hexo&#x27;</span>;<span class="hljs-keyword">import</span> path <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;path&#x27;</span>;<span class="hljs-keyword">const</span> hexo = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Hexo</span>(__dirname);<span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">main</span>(<span class="hljs-params"></span>) &#123;  <span class="hljs-comment">// intialie and load external plugins</span>  <span class="hljs-keyword">await</span> hexo.<span class="hljs-title function_">init</span>().<span class="hljs-title function_">then</span>(<span class="hljs-function">() =&gt;</span> hexo.<span class="hljs-title function_">loadPlugin</span>(<span class="hljs-built_in">require</span>.<span class="hljs-title function_">resolve</span>(<span class="hljs-string">&#x27;hexo-shortcodes&#x27;</span>)));  <span class="hljs-comment">// load hexo</span>  <span class="hljs-keyword">await</span> hexo.<span class="hljs-title function_">load</span>(<span class="hljs-keyword">async</span> () =&gt; &#123;    <span class="hljs-comment">// render single post</span>    <span class="hljs-keyword">const</span> post = <span class="hljs-keyword">await</span> hexo.<span class="hljs-property">post</span>.<span class="hljs-title function_">render</span>(path.<span class="hljs-title function_">join</span>(__dirname, <span class="hljs-string">&#x27;source/lang/php.md&#x27;</span>));    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(post);  &#125;);&#125;<span class="hljs-title function_">main</span>();</code></pre><p>This script initializes Hexo, loads the Hexo database, finds the specified post, renders the post, and then outputs the rendered HTML content.<br>And test result below<br><img src="https://github.com/hexojs/hexo/assets/12471057/b4edd0a3-79d7-4aed-b1fe-daa7e54e99ab" alt=""></p><h2 id="Conclusion">Conclusion</h2><p>And all the shortcodes work fine and according to what I want, just need the post body (post.content) to validate shortcode result using JSDOM or cheerio</p>]]></content>
    
    
    <summary type="html">example javascript codes to render single markdown post with HexoJS</summary>
    
    
    
    <category term="programming" scheme="https://www.webmanajemen.com/categories/programming/"/>
    
    
    <category term="javascript" scheme="https://www.webmanajemen.com/tags/javascript/"/>
    
    <category term="typescript" scheme="https://www.webmanajemen.com/tags/typescript/"/>
    
    <category term="hexo" scheme="https://www.webmanajemen.com/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>spring boot with eclipse gradle plugin</title>
    <link href="https://www.webmanajemen.com/2024/01/eclipse-gradle-plugin-sync-build-with-spring-boot.html"/>
    <id>https://www.webmanajemen.com/2024/01/eclipse-gradle-plugin-sync-build-with-spring-boot.html</id>
    <published>2024-01-25T20:38:40.000Z</published>
    <updated>2024-01-26T06:57:25.000Z</updated>
    
    <content type="html"><![CDATA[<p>Spring Boot DevTools provides a set of tools that can help improve the development experience. One of the features is automatic class reloading, which can be particularly useful during development. Eclipse, on the other hand, has its own set of tools for Java development. To sync compiled classes from the Eclipse Gradle plugin with Spring Boot DevTools, you can follow these general steps:</p><h2 id="Ensure-Spring-Boot-DevTools-is-Configured">Ensure Spring Boot DevTools is Configured</h2><ul><li>Make sure that the <code>spring-boot-devtools</code> dependency is included in your Spring Boot project. Add the following dependency to your <code>build.gradle</code> file:</li></ul><pre><code class="hljs gradle"><span class="hljs-keyword">dependencies</span> &#123;    implementation <span class="hljs-string">&#x27;org.springframework.boot:spring-boot-devtools&#x27;</span>&#125;</code></pre><h2 id="Configure-gradle">Configure gradle</h2><h3 id="Configure-eclipse-gradle-plugin">Configure <code>eclipse</code> gradle plugin</h3><pre><code class="hljs gradle">eclipse &#123;    <span class="hljs-keyword">classpath</span> &#123;        defaultOutputDir = <span class="hljs-keyword">file</span>(<span class="hljs-string">&#x27;build/eclipse&#x27;</span>)        baseSourceOutputDir = <span class="hljs-keyword">file</span>(<span class="hljs-string">&#x27;build/classes/java&#x27;</span>)        <span class="hljs-keyword">file</span>.whenMerged &#123;            entries.<span class="hljs-keyword">each</span> &#123; entry -&gt;                <span class="hljs-keyword">if</span> (entry.kind == <span class="hljs-string">&#x27;src&#x27;</span> &amp;&amp; entry.hasProperty(<span class="hljs-string">&#x27;output&#x27;</span>)) &#123;                    <span class="hljs-keyword">if</span> (entry.output != <span class="hljs-keyword">null</span>) entry.output = entry.output.replace(<span class="hljs-string">&#x27;bin/&#x27;</span>, <span class="hljs-string">&quot;build/&quot;</span>)                &#125;            &#125;        &#125;    &#125;&#125;</code></pre><h3 id="Configure-JavaCompile-tasks">Configure <code>JavaCompile</code> tasks</h3><p>According <a href="https://github.com/spring-projects/spring-framework/wiki/Upgrading-to-Spring-Framework-6.x#parameter-name-retention">Upgrading to Spring Framework 6.x</a> we need apply <code>-parameters</code> jvm arguments into compiler to make it works.</p><p><strong>Issues about this config</strong></p><ul><li><a href="https://github.com/spring-projects/spring-boot/issues/38723">Error &quot;Name for argument of type [java.util.UUID] not specified, and parameter name information not found in class file either&quot;with spring-boot 3.2.0 upgrade</a></li></ul><h4 id="Groovy-DSL">Groovy DSL</h4><pre><code class="hljs gradle">tasks.withType(JavaCompile).configureEach &#123;    <span class="hljs-keyword">options</span>.compilerArgs.add(<span class="hljs-string">&quot;-parameters&quot;</span>)&#125;</code></pre><h4 id="Kotlin-DSL">Kotlin DSL</h4><pre><code class="hljs gradle">tasks.withType&lt;JavaCompile&gt;() &#123;    <span class="hljs-keyword">options</span>.compilerArgs.add(<span class="hljs-string">&quot;-parameters&quot;</span>)&#125;</code></pre><h3 id="Configure-jar-and-bootJar-tasks">Configure <code>jar</code> and <code>bootJar</code> tasks</h3><p>In Gradle, if you want to create a JAR file and exclude duplicate files, you can use the DuplicatesStrategy.EXCLUDE strategy. This strategy excludes duplicates from the final JAR by keeping only the first occurrence of each duplicate file.</p><pre><code class="hljs plaintext">// Optional: Specify the main class if your JAR is executableapplication &#123;    mainClassName = &#x27;web.MainApplication&#x27;&#125;// Configure the JAR taskjar &#123;    duplicatesStrategy = DuplicatesStrategy.EXCLUDE    manifest &#123;        attributes &quot;Start-Class&quot;: &quot;web.MainApplication&quot;    &#125;&#125;// Configure the spring JAR taskbootJar &#123;    duplicatesStrategy = DuplicatesStrategy.EXCLUDE    manifest &#123;        attributes &quot;Start-Class&quot;: &quot;web.MainApplication&quot;    &#125;&#125;</code></pre><blockquote><p>Replace ‘web.MainApplication’ with the actual main class of your application.</p><p>Note: The <code>application</code> block is optional and is only necessary if your JAR is executable, and you want to specify the main class. If your JAR is not executable, you can omit the <code>application</code> block.</p></blockquote><h2 id="Initialize-configuration-for-Eclipse">Initialize configuration for Eclipse</h2><p>When working with Gradle in Eclipse, you can use the <code>eclipse</code> plugin to generate Eclipse-specific configuration files. These files help to set up your Eclipse project based on the dependencies and structure defined in your Gradle build script. To initialize the Eclipse configuration for your Gradle project, follow these step:</p><pre><code class="hljs bash">gradlew eclipse --no-daemon</code></pre><blockquote><p><code>--no-daemon</code> parameter will kill the java when app exit (CTRL+C or Close terminal)</p></blockquote><h2 id="Configure-Eclipse-for-Automatic-Building">Configure Eclipse for Automatic Building</h2><ul><li><p>In Eclipse, go to <code>Project</code> &gt; <code>Build Automatically</code> to ensure that automatic building is enabled.-   <strong>Configure Gradle Build in Eclipse:</strong></p></li><li><p>Ensure that your Eclipse project is properly configured to use the Gradle build system. You can do this by right-clicking on your project in the Eclipse Project Explorer, selecting <code>Properties</code>, and then navigating to <code>Project Facets</code>. Make sure that the <code>Gradle</code> facet is selected.-   <strong>Enable Automatic Project Refresh in Eclipse:</strong></p></li><li><p>Go to <code>Window</code> &gt; <code>Preferences</code> &gt; <code>General</code> &gt; <code>Workspace</code>.</p></li><li><p>Enable the option “Refresh using native hooks or polling”.</p></li><li><p>Enable the option “Refresh on access”.-   <strong>Configure Spring Boot DevTools in <code>application.properties</code>:</strong></p></li><li><p>In your <code>src/main/resources/application.properties</code> (or <code>application.yml</code>) file, ensure that DevTools is configured to enable class reloading:</p></li></ul><pre><code class="hljs properties"><span class="hljs-attr">spring.devtools.restart.enabled</span>=<span class="hljs-string">true</span></code></pre><h2 id="Run-the-Application-with-DevTools">Run the Application with DevTools</h2><ul><li>Run your Spring Boot application from Eclipse with the Gradle plugin.</li><li>Spring Boot DevTools should detect changes in your class files and automatically trigger a restart.</li></ul><pre><code class="hljs bash">gradlew bootrun --no-daemon</code></pre><blockquote><p><code>--no-daemon</code> parameter will kill the java when app exit (CTRL+C or Close terminal)</p></blockquote><h2 id="Conclusion">Conclusion</h2><p>Now spring boot livereload working even you changes the <code>java</code>, <code>kotlin</code>, <code>groovy</code> or <code>resources</code> files.</p><p>Keep in mind that the effectiveness of DevTools may depend on various factors, and not all changes can be hot-reloaded. Certain types of changes, such as those to method signatures or certain structural changes, may still require a manual restart.</p><p>By following these steps, you should be able to synchronize the compiled classes from the Eclipse Gradle plugin with Spring Boot DevTools during development. If you encounter any issues, consider checking the Spring Boot DevTools documentation and the Eclipse documentation for further troubleshooting.</p>]]></content>
    
    
    <summary type="html">sync compiled classes from eclipse gradle plugin with spring boot devtools</summary>
    
    
    
    <category term="programming" scheme="https://www.webmanajemen.com/categories/programming/"/>
    
    
    <category term="java" scheme="https://www.webmanajemen.com/tags/java/"/>
    
    <category term="gradle" scheme="https://www.webmanajemen.com/tags/gradle/"/>
    
    <category term="kotlin" scheme="https://www.webmanajemen.com/tags/kotlin/"/>
    
    <category term="groovy" scheme="https://www.webmanajemen.com/tags/groovy/"/>
    
  </entry>
  
  <entry>
    <title>auto configure classpath config using eclipse gradle plugin</title>
    <link href="https://www.webmanajemen.com/2024/01/auto-configure-classpath-config-using-eclipse-gradle-plugin.html"/>
    <id>https://www.webmanajemen.com/2024/01/auto-configure-classpath-config-using-eclipse-gradle-plugin.html</id>
    <published>2024-01-25T16:59:16.000Z</published>
    <updated>2024-01-25T19:02:22.000Z</updated>
    
    <content type="html"><![CDATA[<p>according <a href="https://github.com/redhat-developer/vscode-java/issues/1615">this issue</a> about automatically configuring classpath and build settings for an Eclipse project that uses the Gradle build tool. Configuring classpath and build settings in Eclipse for a Gradle project involves a few steps. Here is a framework for auto-configuring the classpath using the Eclipse Gradle plugin:</p><h2 id="Install-Eclipse-Gradle-Plugin">Install Eclipse Gradle Plugin</h2><p>activate <code>eclipse</code> plugin each gradle subprojects</p><h3 id="Using-plugins-block">Using plugins block</h3><pre><code class="hljs gradle">plugins &#123;  id <span class="hljs-string">&quot;eclipse&quot;</span>&#125;</code></pre><h2 id="Using-native-classpath">Using native classpath</h2><pre><code class="hljs gradle">apply plugin: <span class="hljs-string">&#x27;eclipse&#x27;</span></code></pre><h2 id="Configure-eclipse-classpath-generation">Configure eclipse .classpath generation</h2><p>Configure eclipse .classpath generation using <code>eclipse</code> block</p><h3 id="Groovy">Groovy</h3><pre><code class="hljs gradle">eclipse &#123;  <span class="hljs-keyword">classpath</span> &#123;    defaultOutputDir = <span class="hljs-keyword">file</span>(<span class="hljs-string">&#x27;build/eclipse&#x27;</span>)    <span class="hljs-keyword">file</span>.whenMerged &#123;      entries.<span class="hljs-keyword">each</span> &#123; entry -&gt;        <span class="hljs-keyword">if</span> (entry.kind == <span class="hljs-string">&#x27;src&#x27;</span> &amp;&amp; entry.hasProperty(<span class="hljs-string">&#x27;output&#x27;</span>)) &#123;          entry.output = entry.output.replace(<span class="hljs-string">&#x27;bin/&#x27;</span>, <span class="hljs-string">&quot;build/eclipse/&quot;</span>)        &#125;      &#125;    &#125;  &#125;&#125;</code></pre><h3 id="Kotlin-DSL">Kotlin DSL</h3><pre><code class="hljs kotlin"><span class="hljs-keyword">import</span> org.gradle.plugins.ide.eclipse.model.Classpath<span class="hljs-keyword">import</span> org.gradle.plugins.ide.eclipse.model.SourceFolderplugins &#123;    java    eclipse&#125;buildDir = file(<span class="hljs-string">&quot;build/gradle&quot;</span>)eclipse &#123;    classpath &#123;        defaultOutputDir = file(<span class="hljs-string">&quot;build/eclipse&quot;</span>)        file &#123;            whenMerged(                    Action&lt;Classpath&gt; &#123; -&gt;                        entries.filter &#123; it.kind == <span class="hljs-string">&quot;src&quot;</span> &#125;.forEach &#123;                            <span class="hljs-keyword">if</span> (it <span class="hljs-keyword">is</span> SourceFolder) &#123;                                it.output = it.output.replace(<span class="hljs-string">&quot;bin/&quot;</span>, <span class="hljs-string">&quot;build/eclipse/&quot;</span>)                            &#125;                        &#125;                    &#125;            )        &#125;    &#125;&#125;</code></pre><h3 id="Sync-with-gradle-build-output-classes-and-resources">Sync with gradle build output classes and resources</h3><p>You also can sync between eclipse output and gradle output classes and resources with below gradle config:</p><pre><code class="hljs gradle">eclipse &#123;    <span class="hljs-keyword">classpath</span> &#123;        defaultOutputDir = <span class="hljs-keyword">file</span>(<span class="hljs-string">&#x27;build&#x27;</span>)        baseSourceOutputDir = <span class="hljs-keyword">file</span>(<span class="hljs-string">&#x27;build/classes/java&#x27;</span>)        <span class="hljs-keyword">file</span>.whenMerged &#123;            entries.<span class="hljs-keyword">each</span> &#123; entry -&gt;                <span class="hljs-keyword">if</span> (entry.kind == <span class="hljs-string">&#x27;src&#x27;</span> &amp;&amp; entry.hasProperty(<span class="hljs-string">&#x27;output&#x27;</span>)) &#123;                    <span class="hljs-keyword">if</span> (entry.path == <span class="hljs-string">&quot;src/main/java&quot;</span>) &#123;                        entry.output = <span class="hljs-string">&quot;build/classes/java/main&quot;</span>                    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (entry.path == <span class="hljs-string">&quot;src/main/resources&quot;</span>) &#123;                        entry.output = <span class="hljs-string">&quot;build/resources/main&quot;</span>                    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (entry.path == <span class="hljs-string">&quot;src/test/resources&quot;</span>) &#123;                        entry.output = <span class="hljs-string">&quot;build/resources/test&quot;</span>                    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (entry.path == <span class="hljs-string">&quot;src/test/java&quot;</span>) &#123;                        entry.output = <span class="hljs-string">&quot;build/classes/java/test&quot;</span>                    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (entry.path == <span class="hljs-string">&quot;src/test/groovy&quot;</span>) &#123;                        entry.output = <span class="hljs-string">&quot;build/classes/groovy/test&quot;</span>                    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (entry.path == <span class="hljs-string">&quot;src/main/groovy&quot;</span>) &#123;                        entry.output = <span class="hljs-string">&quot;build/classes/groovy/main&quot;</span>                    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (entry.path == <span class="hljs-string">&quot;src/main/kotlin&quot;</span>) &#123;                        entry.output = <span class="hljs-string">&quot;build/classes/kotlin/main&quot;</span>                    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (entry.path == <span class="hljs-string">&quot;src/test/kotlin&quot;</span>) &#123;                        entry.output = <span class="hljs-string">&quot;build/classes/kotlin/test&quot;</span>                    &#125; <span class="hljs-keyword">else</span>  &#123;                        <span class="hljs-keyword">println</span>(entry.path)                    &#125;                    <span class="hljs-keyword">if</span> (entry.output != <span class="hljs-keyword">null</span>) entry.output = entry.output.replace(<span class="hljs-string">&#x27;bin/&#x27;</span>, <span class="hljs-string">&quot;build/&quot;</span>)                &#125;            &#125;        &#125;    &#125;&#125;</code></pre><h2 id="Generate-Eclipse-Files">Generate Eclipse Files</h2><ul><li>Open a terminal and navigate to your project directory.</li><li>Run the following Gradle command to generate Eclipse files:</li></ul><pre><code class="hljs bash">gradlew eclipse</code></pre><blockquote><p>This task generates the necessary .project and .classpath files for your Eclipse project.</p></blockquote><h2 id="Conclusion">Conclusion</h2><p>By following these steps, you should have successfully configured your Eclipse project with the Gradle build tool. Keep in mind that these instructions may vary slightly depending on your specific project structure and requirements.</p>]]></content>
    
    
    <summary type="html">configuring classpath and build settings automatically for an Eclipse project that uses the Gradle build tool</summary>
    
    
    
    <category term="programming" scheme="https://www.webmanajemen.com/categories/programming/"/>
    
    
    <category term="java" scheme="https://www.webmanajemen.com/tags/java/"/>
    
    <category term="gradle" scheme="https://www.webmanajemen.com/tags/gradle/"/>
    
    <category term="kotlin" scheme="https://www.webmanajemen.com/tags/kotlin/"/>
    
  </entry>
  
  <entry>
    <title>classpath config for gradle within vscode redhat java extension</title>
    <link href="https://www.webmanajemen.com/2024/01/classpath-eclipse-within-vscode-redhat-java-for-gradle.html"/>
    <id>https://www.webmanajemen.com/2024/01/classpath-eclipse-within-vscode-redhat-java-for-gradle.html</id>
    <published>2024-01-25T12:45:04.000Z</published>
    <updated>2024-01-25T14:20:01.000Z</updated>
    
    <content type="html"><![CDATA[<p>Configuring the classpath for a Gradle project in Visual Studio Code (VSCode) involves specifying the dependencies and build settings.<br>Here’s a guide for both IDEs:</p><h2 id="Search-java-source">Search java source</h2><p>Searching source configs inside <code>.classpath</code> and <code>*.prefs</code> files</p><ul><li>Search java source config by substring <code>path=&quot;src/main/java&quot;</code></li><li>Replace output attribute to gradle build folder <code>output=&quot;build/classes/java/main&quot;</code></li></ul><p>result looks like:</p><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">classpathentry</span> <span class="hljs-attr">excluding</span>=<span class="hljs-string">&quot;**/*.txt&quot;</span> <span class="hljs-attr">output</span>=<span class="hljs-string">&quot;build/classes/java/main&quot;</span> <span class="hljs-attr">kind</span>=<span class="hljs-string">&quot;src&quot;</span> <span class="hljs-attr">path</span>=<span class="hljs-string">&quot;src/main/java&quot;</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">attributes</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">attribute</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;gradle_scope&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;main&quot;</span>/&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">attribute</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;gradle_used_by_scope&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;main,test&quot;</span>/&gt;</span>  <span class="hljs-tag">&lt;/<span class="hljs-name">attributes</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">classpathentry</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">classpathentry</span> <span class="hljs-attr">output</span>=<span class="hljs-string">&quot;build/classes/java/test&quot;</span> <span class="hljs-attr">kind</span>=<span class="hljs-string">&quot;src&quot;</span> <span class="hljs-attr">path</span>=<span class="hljs-string">&quot;src/test/java&quot;</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">attributes</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">attribute</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;gradle_scope&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;test&quot;</span>/&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">attribute</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;gradle_used_by_scope&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;test&quot;</span>/&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">attribute</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;test&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;true&quot;</span>/&gt;</span>  <span class="hljs-tag">&lt;/<span class="hljs-name">attributes</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">classpathentry</span>&gt;</span></code></pre><ul><li>Search annotation config <code>bin/generated-sources/annotations</code> and <code>bin/generated-test-sources/annotations</code></li><li>Replace with <code>build/generated/sources/annotationProcessor/java/main</code> and <code>build/generated/sources/annotationProcessor/java/test</code></li></ul><p><img src="https://github.com/dimaslanjaka/source-posts/assets/12471057/97281fc6-22cb-4347-a5e6-3e9872ab8c76" alt=""><br><img src="https://github.com/dimaslanjaka/source-posts/assets/12471057/ee62a458-68b8-4e9a-9a0d-264d8f4d3d60" alt=""></p><ul><li>Verify all output directory are configured by searching subtring <code>bin/</code> for <code>.classpath</code> and <code>*.prefs</code> files</li></ul><p><img src="https://github.com/dimaslanjaka/source-posts/assets/12471057/3e264d78-f046-47d0-85f0-ffceedd0bbe1" alt=""></p><p>My full working <code>.classpath</code> configuration</p><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">classpath</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">classpathentry</span> <span class="hljs-attr">excluding</span>=<span class="hljs-string">&quot;**/*.txt&quot;</span> <span class="hljs-attr">kind</span>=<span class="hljs-string">&quot;src&quot;</span> <span class="hljs-attr">output</span>=<span class="hljs-string">&quot;build/classes/java/main&quot;</span> <span class="hljs-attr">path</span>=<span class="hljs-string">&quot;src/main/java&quot;</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">attributes</span>&gt;</span>      <span class="hljs-tag">&lt;<span class="hljs-name">attribute</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;gradle_scope&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;main&quot;</span>/&gt;</span>      <span class="hljs-tag">&lt;<span class="hljs-name">attribute</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;gradle_used_by_scope&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;main,test&quot;</span>/&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">attributes</span>&gt;</span>  <span class="hljs-tag">&lt;/<span class="hljs-name">classpathentry</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">classpathentry</span> <span class="hljs-attr">kind</span>=<span class="hljs-string">&quot;src&quot;</span> <span class="hljs-attr">output</span>=<span class="hljs-string">&quot;build/classes/groovy/main&quot;</span> <span class="hljs-attr">path</span>=<span class="hljs-string">&quot;src/main/groovy&quot;</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">attributes</span>&gt;</span>      <span class="hljs-tag">&lt;<span class="hljs-name">attribute</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;gradle_scope&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;main&quot;</span>/&gt;</span>      <span class="hljs-tag">&lt;<span class="hljs-name">attribute</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;gradle_used_by_scope&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;main,test&quot;</span>/&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">attributes</span>&gt;</span>  <span class="hljs-tag">&lt;/<span class="hljs-name">classpathentry</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">classpathentry</span> <span class="hljs-attr">kind</span>=<span class="hljs-string">&quot;src&quot;</span> <span class="hljs-attr">output</span>=<span class="hljs-string">&quot;build/resources/main&quot;</span> <span class="hljs-attr">path</span>=<span class="hljs-string">&quot;src/main/resources&quot;</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">attributes</span>&gt;</span>      <span class="hljs-tag">&lt;<span class="hljs-name">attribute</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;gradle_scope&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;main&quot;</span>/&gt;</span>      <span class="hljs-tag">&lt;<span class="hljs-name">attribute</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;gradle_used_by_scope&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;main,test&quot;</span>/&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">attributes</span>&gt;</span>  <span class="hljs-tag">&lt;/<span class="hljs-name">classpathentry</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">classpathentry</span> <span class="hljs-attr">kind</span>=<span class="hljs-string">&quot;src&quot;</span> <span class="hljs-attr">output</span>=<span class="hljs-string">&quot;build/classes/java/test&quot;</span> <span class="hljs-attr">path</span>=<span class="hljs-string">&quot;src/test/java&quot;</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">attributes</span>&gt;</span>      <span class="hljs-tag">&lt;<span class="hljs-name">attribute</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;gradle_scope&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;test&quot;</span>/&gt;</span>      <span class="hljs-tag">&lt;<span class="hljs-name">attribute</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;gradle_used_by_scope&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;test&quot;</span>/&gt;</span>      <span class="hljs-tag">&lt;<span class="hljs-name">attribute</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;test&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;true&quot;</span>/&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">attributes</span>&gt;</span>  <span class="hljs-tag">&lt;/<span class="hljs-name">classpathentry</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">classpathentry</span> <span class="hljs-attr">kind</span>=<span class="hljs-string">&quot;src&quot;</span> <span class="hljs-attr">output</span>=<span class="hljs-string">&quot;build/classes/kotlin/test&quot;</span> <span class="hljs-attr">path</span>=<span class="hljs-string">&quot;src/test/kotlin&quot;</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">attributes</span>&gt;</span>      <span class="hljs-tag">&lt;<span class="hljs-name">attribute</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;gradle_scope&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;test&quot;</span>/&gt;</span>      <span class="hljs-tag">&lt;<span class="hljs-name">attribute</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;gradle_used_by_scope&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;test&quot;</span>/&gt;</span>      <span class="hljs-tag">&lt;<span class="hljs-name">attribute</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;test&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;true&quot;</span>/&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">attributes</span>&gt;</span>  <span class="hljs-tag">&lt;/<span class="hljs-name">classpathentry</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">classpathentry</span> <span class="hljs-attr">kind</span>=<span class="hljs-string">&quot;src&quot;</span> <span class="hljs-attr">output</span>=<span class="hljs-string">&quot;build/resources/test&quot;</span> <span class="hljs-attr">path</span>=<span class="hljs-string">&quot;src/test/resources&quot;</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">attributes</span>&gt;</span>      <span class="hljs-tag">&lt;<span class="hljs-name">attribute</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;gradle_scope&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;test&quot;</span>/&gt;</span>      <span class="hljs-tag">&lt;<span class="hljs-name">attribute</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;gradle_used_by_scope&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;test&quot;</span>/&gt;</span>      <span class="hljs-tag">&lt;<span class="hljs-name">attribute</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;test&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;true&quot;</span>/&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">attributes</span>&gt;</span>  <span class="hljs-tag">&lt;/<span class="hljs-name">classpathentry</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">classpathentry</span> <span class="hljs-attr">kind</span>=<span class="hljs-string">&quot;con&quot;</span> <span class="hljs-attr">path</span>=<span class="hljs-string">&quot;org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-19/&quot;</span>/&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">classpathentry</span> <span class="hljs-attr">kind</span>=<span class="hljs-string">&quot;con&quot;</span> <span class="hljs-attr">path</span>=<span class="hljs-string">&quot;org.eclipse.buildship.core.gradleclasspathcontainer&quot;</span>/&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">classpathentry</span> <span class="hljs-attr">kind</span>=<span class="hljs-string">&quot;src&quot;</span> <span class="hljs-attr">output</span>=<span class="hljs-string">&quot;build/test&quot;</span> <span class="hljs-attr">path</span>=<span class="hljs-string">&quot;build/generated-test-sources/annotations&quot;</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">attributes</span>&gt;</span>      <span class="hljs-tag">&lt;<span class="hljs-name">attribute</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;optional&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;true&quot;</span>/&gt;</span>      <span class="hljs-tag">&lt;<span class="hljs-name">attribute</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;test&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;true&quot;</span>/&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">attributes</span>&gt;</span>  <span class="hljs-tag">&lt;/<span class="hljs-name">classpathentry</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">classpathentry</span> <span class="hljs-attr">kind</span>=<span class="hljs-string">&quot;src&quot;</span> <span class="hljs-attr">path</span>=<span class="hljs-string">&quot;build/generated-sources/annotations&quot;</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">attributes</span>&gt;</span>      <span class="hljs-tag">&lt;<span class="hljs-name">attribute</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;optional&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;true&quot;</span>/&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">attributes</span>&gt;</span>  <span class="hljs-tag">&lt;/<span class="hljs-name">classpathentry</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">classpathentry</span> <span class="hljs-attr">kind</span>=<span class="hljs-string">&quot;src&quot;</span> <span class="hljs-attr">path</span>=<span class="hljs-string">&quot;bin/generated-sources/annotations&quot;</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">attributes</span>&gt;</span>      <span class="hljs-tag">&lt;<span class="hljs-name">attribute</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;optional&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;true&quot;</span>/&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">attributes</span>&gt;</span>  <span class="hljs-tag">&lt;/<span class="hljs-name">classpathentry</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">classpathentry</span> <span class="hljs-attr">kind</span>=<span class="hljs-string">&quot;src&quot;</span> <span class="hljs-attr">output</span>=<span class="hljs-string">&quot;build/test&quot;</span> <span class="hljs-attr">path</span>=<span class="hljs-string">&quot;bin/generated-test-sources/annotations&quot;</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">attributes</span>&gt;</span>      <span class="hljs-tag">&lt;<span class="hljs-name">attribute</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;optional&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;true&quot;</span>/&gt;</span>      <span class="hljs-tag">&lt;<span class="hljs-name">attribute</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;test&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;true&quot;</span>/&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">attributes</span>&gt;</span>  <span class="hljs-tag">&lt;/<span class="hljs-name">classpathentry</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">classpathentry</span> <span class="hljs-attr">kind</span>=<span class="hljs-string">&quot;output&quot;</span> <span class="hljs-attr">path</span>=<span class="hljs-string">&quot;build/default&quot;</span>/&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">classpath</span>&gt;</span></code></pre><h2 id="Configure-vscode-settings-json">Configure <code>.vscode/settings.json</code></h2><ul><li>In the <code>.vscode</code> directory (created by the above task), there should be a <code>settings.json</code> file.</li><li>Ensure it has the necessary classpath settings.</li></ul><p>Example <code>settings.json</code>:</p><pre><code class="hljs jsonc">&#123;  &quot;java.project.outputPath&quot;: &quot;build&quot;,  &quot;java.import.generatesMetadataFilesAtProjectRoot&quot;: false,  &quot;java.editor.reloadChangedSources&quot;: &quot;auto&quot;,  &quot;java.configuration.updateBuildConfiguration&quot;: &quot;disabled&quot;,  &quot;java.server.launchMode&quot;: &quot;Hybrid&quot;,  &quot;java.project.referencedLibraries&quot;: [    &quot;build/classes/java/main&quot;,    &quot;build/resources/main&quot;,    &quot;lib/**/*.jar&quot;  ],  &quot;java.edit.smartSemicolonDetection.enabled&quot;: true,  &quot;terminal.integrated.env.windows&quot;: &#123;    &quot;PATH&quot;: &quot;$&#123;workspaceFolder&#125;;$&#123;workspaceFolder&#125;\\bin;$&#123;workspaceFolder&#125;\\node_modules\\.bin;$&#123;env:PATH&#125;&quot;  &#125;,  &quot;terminal.integrated.env.linux&quot;: &#123;    &quot;PATH&quot;: &quot;$&#123;workspaceFolder&#125;:$&#123;workspaceFolder&#125;/bin:$&#123;workspaceFolder&#125;/node_modules/.bin:$&#123;env:PATH&#125;&quot;  &#125;,  &quot;java.sharedIndexes.enabled&quot;: &quot;off&quot;,  &quot;java.project.resourceFilters&quot;: [    &quot;node_modules&quot;,    &quot;\\.git&quot;,    &quot;\\.cache&quot;  ]&#125;</code></pre><h2 id="Conclusion">Conclusion</h2><p>Now you don’t have to wait long when opening a Java project in VScode with the Redhat Java plugin, because all build output is synchronized from Gradle and Eclipse JDT which are used by the Redhat Java extension.</p><p>And this trick can change the output folder from Redhat Java Extension to the Gradle build folder.</p><p>You can checkout our repository of <a href="https://github.com/dimaslanjaka/Java/tree/master/eclipse-gradle">gradle+eclipse in vscode - sample project</a></p>]]></content>
    
    
    <summary type="html">configuration classpath for gradle in eclipse or vscode redhat java</summary>
    
    
    
    <category term="programming" scheme="https://www.webmanajemen.com/categories/programming/"/>
    
    
    <category term="java" scheme="https://www.webmanajemen.com/tags/java/"/>
    
    <category term="vscode" scheme="https://www.webmanajemen.com/tags/vscode/"/>
    
    <category term="kotlin" scheme="https://www.webmanajemen.com/tags/kotlin/"/>
    
    <category term="groovy" scheme="https://www.webmanajemen.com/tags/groovy/"/>
    
  </entry>
  
  <entry>
    <title>How to overwrite cache in github actions workflow</title>
    <link href="https://www.webmanajemen.com/GitHub/github-actions-overwrite-cache.html"/>
    <id>https://www.webmanajemen.com/GitHub/github-actions-overwrite-cache.html</id>
    <published>2024-01-21T00:54:43.000Z</published>
    <updated>2024-01-21T02:54:43.000Z</updated>
    
    <content type="html"><![CDATA[<details>  <summary>Introduction</summary><h2 id="Introduction">Introduction</h2><p>In software development, caching is a commonly used technique to store frequently accessed data in a temporary storage location. This helps to improve performance and reduce the load on the server. Github Actions allows developers to incorporate caching in their workflows to speed up the build process. However, there may be situations where the cached data needs to be refreshed or overwritten. In this article, we will discuss how to overwrite cache in Github Actions workflow.</p><h2 id="Prerequisites">Prerequisites</h2><p>Before we begin, make sure you have the following set up:</p><ul><li>A Github account</li><li>A repository with a Github Actions workflow file</li><li>Basic knowledge of YAML and Github Actions</li></ul><h2 id="Step-1-Identify-the-Cache-Key">Step 1: Identify the Cache Key</h2><p>In your Github Actions workflow file, you would have defined a cache key for the specific action that requires caching. This key is used to store and retrieve the cached data. To overwrite the cache, we first need to identify the cache key.</p>  <pre><code class="hljs yaml"><span class="hljs-attr">runs-on:</span> <span class="hljs-string">ubuntu-latest</span><span class="hljs-attr">env:</span>  <span class="hljs-comment"># your cache key</span>  <span class="hljs-attr">cache-key:</span> <span class="hljs-string">your-cache-key</span></code></pre><h2 id="Step-2-Use-“cache-hit”-and-“cache-save”-actions">Step 2: Use “cache-hit” and “cache-save” actions</h2><p>Github Actions provides two actions, “cache-hit” and “cache-save”, to handle caching. The “cache-hit” action retrieves the cached data based on the cache key, while the “cache-save” action stores the data with a new cache key. We will be using these actions to overwrite the cache.</p>  <pre><code class="hljs yaml"><span class="hljs-attr">if:</span> <span class="hljs-string">$&#123;&#123;</span> <span class="hljs-string">steps.cache-restore.outputs.cache-hit</span> <span class="hljs-string">&#125;&#125;</span></code></pre><h2 id="Step-3-Create-a-New-Workflow-Job">Step 3: Create a New Workflow Job</h2><p>To overwrite the cache, we will create a new job in our workflow file. This job will run before the actual job that requires caching and will be responsible for overwriting the cache data. It will use the “cache-hit” action to retrieve the existing cached data and the “cache-save” action to store the updated data with a new cache key.</p>  <pre><code class="hljs yaml"><span class="hljs-attr">jobs:</span>  <span class="hljs-attr">update:</span>    <span class="hljs-attr">runs-on:</span> <span class="hljs-string">ubuntu-latest</span>    <span class="hljs-attr">env:</span>      <span class="hljs-comment"># your cache key</span>      <span class="hljs-attr">cache-key:</span> <span class="hljs-string">your-cache-key</span>  <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Restore</span> <span class="hljs-string">Cache</span>    <span class="hljs-attr">id:</span> <span class="hljs-string">cache-restore</span>    <span class="hljs-attr">uses:</span> <span class="hljs-string">actions/cache/restore@v3</span>    <span class="hljs-attr">with:</span>      <span class="hljs-attr">path:</span> <span class="hljs-string">./cache</span>      <span class="hljs-attr">key:</span> <span class="hljs-string">$&#123;&#123;</span> <span class="hljs-string">env.cache-key</span> <span class="hljs-string">&#125;&#125;</span></code></pre><h2 id="Step-4-Use-“if”-Condition-for-the-New-Job">Step 4: Use “if” Condition for the New Job</h2><p>To ensure that the new job only runs when we want to overwrite the cache, we can use the “if” condition in the job. This condition can be set to run only when a specific event occurs, or a certain condition is met. In this case, we can use the “if” condition to check for a specific flag or variable that indicates the need to overwrite the cache.</p>  <pre><code class="hljs yaml"><span class="hljs-attr">if:</span> <span class="hljs-string">$&#123;&#123;</span> <span class="hljs-string">steps.cache-restore.outputs.cache-hit</span> <span class="hljs-string">&#125;&#125;</span></code></pre><h2 id="Step-5-Test-and-Verify">Step 5: Test and Verify</h2><p>Once you have made the necessary changes, commit and push them to your repository. Your new job for overwriting the cache will run before the actual job that requires caching. You can monitor the workflow runs on Github and verify if the cache has been overwritten successfully.</p><h2 id="Conclusion">Conclusion</h2><p>Caching is a useful feature in Github Actions that helps to improve the performance of your workflow. However, there may be instances where you need to refresh or update the cached data. By following these steps, you can easily overwrite the cache in your Github Actions workflow. This ensures that your workflow runs with the most up-to-date data and avoids any potential issues due to outdated cache.</p></details><h1>GitHub Actions overwrite cache example repo</h1><p>GitHub Actions does not support overwrite cache with same key, so we have to delete the old cache key before rewrite the cache.</p><!-- - [Feature request: option to update cache · Issue #342 · actions/cache](https://github.com/actions/cache/issues/342) --><p>As workaround, you can use <code>actions/cache/restore</code> and <a href="https://github.com/actions/gh-actions-cache">gh-actions-cache</a>, and <code>actions/cache/save</code>.</p><p>This workflow implements overwrite cache using <strong>restore</strong> <code>-&gt;</code> <strong>delete</strong> <code>-&gt;</code> <strong>save</strong>.</p><pre><code class="hljs yaml"><span class="hljs-attr">name:</span> <span class="hljs-string">Update</span> <span class="hljs-string">Cache</span><span class="hljs-attr">on:</span>  <span class="hljs-attr">workflow_dispatch:</span><span class="hljs-attr">permissions:</span>  <span class="hljs-attr">contents:</span> <span class="hljs-string">read</span>  <span class="hljs-attr">actions:</span> <span class="hljs-string">write</span> <span class="hljs-comment"># require to delete cache</span><span class="hljs-attr">jobs:</span>  <span class="hljs-attr">update:</span>    <span class="hljs-attr">runs-on:</span> <span class="hljs-string">ubuntu-latest</span>    <span class="hljs-attr">env:</span>      <span class="hljs-comment"># overwrite cache key</span>      <span class="hljs-attr">cache-key:</span> <span class="hljs-string">your-cache-key</span>    <span class="hljs-attr">steps:</span>      <span class="hljs-comment"># This job implements overwrite cache using restore + delete + save</span>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Checkout</span>        <span class="hljs-attr">uses:</span> <span class="hljs-string">actions/checkout@v3</span> <span class="hljs-comment"># gh command require repository</span>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Restore</span> <span class="hljs-string">Cache</span>        <span class="hljs-attr">id:</span> <span class="hljs-string">cache-restore</span>        <span class="hljs-attr">uses:</span> <span class="hljs-string">actions/cache/restore@v3</span>        <span class="hljs-attr">with:</span>          <span class="hljs-attr">path:</span> <span class="hljs-string">./cache</span>          <span class="hljs-attr">key:</span> <span class="hljs-string">$&#123;&#123;</span> <span class="hljs-string">env.cache-key</span> <span class="hljs-string">&#125;&#125;</span>      <span class="hljs-comment"># Main Task</span>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Main</span> <span class="hljs-string">Task</span>        <span class="hljs-attr">run:</span> <span class="hljs-string">|</span><span class="hljs-string">          # generate current time to ./cache/time</span><span class="hljs-string">          mkdir -p ./cache</span><span class="hljs-string">          previous_date=$(cat ./cache/time || echo &quot;No previous date&quot;)</span><span class="hljs-string">          current_date=$(date &quot;+%Y-%m-%d %H:%M:%S&quot;)</span><span class="hljs-string">          echo &quot;Previous: $previous_date&quot;</span><span class="hljs-string">          echo &quot;Current: $current_date&quot;</span><span class="hljs-string">          # Save current time to ./cache/time</span><span class="hljs-string">          echo &quot;$current_date&quot; &gt; ./cache/time</span><span class="hljs-string"></span>      <span class="hljs-comment"># overwrite cache key: delete previous and save current</span>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Delete</span> <span class="hljs-string">Previous</span> <span class="hljs-string">Cache</span>        <span class="hljs-attr">if:</span> <span class="hljs-string">$&#123;&#123;</span> <span class="hljs-string">steps.cache-restore.outputs.cache-hit</span> <span class="hljs-string">&#125;&#125;</span>        <span class="hljs-attr">continue-on-error:</span> <span class="hljs-literal">true</span>        <span class="hljs-attr">run:</span> <span class="hljs-string">|</span><span class="hljs-string">          gh extension install actions/gh-actions-cache</span><span class="hljs-string">          gh actions-cache delete &quot;$&#123;&#123; env.cache-key &#125;&#125;&quot; --confirm</span><span class="hljs-string"></span>        <span class="hljs-attr">env:</span>          <span class="hljs-attr">GH_TOKEN:</span> <span class="hljs-string">$&#123;&#123;</span> <span class="hljs-string">secrets.GITHUB_TOKEN</span> <span class="hljs-string">&#125;&#125;</span>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Save</span> <span class="hljs-string">Cache</span>        <span class="hljs-attr">uses:</span> <span class="hljs-string">actions/cache/save@v3</span>        <span class="hljs-attr">with:</span>          <span class="hljs-attr">path:</span> <span class="hljs-string">./cache</span>          <span class="hljs-attr">key:</span> <span class="hljs-string">$&#123;&#123;</span> <span class="hljs-string">env.cache-key</span> <span class="hljs-string">&#125;&#125;</span></code></pre>]]></content>
    
    
    <summary type="html">Overwriting github action cache strategy with code example</summary>
    
    
    
    <category term="programming" scheme="https://www.webmanajemen.com/categories/programming/"/>
    
    
    <category term="github" scheme="https://www.webmanajemen.com/tags/github/"/>
    
    <category term="github-actions-workflow" scheme="https://www.webmanajemen.com/tags/github-actions-workflow/"/>
    
  </entry>
  
  <entry>
    <title>Deprecated WebSecurityConfigurerAdapter Solution</title>
    <link href="https://www.webmanajemen.com/2024/01/deprecated-web-security-configurer-adapter-solution.html"/>
    <id>https://www.webmanajemen.com/2024/01/deprecated-web-security-configurer-adapter-solution.html</id>
    <published>2024-01-19T06:51:33.000Z</published>
    <updated>2024-01-19T12:54:20.000Z</updated>
    
    <content type="html"><![CDATA[<p>How to solve <strong>Deprecated WebSecurityConfigurerAdapter</strong> in spring boot security <code>&gt;= 5.7.0-M2</code></p><h2 id="SecurityConfiguration-method-structures">SecurityConfiguration method structures</h2><p>Spring Security <code>v5.7.0-M2</code> deprecates <strong>WebSecurityConfigurerAdapter</strong> for customizing HTTP security.<br>Developers are strongly encouraged to prioritize content-based security configuration over extension classes.<br>This change focuses on adapting to newer practices.</p><h3 id="Old-codes">Old codes</h3><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><span class="hljs-meta">@EnableWebSecurity</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SecurityConfiguration</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">WebSecurityConfigurerAdapter</span> &#123;    <span class="hljs-meta">@Override</span>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">configure</span><span class="hljs-params">(HttpSecurity http)</span> <span class="hljs-keyword">throws</span> Exception &#123;        <span class="hljs-comment">// configure HTTP security...</span>    &#125;    <span class="hljs-meta">@Override</span>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">configure</span><span class="hljs-params">(WebSecurity web)</span> <span class="hljs-keyword">throws</span> Exception &#123;        <span class="hljs-comment">// configure Web security...</span>    &#125;&#125;</code></pre><h3 id="New-codes">New codes</h3><p>To resolve this issue, replace the WebSecurityConfigurerAdapter extension with the <strong>SecurityFilterChain</strong> and <strong>WebSecurityCustomizer</strong> bean declarations as shown below.</p><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SecurityConfiguration</span> &#123;    <span class="hljs-meta">@Bean</span>    <span class="hljs-keyword">public</span> SecurityFilterChain <span class="hljs-title function_">filterChain</span><span class="hljs-params">(HttpSecurity http)</span> <span class="hljs-keyword">throws</span> Exception &#123;      <span class="hljs-comment">// configure HTTP security...</span>    &#125;    <span class="hljs-meta">@Bean</span>    <span class="hljs-keyword">public</span> WebSecurityCustomizer <span class="hljs-title function_">webSecurityCustomizer</span><span class="hljs-params">()</span> &#123;      <span class="hljs-comment">// configure Web security...</span>    &#125;&#125;</code></pre><h2 id="Configure-http-security">Configure http security</h2><p>We are currently moving our code, including security configuration, to a component-based approach.<br>Below is the code that extends the WebSecurityConfigurerAdapter class.</p><h3 id="Old-codes-2">Old codes</h3><pre><code class="hljs java"><span class="hljs-meta">@EnableWebSecurity</span><span class="hljs-meta">@EnableGlobalMethodSecurity(prePostEnabled = true)</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">WebSecurity</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">WebSecurityConfigurerAdapter</span> &#123;    <span class="hljs-meta">@Override</span>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">configure</span><span class="hljs-params">(HttpSecurity http)</span> <span class="hljs-keyword">throws</span> Exception &#123;        http.cors().and().csrf().disable()                .authorizeHttpRequests()                .requestMatchers(HttpMethod.POST, SecurityConstants.SIGN_UP_URL).permitAll()                .anyRequest().authenticated().and()                .addFilter(getAuthenticationFilter())                .addFilter(<span class="hljs-keyword">new</span> <span class="hljs-title class_">AuthorizationFilter</span>(authenticationManager(), userRepository))                .sessionManagement()                .sessionCreationPolicy(SessionCreationPolicy.STATELESS);    &#125;    <span class="hljs-comment">// Configure AuthenticationManagerBuilder</span>    <span class="hljs-meta">@Override</span>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">configure</span><span class="hljs-params">(AuthenticationManagerBuilder auth)</span> <span class="hljs-keyword">throws</span> Exception &#123;        auth.userDetailsService(userDetailsService).passwordEncoder(bCryptPasswordEncoder);    &#125;    <span class="hljs-keyword">protected</span> AuthenticationFilter <span class="hljs-title function_">getAuthenticationFilter</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;        <span class="hljs-keyword">final</span> <span class="hljs-type">AuthenticationFilter</span> <span class="hljs-variable">filter</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AuthenticationFilter</span>(authenticationManager());        filter.setFilterProcessesUrl(<span class="hljs-string">&quot;/users/login&quot;</span>);        <span class="hljs-keyword">return</span> filter;    &#125;&#125;</code></pre><h3 id="New-codes-2">New codes</h3><p>Below is the same code without extending the WebSecurityConfigurerAdapter class in new spring boot API.</p><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><span class="hljs-meta">@EnableWebSecurity</span><span class="hljs-meta">@EnableMethodSecurity(prePostEnabled = true)</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">WebSecurity</span> &#123;    <span class="hljs-comment">// expose authentication manager to @Controller</span>    <span class="hljs-meta">@Bean</span>    <span class="hljs-keyword">public</span> AuthenticationManager <span class="hljs-title function_">authenticationManager</span><span class="hljs-params">(HttpSecurity http)</span> <span class="hljs-keyword">throws</span> Exception &#123;      <span class="hljs-keyword">return</span> http.getSharedObject(AuthenticationManagerBuilder.class)          .build();    &#125;    <span class="hljs-meta">@Bean</span>    <span class="hljs-keyword">public</span> SecurityFilterChain <span class="hljs-title function_">configure</span><span class="hljs-params">(HttpSecurity http)</span> <span class="hljs-keyword">throws</span> Exception &#123;        <span class="hljs-comment">// Configure AuthenticationManagerBuilder</span>        <span class="hljs-type">AuthenticationManagerBuilder</span> <span class="hljs-variable">authenticationManagerBuilder</span> <span class="hljs-operator">=</span> http.getSharedObject(AuthenticationManagerBuilder.class);        authenticationManagerBuilder.userDetailsService(userDetailsService).passwordEncoder(bCryptPasswordEncoder);        <span class="hljs-comment">// Get AuthenticationManager</span>        <span class="hljs-type">AuthenticationManager</span> <span class="hljs-variable">authenticationManager</span> <span class="hljs-operator">=</span> authenticationManagerBuilder.build();        http                .cors(withDefaults())                .csrf((csrf) -&gt; csrf.disable())                .authorizeHttpRequests((authz) -&gt; authz                .requestMatchers(HttpMethod.POST, SecurityConstants.SIGN_UP_URL).permitAll()                .anyRequest().authenticated())                .authenticationManager(authenticationManager)                .addFilter(authenticationFilter)                .addFilter(<span class="hljs-keyword">new</span> <span class="hljs-title class_">AuthorizationFilter</span>(authenticationManager))                .sessionManagement((session) -&gt; session                .sessionCreationPolicy(SessionCreationPolicy.STATELESS));        <span class="hljs-keyword">return</span> http.build();    &#125;    <span class="hljs-keyword">protected</span> AuthenticationFilter <span class="hljs-title function_">getAuthenticationFilter</span><span class="hljs-params">(AuthenticationManager authenticationManager)</span> <span class="hljs-keyword">throws</span> Exception &#123;        <span class="hljs-keyword">final</span> <span class="hljs-type">AuthenticationFilter</span> <span class="hljs-variable">filter</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AuthenticationFilter</span>(authenticationManager);        filter.setFilterProcessesUrl(<span class="hljs-string">&quot;/users/login&quot;</span>);        <span class="hljs-keyword">return</span> filter;    &#125;    <span class="hljs-meta">@Bean</span>    CorsConfigurationSource <span class="hljs-title function_">corsConfigurationSource</span><span class="hljs-params">()</span> &#123;        <span class="hljs-type">CorsConfiguration</span> <span class="hljs-variable">configuration</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CorsConfiguration</span>();        configuration.setAllowedOrigins(Arrays.asList(<span class="hljs-string">&quot;*&quot;</span>));        configuration.setAllowedMethods(Arrays.asList(<span class="hljs-string">&quot;POST&quot;</span>, <span class="hljs-string">&quot;PUT&quot;</span>, <span class="hljs-string">&quot;GET&quot;</span>, <span class="hljs-string">&quot;OPTIONS&quot;</span>, <span class="hljs-string">&quot;DELETE&quot;</span>, <span class="hljs-string">&quot;PATCH&quot;</span>)); <span class="hljs-comment">// or simply &quot;*&quot;</span>        configuration.setAllowedHeaders(Arrays.asList(<span class="hljs-string">&quot;*&quot;</span>));        <span class="hljs-type">UrlBasedCorsConfigurationSource</span> <span class="hljs-variable">source</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UrlBasedCorsConfigurationSource</span>();        source.registerCorsConfiguration(<span class="hljs-string">&quot;/**&quot;</span>, configuration);        <span class="hljs-keyword">return</span> source;    &#125;&#125;</code></pre>]]></content>
    
    
    <summary type="html">Solve WebSecurityConfigurerAdapter deprecated in spring boot</summary>
    
    
    
    <category term="programming" scheme="https://www.webmanajemen.com/categories/programming/"/>
    
    
    <category term="java" scheme="https://www.webmanajemen.com/tags/java/"/>
    
    <category term="spring-boot" scheme="https://www.webmanajemen.com/tags/spring-boot/"/>
    
  </entry>
  
  <entry>
    <title>Spring Boot login programmatically</title>
    <link href="https://www.webmanajemen.com/2024/01/spring-boot-login-programatically.html"/>
    <id>https://www.webmanajemen.com/2024/01/spring-boot-login-programatically.html</id>
    <published>2024-01-18T13:56:37.000Z</published>
    <updated>2024-01-19T05:45:48.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>Important</strong>:<br>First you need a <a href="/2024/01/spring-boot-custom-passwordEncoder.html">custom password encoder</a> for your spring boot project, so you can log in using your user credentials. <a href="/2024/01/spring-boot-custom-passwordEncoder.html">READ HERE - custom password encoder for spring boot</a>.</p><h2 id="Setup-Spring-Security">Setup Spring Security</h2><p>Expose context of <code>org.springframework.security.authentication.AuthenticationManager</code> from security config class to be used in <code>LoginController</code></p><pre><code class="hljs java"><span class="hljs-keyword">import</span> javax.sql.DataSource;<span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<span class="hljs-keyword">import</span> org.springframework.context.annotation.Bean;<span class="hljs-keyword">import</span> org.springframework.context.annotation.Configuration;<span class="hljs-keyword">import</span> org.springframework.security.authentication.AuthenticationManager;<span class="hljs-keyword">import</span> org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;<span class="hljs-keyword">import</span> org.springframework.security.config.annotation.web.builders.HttpSecurity;<span class="hljs-keyword">import</span> org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;<span class="hljs-keyword">import</span> org.springframework.security.config.annotation.web.configurers.AbstractHttpConfigurer;<span class="hljs-keyword">import</span> org.springframework.security.core.userdetails.UserDetailsService;<span class="hljs-keyword">import</span> org.springframework.security.web.SecurityFilterChain;<span class="hljs-keyword">import</span> org.springframework.security.web.util.matcher.AntPathRequestMatcher;<span class="hljs-meta">@Configuration</span><span class="hljs-meta">@EnableWebSecurity</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SecurityConfig</span> &#123;  <span class="hljs-meta">@Autowired</span>  <span class="hljs-keyword">private</span> UserDetailsService userDetailsService;  <span class="hljs-meta">@Autowired</span>  DataSource dataSource;  <span class="hljs-meta">@Bean</span>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> CustomPassword <span class="hljs-title function_">passwordEncoder</span><span class="hljs-params">()</span> &#123;    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CustomPassword</span>(<span class="hljs-string">&quot;passwordEncoder&quot;</span>);  &#125;  <span class="hljs-meta">@Bean</span>  <span class="hljs-keyword">public</span> AuthenticationManager <span class="hljs-title function_">authenticationManager</span><span class="hljs-params">(HttpSecurity http)</span> <span class="hljs-keyword">throws</span> Exception &#123;    <span class="hljs-keyword">return</span> http.getSharedObject(AuthenticationManagerBuilder.class)        .build();  &#125;&#125;</code></pre><h2 id="Setup-Controller">Setup Controller</h2><p>add custom fields to your <code>@Controller</code> class like my LoginController below.</p><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.springframework.security.authentication.AuthenticationManager;<span class="hljs-keyword">import</span> org.springframework.stereotype.Controller;<span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<span class="hljs-meta">@Controller</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">LoginController</span> &#123;  <span class="hljs-meta">@Autowired</span>  <span class="hljs-keyword">private</span> UserService userService;  <span class="hljs-keyword">private</span> CustomPassword passwordEncoder;  <span class="hljs-keyword">private</span> AuthenticationManager authenticationManager;  <span class="hljs-keyword">public</span> <span class="hljs-title function_">LoginController</span><span class="hljs-params">(UserService userService, CustomPassword passwordEncoder, AuthenticationManager authenticationManager)</span> &#123;      <span class="hljs-built_in">this</span>.userService = userService;      <span class="hljs-built_in">this</span>.passwordEncoder = passwordEncoder;      <span class="hljs-built_in">this</span>.authenticationManager = authenticationManager;  &#125;&#125;</code></pre><h2 id="Create-endpoint-mapping">Create endpoint mapping</h2><p>create new url mapping for authenticate the given identifier to valid session token.</p><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(value = &quot;/login/&#123;uuid&#125;&quot;, produces = MediaType.APPLICATION_JSON_VALUE)</span><span class="hljs-meta">@ResponseBody</span><span class="hljs-keyword">public</span> String <span class="hljs-title function_">loginUUID</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable</span> String uuid, HttpServletRequest request, HttpServletResponse response)</span> &#123;    <span class="hljs-type">JSONObject</span> <span class="hljs-variable">jsonObject</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JSONObject</span>();    Optional&lt;User&gt; find = Optional.ofNullable(userService.findUserByEmail(uuid));    <span class="hljs-type">SecurityContext</span> <span class="hljs-variable">securityContext</span> <span class="hljs-operator">=</span> SecurityContextHolder.getContext();    <span class="hljs-keyword">if</span> (find.isPresent()) &#123;        <span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> find.get();        <span class="hljs-type">String</span> <span class="hljs-variable">password</span> <span class="hljs-operator">=</span> passwordEncoder.decode(user.getPassword());        <span class="hljs-type">String</span> <span class="hljs-variable">email</span> <span class="hljs-operator">=</span> user.getEmail();        jsonObject.put(<span class="hljs-string">&quot;email&quot;</span>, user.getEmail());        <span class="hljs-keyword">try</span> &#123;            <span class="hljs-type">UsernamePasswordAuthenticationToken</span> <span class="hljs-variable">loginToken</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UsernamePasswordAuthenticationToken</span>(email,                    password);            <span class="hljs-type">Authentication</span> <span class="hljs-variable">authenticatedUser</span> <span class="hljs-operator">=</span> authenticationManager.authenticate(loginToken);            securityContext.setAuthentication(authenticatedUser);            <span class="hljs-type">HttpSession</span> <span class="hljs-variable">session</span> <span class="hljs-operator">=</span> request.getSession(<span class="hljs-literal">true</span>);            session.setAttribute(<span class="hljs-string">&quot;SPRING_SECURITY_CONTEXT&quot;</span>, securityContext);        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;            System.err.println(<span class="hljs-string">&quot;Error while login&quot;</span>);        &#125;    &#125;    <span class="hljs-type">Authentication</span> <span class="hljs-variable">authentication</span> <span class="hljs-operator">=</span> securityContext.getAuthentication();    <span class="hljs-keyword">if</span> (authentication != <span class="hljs-literal">null</span>) &#123;        jsonObject.put(<span class="hljs-string">&quot;is login&quot;</span>, authentication.isAuthenticated());        jsonObject.put(<span class="hljs-string">&quot;authorities&quot;</span>, authentication.getAuthorities());        jsonObject.put(<span class="hljs-string">&quot;authorities has admin&quot;</span>, authentication.getAuthorities().stream()                .anyMatch(a -&gt; a.getAuthority().toLowerCase(Locale.ROOT).contains(<span class="hljs-string">&quot;admin&quot;</span>)));    &#125;    <span class="hljs-keyword">return</span> jsonObject.toString();&#125;</code></pre><p>above codes will return content-type: application/json</p><h2 id="Full-codes-sample">Full codes sample</h2><p>full my sample codes login programmatically with <a href="/2024/01/spring-boot-custom-passwordEncoder.html">custom password encoder for spring boot</a>.</p><pre><code class="hljs java"><span class="hljs-keyword">package</span> web.user;<span class="hljs-keyword">import</span> java.util.Locale;<span class="hljs-keyword">import</span> java.util.Optional;<span class="hljs-keyword">import</span> org.json.JSONObject;<span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<span class="hljs-keyword">import</span> org.springframework.http.MediaType;<span class="hljs-keyword">import</span> org.springframework.security.authentication.AuthenticationManager;<span class="hljs-keyword">import</span> org.springframework.security.authentication.UsernamePasswordAuthenticationToken;<span class="hljs-keyword">import</span> org.springframework.security.core.Authentication;<span class="hljs-keyword">import</span> org.springframework.security.core.context.SecurityContext;<span class="hljs-keyword">import</span> org.springframework.security.core.context.SecurityContextHolder;<span class="hljs-keyword">import</span> org.springframework.stereotype.Controller;<span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.GetMapping;<span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.PathVariable;<span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;<span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.ResponseBody;<span class="hljs-keyword">import</span> jakarta.servlet.http.HttpServletRequest;<span class="hljs-keyword">import</span> jakarta.servlet.http.HttpServletResponse;<span class="hljs-keyword">import</span> jakarta.servlet.http.HttpSession;<span class="hljs-keyword">import</span> web.CustomPassword;<span class="hljs-meta">@Controller</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">LoginController</span> &#123;    <span class="hljs-meta">@Autowired</span>    <span class="hljs-keyword">private</span> UserService userService;    <span class="hljs-keyword">private</span> CustomPassword passwordEncoder;    <span class="hljs-keyword">private</span> AuthenticationManager authenticationManager;    <span class="hljs-keyword">public</span> <span class="hljs-title function_">LoginController</span><span class="hljs-params">(UserService userService, CustomPassword passwordEncoder,</span><span class="hljs-params">            AuthenticationManager authenticationManager)</span> &#123;        <span class="hljs-built_in">this</span>.userService = userService;        <span class="hljs-built_in">this</span>.passwordEncoder = passwordEncoder;        <span class="hljs-built_in">this</span>.authenticationManager = authenticationManager;    &#125;    <span class="hljs-meta">@RequestMapping(value = &quot;/login/&#123;uuid&#125;&quot;, produces = MediaType.APPLICATION_JSON_VALUE)</span>    <span class="hljs-meta">@ResponseBody</span>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">loginUUID</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable</span> String uuid, HttpServletRequest request, HttpServletResponse response)</span> &#123;        <span class="hljs-type">JSONObject</span> <span class="hljs-variable">jsonObject</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JSONObject</span>();        Optional&lt;User&gt; find = Optional.ofNullable(userService.findUserByUuid(uuid));        <span class="hljs-type">SecurityContext</span> <span class="hljs-variable">securityContext</span> <span class="hljs-operator">=</span> SecurityContextHolder.getContext();        <span class="hljs-keyword">if</span> (find.isPresent()) &#123;            <span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> find.get();            <span class="hljs-type">String</span> <span class="hljs-variable">password</span> <span class="hljs-operator">=</span> passwordEncoder.decode(user.getPassword());            <span class="hljs-type">String</span> <span class="hljs-variable">email</span> <span class="hljs-operator">=</span> user.getEmail();            jsonObject.put(<span class="hljs-string">&quot;email&quot;</span>, user.getEmail());            <span class="hljs-keyword">try</span> &#123;                <span class="hljs-type">UsernamePasswordAuthenticationToken</span> <span class="hljs-variable">loginToken</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UsernamePasswordAuthenticationToken</span>(email,                        password);                <span class="hljs-type">Authentication</span> <span class="hljs-variable">authenticatedUser</span> <span class="hljs-operator">=</span> authenticationManager.authenticate(loginToken);                securityContext.setAuthentication(authenticatedUser);                <span class="hljs-type">HttpSession</span> <span class="hljs-variable">session</span> <span class="hljs-operator">=</span> request.getSession(<span class="hljs-literal">true</span>);                session.setAttribute(<span class="hljs-string">&quot;SPRING_SECURITY_CONTEXT&quot;</span>, securityContext);            &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;                System.err.println(<span class="hljs-string">&quot;Error while login&quot;</span>);            &#125;        &#125;        <span class="hljs-type">Authentication</span> <span class="hljs-variable">authentication</span> <span class="hljs-operator">=</span> securityContext.getAuthentication();        <span class="hljs-keyword">if</span> (authentication != <span class="hljs-literal">null</span>) &#123;            jsonObject.put(<span class="hljs-string">&quot;is login&quot;</span>, authentication.isAuthenticated());            jsonObject.put(<span class="hljs-string">&quot;authorities&quot;</span>, authentication.getAuthorities());            jsonObject.put(<span class="hljs-string">&quot;authorities has admin&quot;</span>, authentication.getAuthorities().stream()                    .anyMatch(a -&gt; a.getAuthority().toLowerCase(Locale.ROOT).contains(<span class="hljs-string">&quot;admin&quot;</span>)));        &#125;        <span class="hljs-keyword">return</span> jsonObject.toString();    &#125;&#125;</code></pre><h2 id="Conclusion">Conclusion</h2><p>this are important part for <strong>Spring Boot login programmatically</strong>, for full spring application project with <strong>Spring Boot login programmatically</strong> implementation you can view my sample project on <a href="https://github.com/dimaslanjaka/Java/tree/master/Spring%20User%20Management">Github</a>.</p>]]></content>
    
    
    <summary type="html">How to implement login programmatically in spring boot java</summary>
    
    
    
    <category term="programming" scheme="https://www.webmanajemen.com/categories/programming/"/>
    
    
    <category term="java" scheme="https://www.webmanajemen.com/tags/java/"/>
    
    <category term="spring-boot" scheme="https://www.webmanajemen.com/tags/spring-boot/"/>
    
  </entry>
  
  <entry>
    <title>custom passwordEncoder for spring boot java</title>
    <link href="https://www.webmanajemen.com/2024/01/spring-boot-custom-passwordEncoder.html"/>
    <id>https://www.webmanajemen.com/2024/01/spring-boot-custom-passwordEncoder.html</id>
    <published>2024-01-18T13:23:22.000Z</published>
    <updated>2024-01-20T09:33:56.000Z</updated>
    
    <content type="html"><![CDATA[<details>  <summary>Spring Boot Custom Password Encoder</summary><h2 id="Introduction">Introduction</h2><ul><li>Brief explanation about the purpose of the article</li><li>Mention that the article will focus on how to implement a custom password encoder in Spring Boot</li></ul><h2 id="Understanding-Password-Encoding">Understanding Password Encoding</h2><ul><li>Define password encoding</li><li>Explain the importance of password encoding in web applications</li><li>Mention common password encoding techniques (e.g. MD5, SHA-256)</li></ul><h2 id="Default-Password-Encoder-in-Spring-Boot">Default Password Encoder in Spring Boot</h2><ul><li>Briefly explain the default password encoder used in Spring Boot</li><li>Mention its limitations and potential security risks</li><li>Provide code snippets showing how to use the default password encoder in Spring Boot</li></ul><h2 id="Implementing-a-Custom-Password-Encoder">Implementing a Custom Password Encoder</h2><ul><li>Explain the need for a custom password encoder in certain scenarios</li><li>Discuss the benefits of using a custom password encoder</li><li>Provide code snippets showing how to implement a custom password encoder in Spring Boot</li></ul><h2 id="Choosing-a-Password-Encoding-Technique">Choosing a Password Encoding Technique</h2><ul><li>Highlight the importance of choosing a strong password encoding technique</li><li>Compare and contrast different password encoding techniques (e.g. bcrypt, Argon2)</li><li>Provide recommendations for choosing the most secure password encoding technique</li></ul><h2 id="Integrating-Custom-Password-Encoder-in-Spring-Boot">Integrating Custom Password Encoder in Spring Boot</h2><ul><li>Discuss how to integrate the custom password encoder in a Spring Boot application</li><li>Provide code snippets showing how to configure the custom password encoder in Spring Boot’s security configuration</li></ul><h2 id="Conclusion">Conclusion</h2><ul><li>Summarize the main points of the article</li><li>Emphasize the importance of using a custom password encoder for better security in Spring Boot applications</li><li>Encourage readers to implement a custom password encoder in their own projects.</li></ul></details><p>Source code custom password encoder for spring</p><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.jetbrains.annotations.NotNull;<span class="hljs-keyword">import</span> org.springframework.security.crypto.password.PasswordEncoder;<span class="hljs-comment">// custom password encoder</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CustomPassword</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">PasswordEncoder</span> &#123;    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> String SALT;    <span class="hljs-keyword">public</span> <span class="hljs-title function_">CustomPassword</span><span class="hljs-params">(String str)</span> &#123;        <span class="hljs-built_in">this</span>.SALT = str;    &#125;    <span class="hljs-keyword">public</span> <span class="hljs-title function_">CustomPassword</span><span class="hljs-params">()</span> &#123;        <span class="hljs-built_in">this</span>.SALT = <span class="hljs-string">&quot;DEFAULT_SALT&quot;</span>;    &#125;    <span class="hljs-keyword">private</span> <span class="hljs-meta">@NotNull</span> String <span class="hljs-title function_">a</span><span class="hljs-params">(String str)</span> &#123;        <span class="hljs-type">int</span>[] f9939a = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[<span class="hljs-number">256</span>];        <span class="hljs-type">int</span>[] iArr = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[<span class="hljs-number">256</span>];        <span class="hljs-type">String</span> <span class="hljs-variable">str2</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.SALT;        <span class="hljs-type">int</span> <span class="hljs-variable">length</span> <span class="hljs-operator">=</span> str2.length();        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">256</span>; i++) &#123;            iArr[i] = str2.charAt(i % length);            f9939a[i] = i;        &#125;        <span class="hljs-type">int</span> <span class="hljs-variable">i2</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i3</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i3 &lt; <span class="hljs-number">256</span>; i3++) &#123;            <span class="hljs-type">int</span>[] iArr2 = f9939a;            <span class="hljs-type">int</span> <span class="hljs-variable">i4</span> <span class="hljs-operator">=</span> iArr2[i3];            i2 = ((i2 + i4) + iArr[i3]) % <span class="hljs-number">256</span>;            iArr2[i3] = iArr2[i2];            iArr2[i2] = i4;        &#125;        <span class="hljs-type">StringBuilder</span> <span class="hljs-variable">sb</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuilder</span>();        <span class="hljs-type">int</span> <span class="hljs-variable">i5</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;        <span class="hljs-type">int</span> <span class="hljs-variable">i6</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i7</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i7 &lt; str.length(); i7++) &#123;            i5 = (i5 + <span class="hljs-number">1</span>) % <span class="hljs-number">256</span>;            <span class="hljs-type">int</span> <span class="hljs-variable">i8</span> <span class="hljs-operator">=</span> f9939a[i5];            i6 = (i6 + i8) % <span class="hljs-number">256</span>;            f9939a[i5] = f9939a[i6];            f9939a[i6] = i8;            sb.append(Character.toChars(f9939a[(f9939a[i5] + i8) % <span class="hljs-number">256</span>] ^ str.charAt(i7)));        &#125;        <span class="hljs-keyword">return</span> sb.toString();    &#125;    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">decode</span><span class="hljs-params">(<span class="hljs-meta">@NotNull</span> CharSequence str)</span> &#123;        <span class="hljs-type">StringBuilder</span> <span class="hljs-variable">sb</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuilder</span>();        <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;        <span class="hljs-keyword">while</span> (i &lt; str.length()) &#123;            <span class="hljs-keyword">try</span> &#123;                <span class="hljs-type">int</span> <span class="hljs-variable">i2</span> <span class="hljs-operator">=</span> i + <span class="hljs-number">2</span>;                sb.append((<span class="hljs-type">char</span>) Integer.parseInt(String.valueOf(str).substring(i, i2), <span class="hljs-number">16</span>));                i = i2;            &#125; <span class="hljs-keyword">catch</span> (Exception e3) &#123;                <span class="hljs-comment">//</span>            &#125;        &#125;        <span class="hljs-keyword">return</span> a(sb.toString());    &#125;    <span class="hljs-meta">@Override</span>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">encode</span><span class="hljs-params">(CharSequence str)</span> &#123;        <span class="hljs-type">String</span> <span class="hljs-variable">a3</span> <span class="hljs-operator">=</span> a(String.valueOf(str));        <span class="hljs-type">StringBuilder</span> <span class="hljs-variable">sb</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuilder</span>();        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; a3.length(); i++) &#123;            sb.append(String.format(<span class="hljs-string">&quot;%02x&quot;</span>, (<span class="hljs-type">int</span>) a3.charAt(i)));        &#125;        <span class="hljs-keyword">return</span> sb.toString();    &#125;    <span class="hljs-meta">@Override</span>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">matches</span><span class="hljs-params">(CharSequence rawPassword, String encodedPassword)</span> &#123;        <span class="hljs-comment">// return encode(rawPassword).contentEquals(encodedPassword);</span>        <span class="hljs-keyword">return</span> decode(encodedPassword).contentEquals(rawPassword);    &#125;&#125;</code></pre><p>example custom password implementation in spring security</p><pre><code class="hljs java"><span class="hljs-keyword">import</span> javax.sql.DataSource;<span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<span class="hljs-keyword">import</span> org.springframework.context.annotation.Bean;<span class="hljs-keyword">import</span> org.springframework.context.annotation.Configuration;<span class="hljs-keyword">import</span> org.springframework.security.authentication.AuthenticationManager;<span class="hljs-keyword">import</span> org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;<span class="hljs-keyword">import</span> org.springframework.security.config.annotation.web.builders.HttpSecurity;<span class="hljs-keyword">import</span> org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;<span class="hljs-keyword">import</span> org.springframework.security.config.annotation.web.configurers.AbstractHttpConfigurer;<span class="hljs-keyword">import</span> org.springframework.security.core.userdetails.UserDetailsService;<span class="hljs-keyword">import</span> org.springframework.security.web.SecurityFilterChain;<span class="hljs-keyword">import</span> org.springframework.security.web.util.matcher.AntPathRequestMatcher;<span class="hljs-meta">@Configuration</span><span class="hljs-meta">@EnableWebSecurity</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SecurityConfig</span> &#123;  <span class="hljs-meta">@Autowired</span>  <span class="hljs-keyword">private</span> UserDetailsService userDetailsService;  <span class="hljs-meta">@Autowired</span>  DataSource dataSource;  <span class="hljs-meta">@Bean</span>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> CustomPassword <span class="hljs-title function_">passwordEncoder</span><span class="hljs-params">()</span> &#123;    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CustomPassword</span>(<span class="hljs-string">&quot;passwordEncoder&quot;</span>);  &#125;  <span class="hljs-meta">@Bean</span>  <span class="hljs-keyword">public</span> AuthenticationManager <span class="hljs-title function_">authenticationManager</span><span class="hljs-params">(HttpSecurity http)</span> <span class="hljs-keyword">throws</span> Exception &#123;    <span class="hljs-keyword">return</span> http.getSharedObject(AuthenticationManagerBuilder.class)        .build();  &#125;  <span class="hljs-meta">@Autowired</span>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">configureGlobal</span><span class="hljs-params">(<span class="hljs-keyword">final</span> AuthenticationManagerBuilder auth)</span> <span class="hljs-keyword">throws</span> Exception &#123;    auth        .userDetailsService(userDetailsService)        .passwordEncoder(passwordEncoder());  &#125;  <span class="hljs-meta">@Bean</span>  <span class="hljs-keyword">public</span> SecurityFilterChain <span class="hljs-title function_">filterChain</span><span class="hljs-params">(HttpSecurity http)</span> <span class="hljs-keyword">throws</span> Exception &#123;    http        .csrf(AbstractHttpConfigurer::disable)        .authorizeHttpRequests((authorize) -&gt; authorize            <span class="hljs-comment">// admin area</span>            .requestMatchers(<span class="hljs-string">&quot;/users/**&quot;</span>).hasRole(<span class="hljs-string">&quot;ADMIN&quot;</span>)            .requestMatchers(<span class="hljs-string">&quot;/add/**&quot;</span>).hasRole(<span class="hljs-string">&quot;ADMIN&quot;</span>)            .requestMatchers(<span class="hljs-string">&quot;/delete/**&quot;</span>).hasRole(<span class="hljs-string">&quot;ADMIN&quot;</span>)            .requestMatchers(<span class="hljs-string">&quot;/edit/**&quot;</span>).hasRole(<span class="hljs-string">&quot;ADMIN&quot;</span>)            <span class="hljs-comment">// need login area</span>            .requestMatchers(<span class="hljs-string">&quot;/me&quot;</span>).authenticated()            <span class="hljs-comment">// allow all non configured endpoint from above</span>            <span class="hljs-comment">// like css, js, and other static assets</span>            .anyRequest().permitAll())        .formLogin(            form -&gt; form                .loginPage(<span class="hljs-string">&quot;/login&quot;</span>)                .loginProcessingUrl(<span class="hljs-string">&quot;/login&quot;</span>)                <span class="hljs-comment">// default success login redirect to dashboard</span>                .defaultSuccessUrl(<span class="hljs-string">&quot;/dashboard&quot;</span>)                .permitAll())        .logout(            logout -&gt; logout                .logoutRequestMatcher(                    <span class="hljs-keyword">new</span> <span class="hljs-title class_">AntPathRequestMatcher</span>(<span class="hljs-string">&quot;/logout&quot;</span>))                .permitAll());    <span class="hljs-keyword">return</span> http.build();  &#125;&#125;</code></pre><p>example custom spring password encoder implementation in user service</p><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Arrays;<span class="hljs-keyword">import</span> java.util.List;<span class="hljs-keyword">import</span> java.util.Optional;<span class="hljs-keyword">import</span> java.util.stream.Collectors;<span class="hljs-keyword">import</span> org.springframework.stereotype.Service;<span class="hljs-keyword">import</span> jakarta.persistence.EntityNotFoundException;<span class="hljs-keyword">import</span> your.<span class="hljs-keyword">package</span>.CustomPassword;<span class="hljs-meta">@SuppressWarnings(&#123; &quot;ArraysAsListWithZeroOrOneArgument&quot;, &quot;OptionalIsPresent&quot;, &quot;FieldMayBeFinal&quot;, &quot;Convert2MethodRef&quot; &#125;)</span><span class="hljs-meta">@Service</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">UserService</span> &#123;    <span class="hljs-keyword">private</span> UserRepository userRepository;    <span class="hljs-keyword">private</span> RoleRepository roleRepository;    <span class="hljs-keyword">private</span> CustomPassword passwordEncoder;    <span class="hljs-keyword">public</span> <span class="hljs-title function_">UserServiceImpl</span><span class="hljs-params">(UserRepository userRepository,</span><span class="hljs-params">            RoleRepository roleRepository,</span><span class="hljs-params">            CustomPassword passwordEncoder)</span> &#123;        <span class="hljs-built_in">this</span>.userRepository = userRepository;        <span class="hljs-built_in">this</span>.roleRepository = roleRepository;        <span class="hljs-built_in">this</span>.passwordEncoder = passwordEncoder;    &#125;    <span class="hljs-comment">// other your methods here</span>&#125;</code></pre><h2 id="Conclusion-2">Conclusion</h2><p>this are important part for <strong>spring boot custom password encoder</strong>, for full spring application project with <strong>spring boot custom password encoder</strong> implementation you can view my sample project on <a href="https://github.com/dimaslanjaka/Java/tree/master/Spring%20User%20Management">Github</a>.</p>]]></content>
    
    
    <summary type="html">Custom PasswordEncoder that works within spring boot java project</summary>
    
    
    
    <category term="programming" scheme="https://www.webmanajemen.com/categories/programming/"/>
    
    
    <category term="java" scheme="https://www.webmanajemen.com/tags/java/"/>
    
    <category term="spring-boot" scheme="https://www.webmanajemen.com/tags/spring-boot/"/>
    
  </entry>
  
  <entry>
    <title>how to setup local site domain vhost xampp windows 2024</title>
    <link href="https://www.webmanajemen.com/2024/01/how-to-setup-local-domain-vhost-xampp-windows.html"/>
    <id>https://www.webmanajemen.com/2024/01/how-to-setup-local-domain-vhost-xampp-windows.html</id>
    <published>2024-01-05T10:20:40.000Z</published>
    <updated>2024-01-05T10:20:40.000Z</updated>
    
    <content type="html"><![CDATA[<p>How to setup vhost config on xampp for local site domain, support for multiple local site.</p><h2 id="Setup-hosts">Setup hosts</h2><pre><code class="hljs php"><span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span>    localhost<span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span>    mysite-dev.com<span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span>    anothersite-dev.com</code></pre><h2 id="Setup-httpd-vhost-conf">Setup httpd-vhost.conf</h2><pre><code class="hljs conf">&lt;VirtualHost *:80&gt;  DocumentRoot C:/xampp/htdocs/  ServerName localhost&lt;/VirtualHost&gt;&lt;VirtualHost *:80&gt;    ServerName mysite-dev.com # domain name    DocumentRoot &quot;D:/Workspaces/PHP/ISP&quot;    &lt;Directory &quot;D:/Workspaces/PHP/ISP&quot;&gt;        Options Indexes FollowSymLinks        # AllowOverride All      # Deprecated        # Order Allow,Deny       # Deprecated        # Allow from all         # Deprecated        # --New way of doing it        Require all granted    &lt;/Directory&gt;&lt;/VirtualHost&gt;</code></pre><p>you can add more virtual host, like:</p><blockquote><p>using forward slash <code>/</code> instead of back slash <code>\</code></p></blockquote><pre><code class="hljs conf">&lt;VirtualHost *:80&gt;    ServerName yourdomain.tld    DocumentRoot &quot;your/directory&quot;    &lt;Directory &quot;your/directory&quot;&gt;        Options Indexes FollowSymLinks        Require all granted    &lt;/Directory&gt;&lt;/VirtualHost&gt;</code></pre><h2 id="Setup-httpd-xampp-conf">Setup httpd-xampp.conf</h2><p>this required for <code>mod_rewrite</code> module works. add new line:</p><pre><code class="hljs conf">&lt;Directory &quot;D:/Workspaces/PHP/ISP&quot;&gt;    AllowOverride All    Require all granted&lt;/Directory&gt;</code></pre><blockquote><p>change <strong>D:/Workspaces/PHP/ISP</strong> to your directory</p></blockquote><p>All sets, try start xampp.</p>]]></content>
    
    
    <summary type="html">how to setup local site domain vhost xampp windows 2024</summary>
    
    
    
    <category term="programming" scheme="https://www.webmanajemen.com/categories/programming/"/>
    
    
    <category term="php" scheme="https://www.webmanajemen.com/tags/php/"/>
    
    <category term="apache" scheme="https://www.webmanajemen.com/tags/apache/"/>
    
    <category term="xampp" scheme="https://www.webmanajemen.com/tags/xampp/"/>
    
  </entry>
  
  <entry>
    <title>Geckoview cangoback equivalent of android webview.canGoBack</title>
    <link href="https://www.webmanajemen.com/2023/11/geckoview-equivalent-cangoback-android-webview.html"/>
    <id>https://www.webmanajemen.com/2023/11/geckoview-equivalent-cangoback-android-webview.html</id>
    <published>2023-11-10T23:41:10.000Z</published>
    <updated>2023-11-10T23:46:25.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="How-can-i-use-canGoBack-on-GeckoView">How can i use canGoBack() on GeckoView?</h2><p>below is sample default android webview <code>canGoBack()</code> implemention</p><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onBackPressed</span><span class="hljs-params">()</span> &#123;    <span class="hljs-keyword">if</span> (webView.canGoBack()) &#123;        webView.goBack();    &#125; <span class="hljs-keyword">else</span> &#123;        <span class="hljs-built_in">super</span>.onBackPressed();    &#125;&#125;</code></pre><p>on geckoview</p><blockquote><p>You need to set a navigation delegate on the gecko session and use a global boolean to keep track of whether it can go back or not.</p></blockquote><h2 id="Java">Java</h2><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-type">boolean</span> <span class="hljs-variable">canGoBack</span> <span class="hljs-operator">=</span> <span class="hljs-literal">false</span>;<span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MainActivity</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AppCompatActivity</span> &#123;   <span class="hljs-meta">@Override</span>   <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onCreate</span><span class="hljs-params">(Bundle savedInstanceState)</span> &#123;       <span class="hljs-built_in">super</span>.onCreate(savedInstanceState);       session.setNavigationDelegate(<span class="hljs-keyword">new</span> <span class="hljs-title class_">GeckoSession</span>.NavigationDelegate() &#123;                  <span class="hljs-meta">@Override</span>                  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onCanGoBack</span><span class="hljs-params">(<span class="hljs-meta">@NonNull</span> GeckoSession session, <span class="hljs-type">boolean</span> canGoBack)</span> &#123;                      MainActivity.<span class="hljs-built_in">this</span>.canGoBack = canGoBack;                  &#125;         &#125;);   &#125;&#125;</code></pre><h2 id="Kotlin">Kotlin</h2><pre><code class="hljs kotlin">session.navigationDelegate = <span class="hljs-keyword">object</span> : NavigationDelegate &#123;    <span class="hljs-keyword">override</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">onCanGoBack</span><span class="hljs-params">(session: <span class="hljs-type">GeckoSession</span>, canGoBack: <span class="hljs-type">Boolean</span>)</span></span> &#123;        <span class="hljs-comment">// equivalent of webview.canGoBack</span>        <span class="hljs-keyword">this</span><span class="hljs-symbol">@MainActivity</span>.canGoBack = canGoBack    &#125;&#125;</code></pre>]]></content>
    
    
    <summary type="html">Geckoview cangoback equivalent of android webview.canGoBack How can i use canGoBack on GeckoView? below is sample default android webview canGoBack implemention canGoBack public void onBackPressed if </summary>
    
    
    
    <category term="programming" scheme="https://www.webmanajemen.com/categories/programming/"/>
    
    
    <category term="android" scheme="https://www.webmanajemen.com/tags/android/"/>
    
    <category term="webview" scheme="https://www.webmanajemen.com/tags/webview/"/>
    
    <category term="java" scheme="https://www.webmanajemen.com/tags/java/"/>
    
    <category term="kotlin" scheme="https://www.webmanajemen.com/tags/kotlin/"/>
    
    <category term="geckoview" scheme="https://www.webmanajemen.com/tags/geckoview/"/>
    
  </entry>
  
  <entry>
    <title>List referrer of original traffic from android</title>
    <link href="https://www.webmanajemen.com/2023/11/list-referrer-of-original-traffic-from-android.html"/>
    <id>https://www.webmanajemen.com/2023/11/list-referrer-of-original-traffic-from-android.html</id>
    <published>2023-11-10T01:36:29.000Z</published>
    <updated>2023-11-10T01:36:29.000Z</updated>
    
    <content type="html"><![CDATA[<p>list original traffic referrer from android (parsed with regex <code>(android-app:[\w\/\.]+)</code>)</p><pre><code class="hljs log">android-app://arun.com.chromerandroid-app://com.andrewshu.android.redditandroid-app://com.andrewshu.android.redditdonationandroid-app://com.android.chromeandroid-app://com.google.android.apps.genie.geniewidgetandroid-app://com.google.android.apps.plus/https/plus.url.google.com/mobileappandroid-app://com.google.android.apps.social.spacesandroid-app://com.google.android.googlequicksearchboxandroid-app://com.google.android.googlequicksearchbox/googlequicksearchbox/suggestandroid-app://com.google.android.googlequicksearchbox/https/www.google.comandroid-app://com.guardianandroid-app://com.hanista.mobogramandroid-app://com.innologica.inoreaderandroid-app://com.laurencedawson.reddit_syncandroid-app://com.laurencedawson.reddit_sync.devandroid-app://com.laurencedawson.reddit_sync.proandroid-app://com.levelup.palabreandroid-app://com.linkedin.androidandroid-app://com.noinnion.android.greader.readerandroid-app://com.noinnion.android.greader.readerproandroid-app://com.paladin.auto.car.news.reviewsandroid-app://com.pinterestandroid-app://com.Slackandroid-app://com.stickypassword.androidandroid-app://com.tumblrandroid-app://com.twitpane.premiumandroid-app://com.twitter.androidandroid-app://de.idealo.androidandroid-app://ir.felegramandroid-app://org.telegram.messengerandroid-app://org.telegram.plus</code></pre>]]></content>
    
    
    <summary type="html">List referrer of original traffic from android list original traffic referrer from android parsed with regex android-app:[&#92;w&#92;/&#92;.] android-app:[&#92;w&#92;/&#92;.] android-app://arun.com.chromerandroid-app://com.a</summary>
    
    
    
    <category term="programming" scheme="https://www.webmanajemen.com/categories/programming/"/>
    
    
    <category term="seo" scheme="https://www.webmanajemen.com/tags/seo/"/>
    
  </entry>
  
  <entry>
    <title>What does google-services.json really do?</title>
    <link href="https://www.webmanajemen.com/2023/10/what-does-google-servicesjson-really-do.html"/>
    <id>https://www.webmanajemen.com/2023/10/what-does-google-servicesjson-really-do.html</id>
    <published>2023-10-30T01:19:17.000Z</published>
    <updated>2023-10-30T01:28:11.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="What-is-this-file-really-for">What is this file really for</h2><p><strong>google-services.json</strong> contains developer credentials and configuration settings, which is needed to verify while connecting with GoogleApiClient. Though your service is working fine with your test device as it is detecting your developer account but after releasing your app in public, it will not work without the json file. So don’t delete it.</p><p><strong>The Official Documentation says:</strong></p><p>The application builds a GoogleApiClient, specifying which scopes and APIs the application will access. When the GoogleApiClient connects, the user is signed in.</p><p>See the <a href="https://developers.google.com/identity/sign-in/android/start">how it works</a> section</p><h2 id="How-does-google-services-json-file-affects-your-android-studio-project">How does google-services.json file affects your android studio project?</h2><p>I investigated a bit regarding the google-services plugin and json and found the sources to this plugin.</p><h2 id="First-things-first">First things first</h2><p>The gradle-plugin google-services that is referenced by classpath and with apply is a build-time plugin only! So it only influences the build-process of your app, but not the runtime-process!</p><p>This plugin is only meant as a quickstart-helper to integrating Google-services quickly in your app. Obviously, the process is somewhat convoluted and not documented, so Google should have made it clear what this process does.</p><p>In fact, I found the source code for the plugin version com.google.gms:google-services:1.4.0-beta3 and didnt find any specific reference in it regarding appinvites nor did I find any Google API for App Invites! (But maybe it just uses a generic API project with its project id, I didnt try this)</p><h2 id="What-it-does">What it does</h2><p>The google-services gradle-plugin looks for the mentioned google-services.json file in your app-module. Then it looks for configured settings like project-id’s and tracking-id’s and such, generated by the Google API developer console into the google-services.json file. From the settings it found, Android resource values are generated into the following path:</p><pre><code class="hljs kotlin"><span class="hljs-string">&quot;<span class="hljs-variable">$project</span>.buildDir/generated/res/google-services/<span class="hljs-variable">$variant</span>.dirName/values/values.xml&quot;</span></code></pre><p>For example for a debug-build of your app:</p><blockquote><p>just in short for second url, if you add google-services.json in your project there must be a auto-generated <code>google-services</code> folder for <code>debug</code> variant in this path</p></blockquote><pre><code class="hljs kotlin"><span class="hljs-string">&quot;app/build/generated/res/google-services/debug/values/values.xml&quot;</span></code></pre><p>E.g. if you followed the GCM tutorial, the JSON file would include the API project’s id as the following android-resource:</p><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">string</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;gcm_defaultSenderId&quot;</span>&gt;</span>project-id<span class="hljs-tag">&lt;/<span class="hljs-name">string</span>&gt;</span></code></pre><p>So this plugin and JSON file are not essential to running or publishing your app, it is just a quickstart helper to generate some basic android-resource files for easier integration of specific Google API features.</p><p>Notice in the source code referenced below that the google-services plugin always generates those android-resources for every app-variant that is defined in your app/build.gradle.</p><p>If you don’t want that, you should use those generated resources in the app-variants you want, and delete the others. Don’t forget to remove the google-services plugin apply from app/build.gradle, or else it will be regenerated for all app-variants.</p><h2 id="What-it-does-not">What it does not</h2><p>This plugin and JSON-file do NOT directly influence the inner workings of said Google-features for your app! If you already have followed older tutorials on <a href="http://developer.android.com">developer.android.com</a> on how to integrate e.g. GCM or Google Analytics, then you don’t even need to integrate either the gradle-plugin google-services or the google-services.json file!</p><h2 id="Notice-about-where-I-found-the-sources">Notice about where I found the sources</h2><p>After you integrated the google-services gradle-plugin and when sync your project, Gradle automatically downloads the google-services dependency to a path similar to this (on Windows, you might need to look into your home/.gradle for Linux):</p><pre><code class="hljs plaintext">C:\Users\user\.gradle\caches\modules-2\files-2.1\com.google.gms\google-services\1.4.0-beta3\f1580f62e3be313eba041ce19b64fd3f44cf8951\google-services-1.4.0-beta3-sources.jar</code></pre><p>If you extract this jar-file, you will find two files:</p><pre><code class="hljs plaintext">GoogleServicesPlugin.groovyGoogleServicesTask.java</code></pre><p>which contain the plain source code of the gradle-plugin.</p><pre><code class="hljs plaintext">GoogleServicesPlugin.groovy</code></pre><p>contains the handling of the app-variants and basic definitions of paths etc.</p><pre><code class="hljs plaintext">GoogleServicesTask.java</code></pre><p>contains the actual task-definition, look for the following method to see what it really does:</p><pre><code class="hljs java"><span class="hljs-meta">@TaskAction</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">action</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException &#123;</code></pre><h2 id="What-to-do-to-make-it-done">What to do, to make it done?</h2><p>add google-services dependency in <code>project_level</code> build.gradle, you can also use <code>version 3.0.0</code> if you are using app_compact library.</p><pre><code class="hljs gradle"><span class="hljs-comment">// Top-level build.gradle file</span><span class="hljs-keyword">classpath</span> <span class="hljs-string">&#x27;com.google.gms:google-services:2.1.2&#x27;</span></code></pre><p>now in <code>app_level</code> build.gradle you have to add at the <strong>bottom</strong>.</p><pre><code class="hljs gradle"><span class="hljs-comment">// app-level build.gradle file</span>apply plugin: <span class="hljs-string">&#x27;com.google.gms.google-services&#x27;</span></code></pre><p><strong>Note:</strong> Adding this line at the bottom of the gradle file is really important. Otherwise Gradle builds won’t give you any errors, but it won’t just work properly.</p><h2 id="Where-to-put-google-service-json-file-in-your-structure">Where to put google-service.json file in your structure.</h2><p>case 1.) if you have no build_flavor just put it in inside <code>/app/google-service.json</code> folder.</p><p>case 2.) if you have multiple build_flavor and you have different-different google_services.json files put inside <code>app/src/build_flavor/google-service.json</code>.</p><p>case 3.) if you have multiple build_flavor and you have single google_services.json file put inside <code>app/google-service.json</code>.</p>]]></content>
    
    
    <summary type="html">Android - What does google-services.json really do?</summary>
    
    
    
    <category term="programming" scheme="https://www.webmanajemen.com/categories/programming/"/>
    
    
    <category term="android" scheme="https://www.webmanajemen.com/tags/android/"/>
    
    <category term="json" scheme="https://www.webmanajemen.com/tags/json/"/>
    
  </entry>
  
  <entry>
    <title>android webview get content height</title>
    <link href="https://www.webmanajemen.com/2023/10/android-webview-get-content-height.html"/>
    <id>https://www.webmanajemen.com/2023/10/android-webview-get-content-height.html</id>
    <published>2023-10-28T21:43:36.000Z</published>
    <updated>2023-11-10T23:46:25.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Basic-methods">Basic methods</h2><p>Basic methods of Various ways to get the height of a Webview on Android. Nothing really works on all cases</p><pre><code class="hljs kotlin"><span class="hljs-keyword">import</span> android.view.ViewTreeObserver<span class="hljs-keyword">import</span> android.webkit.JavascriptInterface<span class="hljs-keyword">import</span> android.webkit.WebView<span class="hljs-keyword">import</span> android.webkit.WebViewClient<span class="hljs-comment">// Try 1</span><span class="hljs-keyword">private</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">getHeightFromDocumentBodyScrollHeight</span><span class="hljs-params">(webView: <span class="hljs-type">WebView</span>, setHeight: (<span class="hljs-type">Int</span>)-&gt;<span class="hljs-type">Unit</span>)</span></span> &#123;    webView.webViewClient = <span class="hljs-keyword">object</span> : WebViewClient() &#123;        <span class="hljs-keyword">override</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">onPageFinished</span><span class="hljs-params">(view: <span class="hljs-type">WebView</span>?, url: <span class="hljs-type">String</span>?)</span></span> &#123;            view?.let &#123;                it.settings.javaScriptEnabled = <span class="hljs-literal">true</span>                it.addJavascriptInterface(WebAppInterface(it, setHeight), <span class="hljs-string">&quot;AndroidGetHeightFunction&quot;</span>)                it.loadUrl(<span class="hljs-string">&quot;javascript:AndroidGetHeightFunction.resize(document.body.scrollHeight)&quot;</span>)            &#125;        &#125;    &#125;&#125;<span class="hljs-keyword">class</span> <span class="hljs-title class_">WebAppInterface</span>(<span class="hljs-keyword">private</span> <span class="hljs-keyword">val</span> webView: WebView, <span class="hljs-keyword">val</span> setHeight: (<span class="hljs-built_in">Int</span>)-&gt;<span class="hljs-built_in">Unit</span>) &#123;    <span class="hljs-meta">@JavascriptInterface</span>    <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">resize</span><span class="hljs-params">(height: <span class="hljs-type">Float</span>)</span></span> &#123;        webView.post &#123;            <span class="hljs-keyword">val</span> h = Math.floor((height * webView.context.resources.displayMetrics.density).toDouble()).toInt()            setHeight(h)            webView.settings.javaScriptEnabled = <span class="hljs-literal">false</span>        &#125;    &#125;&#125;<span class="hljs-comment">// Try 2</span><span class="hljs-keyword">private</span> <span class="hljs-keyword">val</span> heightWebViewJSScript = <span class="hljs-string">&quot;(function() &#123;var pageHeight = 0;function findHighestNode(nodesList) &#123; for (var i = nodesList.length - 1; i &gt;= 0; i--) &#123;if (nodesList[i].scrollHeight &amp;&amp; nodesList[i].clientHeight) &#123;var elHeight = Math.max(nodesList[i].scrollHeight, nodesList[i].clientHeight);pageHeight = Math.max(elHeight, pageHeight);&#125;if (nodesList[i].childNodes.length) findHighestNode(nodesList[i].childNodes);&#125;&#125;findHighestNode(document.documentElement.childNodes); return pageHeight;&#125;)()&quot;</span><span class="hljs-keyword">private</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">getHeightWithJavascriptEvaluation</span><span class="hljs-params">(webView: <span class="hljs-type">WebView</span>, setHeight: (<span class="hljs-type">Int</span>)-&gt;<span class="hljs-type">Unit</span>)</span></span> &#123;    webView.settings.javaScriptEnabled = <span class="hljs-literal">true</span>    webView.webViewClient = <span class="hljs-keyword">object</span> : WebViewClient() &#123;        <span class="hljs-keyword">override</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">onPageFinished</span><span class="hljs-params">(view: <span class="hljs-type">WebView</span>, url: <span class="hljs-type">String</span>)</span></span> &#123;            webView.evaluateJavascript(heightWebViewJSScript) &#123; height -&gt;                <span class="hljs-keyword">val</span> h = Math.floor((height.toInt() * webView.context.resources.displayMetrics.density).toDouble()).toInt()                setHeight(h)                webView.settings.javaScriptEnabled = <span class="hljs-literal">false</span>            &#125;        &#125;    &#125;&#125;<span class="hljs-comment">// Try 3</span><span class="hljs-keyword">private</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">getHeightWithViewTreeObserver</span><span class="hljs-params">(webView: <span class="hljs-type">WebView</span>, setHeight: (<span class="hljs-type">Int</span>)-&gt;<span class="hljs-type">Unit</span>)</span></span> &#123;        webView.viewTreeObserver.addOnPreDrawListener(<span class="hljs-keyword">object</span> : ViewTreeObserver.OnPreDrawListener &#123;            <span class="hljs-keyword">override</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">onPreDraw</span><span class="hljs-params">()</span></span>: <span class="hljs-built_in">Boolean</span> &#123;                <span class="hljs-keyword">val</span> height = webView.measuredHeight                <span class="hljs-keyword">if</span> (height != <span class="hljs-number">0</span>) &#123;                    <span class="hljs-keyword">val</span> h = Math.floor((height * webView.context.resources.displayMetrics.density).toDouble()).toInt()                    setHeight(height)                    webView.viewTreeObserver.removeOnPreDrawListener(<span class="hljs-keyword">this</span>)                &#125;                <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>            &#125;        &#125;)&#125;<span class="hljs-comment">// Try 4</span><span class="hljs-keyword">private</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">getHeightWithLayoutChangeListener</span><span class="hljs-params">(webView: <span class="hljs-type">WebView</span>, setHeight: (<span class="hljs-type">Int</span>)-&gt;<span class="hljs-type">Unit</span>)</span></span> &#123;    webView.addOnLayoutChangeListener&#123; _, _, _, _, _, _, _, _, _ -&gt;        setHeight(webView.contentHeight)    &#125;&#125;</code></pre>]]></content>
    
    
    <summary type="html">script to get content height of android webview</summary>
    
    
    
    <category term="programming" scheme="https://www.webmanajemen.com/categories/programming/"/>
    
    
    <category term="android" scheme="https://www.webmanajemen.com/tags/android/"/>
    
    <category term="webview" scheme="https://www.webmanajemen.com/tags/webview/"/>
    
    <category term="java" scheme="https://www.webmanajemen.com/tags/java/"/>
    
    <category term="kotlin" scheme="https://www.webmanajemen.com/tags/kotlin/"/>
    
  </entry>
  
  <entry>
    <title>Android SDK API List</title>
    <link href="https://www.webmanajemen.com/2023/10/android-sdk-api-list.html"/>
    <id>https://www.webmanajemen.com/2023/10/android-sdk-api-list.html</id>
    <published>2023-10-28T03:33:48.000Z</published>
    <updated>2023-10-28T03:33:48.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://github.com/dimaslanjaka/source-posts/assets/12471057/7254c426-aea8-41bc-aad5-c06eee780162" alt=""></p><ul><li>API 10 (Gingerbread) - 0.3%</li><li>API 15 (Ice Cream Sandwich) - 0.3%</li><li>API 16 (Jellybean) - 1.2%</li><li>API 17 (Jellybean) - 1.5%</li><li>API 18 (Jellybean) - 0.5%</li><li>API 19 (KitKat) - 6.9%</li><li>API 21 (Lollipop) - 3.0%</li><li>API 22 (Lollipop) - 11.5%</li><li>API 23 (Marshmallow) - 16.9%</li><li>API 24 (Nougat) - 11.4%</li><li>API 25 (Nougat) - 7.8%</li><li>API 26 (Oreo) - 12.9%</li><li>API 27 (Oreo) - 15.4%</li><li>API 28 (Pie) - 10.4%</li></ul>]]></content>
    
    
    <summary type="html">Collection list of android SDK API</summary>
    
    
    
    <category term="programming" scheme="https://www.webmanajemen.com/categories/programming/"/>
    
    
    <category term="android" scheme="https://www.webmanajemen.com/tags/android/"/>
    
  </entry>
  
  <entry>
    <title>Kill gradle daemon process</title>
    <link href="https://www.webmanajemen.com/2023/10/kill-gradle-daemon-process.html"/>
    <id>https://www.webmanajemen.com/2023/10/kill-gradle-daemon-process.html</id>
    <published>2023-10-27T15:16:52.000Z</published>
    <updated>2023-11-14T17:28:06.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://github.com/dimaslanjaka/source-posts/assets/12471057/0801b88a-5332-4bfa-94f1-f3e52972016d" alt=""></p><h2 id="Windows">Windows</h2><h3 id="Using-WMIC">Using WMIC</h3><p>kill gradle processes using <code>WMIC</code></p><pre><code class="hljs cmd">WMIC PROCESS where &quot;Name like &#x27;java%&#x27; AND CommandLine like &#x27;<span class="hljs-variable">%GradleDaemon%</span>&#x27;&quot; <span class="hljs-keyword">Call</span> TerminateWMIC PROCESS where &quot;Name like &#x27;java%&#x27; AND CommandLine like &#x27;<span class="hljs-variable">%kotlin%</span>&#x27;&quot; <span class="hljs-keyword">Call</span> TerminateWMIC PROCESS where &quot;Name like &#x27;java%&#x27; AND CommandLine like &#x27;<span class="hljs-variable">%java%</span>&#x27;&quot; <span class="hljs-keyword">Call</span> Terminate</code></pre><p>in batch file remove percent symbol <code>%</code></p><pre><code class="hljs cmd"><span class="hljs-keyword">call</span> wmic process where &quot;name like &#x27;java.exe&#x27;&quot; delete</code></pre><h3 id="Using-Taskkill">Using Taskkill</h3><p>kill gradle processes using <code>taskkill</code></p><pre><code class="hljs cmd"><span class="hljs-built_in">taskkill</span> /f /im java.exe<span class="hljs-built_in">taskkill</span> /f /im javaw.exe</code></pre><h2 id="Linux">Linux</h2><pre><code class="hljs bash">pkill -f <span class="hljs-string">&#x27;.*GradleDaemon.*&#x27;</span></code></pre>]]></content>
    
    
    <summary type="html">command to kill gradle daemon processes</summary>
    
    
    
    <category term="programming" scheme="https://www.webmanajemen.com/categories/programming/"/>
    
    
    <category term="shell" scheme="https://www.webmanajemen.com/tags/shell/"/>
    
    <category term="java" scheme="https://www.webmanajemen.com/tags/java/"/>
    
    <category term="gradle" scheme="https://www.webmanajemen.com/tags/gradle/"/>
    
  </entry>
  
  <entry>
    <title>Gradle script to generate proguard dictionaries each build</title>
    <link href="https://www.webmanajemen.com/2023/10/gradle-generate-proguard-dictionaries-each-build.html"/>
    <id>https://www.webmanajemen.com/2023/10/gradle-generate-proguard-dictionaries-each-build.html</id>
    <published>2023-10-25T07:32:33.000Z</published>
    <updated>2023-10-30T01:19:17.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Gradle-task-to-generate-proguard-dictonary">Gradle task to generate proguard dictonary</h2><h3 id="Always-overwrite-existing-generated-dictionary">Always overwrite existing generated dictionary</h3><pre><code class="hljs gradle"><span class="hljs-keyword">def</span> dictDest = <span class="hljs-keyword">new</span> <span class="hljs-keyword">File</span>(<span class="hljs-string">&#x27;build/builddict.txt&#x27;</span>)tasks.register(<span class="hljs-string">&#x27;genDict&#x27;</span>) &#123;    outputs.<span class="hljs-keyword">file</span>(dictDest)    <span class="hljs-keyword">doLast</span> &#123;        <span class="hljs-keyword">if</span> (dictDest.exists()) <span class="hljs-keyword">return</span>        <span class="hljs-keyword">def</span> r = <span class="hljs-keyword">new</span> Random()        <span class="hljs-keyword">println</span>(r)        <span class="hljs-keyword">def</span> begin = r.nextInt(<span class="hljs-number">1000</span>) + <span class="hljs-number">0</span>x0100        <span class="hljs-keyword">def</span> end = begin + <span class="hljs-number">0</span>x40000        <span class="hljs-keyword">println</span>(<span class="hljs-string">&quot;end: &quot;</span> + end)        <span class="hljs-keyword">def</span> chars = (begin..end)                .<span class="hljs-keyword">findAll</span> &#123; Character.isValidCodePoint(it) &amp;&amp; Character.isJavaIdentifierPart(it) &#125;                .<span class="hljs-keyword">collect</span> &#123; String.valueOf(Character.toChars(it)) &#125;        <span class="hljs-keyword">println</span>(<span class="hljs-string">&quot;chars: &quot;</span> + chars)        <span class="hljs-keyword">int</span> max = chars.<span class="hljs-keyword">size</span>()        <span class="hljs-keyword">println</span>(max)        <span class="hljs-keyword">def</span> start = []        <span class="hljs-keyword">def</span> dict = []        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; max; i++) &#123;            <span class="hljs-keyword">char</span> c = chars.get(i).charAt(<span class="hljs-number">0</span>)            <span class="hljs-keyword">if</span> (Character.isJavaIdentifierStart(c)) &#123;                start &lt;&lt; String.valueOf(c)            &#125;        &#125;        <span class="hljs-keyword">println</span>(start.<span class="hljs-keyword">size</span>())        <span class="hljs-keyword">def</span> f = outputs.files.getSingleFile()        f.getParentFile().mkdirs()        f.<span class="hljs-keyword">withWriter</span>(<span class="hljs-string">&quot;UTF-8&quot;</span>) &#123;            it.<span class="hljs-keyword">write</span>(start.<span class="hljs-keyword">join</span>(System.lineSeparator()))            it.<span class="hljs-keyword">write</span>()        &#125;    &#125;&#125;</code></pre><h3 id="Prevent-overwriting-existing-generated-dictionary">Prevent overwriting existing generated dictionary</h3><pre><code class="hljs gradle"><span class="hljs-comment">// tell others this file cannot be replaced (final)</span><span class="hljs-keyword">final</span> <span class="hljs-keyword">def</span> dictDest = <span class="hljs-keyword">project</span>.<span class="hljs-keyword">file</span>(<span class="hljs-string">&quot;build/builddict.txt&quot;</span>)tasks.register(<span class="hljs-string">&quot;genDict&quot;</span>) &#123;    <span class="hljs-comment">// prevent duplicate</span>    <span class="hljs-keyword">println</span> <span class="hljs-string">&quot;$dictDest exists $&#123;dictDest.exists()&#125;&quot;</span>    <span class="hljs-keyword">if</span> (!dictDest.exists()) &#123;        outputs.<span class="hljs-keyword">file</span>(dictDest)        <span class="hljs-keyword">doLast</span> &#123;            <span class="hljs-keyword">def</span> r = <span class="hljs-keyword">new</span> Random()            <span class="hljs-keyword">println</span>(r)            <span class="hljs-keyword">def</span> begin = r.nextInt(<span class="hljs-number">1000</span>) + <span class="hljs-number">0</span>x0100            <span class="hljs-keyword">def</span> end = begin + <span class="hljs-number">0</span>x40000            <span class="hljs-keyword">println</span>(<span class="hljs-string">&quot;end: &quot;</span> + end)            <span class="hljs-keyword">def</span> chars = (begin..end)                    .<span class="hljs-keyword">findAll</span> &#123; Character.isValidCodePoint(it) &amp;&amp; Character.isJavaIdentifierPart(it) &#125;                    .<span class="hljs-keyword">collect</span> &#123; String.valueOf(Character.toChars(it)) &#125;            <span class="hljs-keyword">println</span>(<span class="hljs-string">&quot;chars: &quot;</span> + chars)            <span class="hljs-keyword">int</span> max = chars.<span class="hljs-keyword">size</span>()            <span class="hljs-keyword">println</span>(max)            <span class="hljs-keyword">def</span> start = []            <span class="hljs-keyword">def</span> dict = []            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; max; i++) &#123;                <span class="hljs-keyword">char</span> c = chars.get(i).charAt(<span class="hljs-number">0</span>)                <span class="hljs-keyword">if</span> (Character.isJavaIdentifierStart(c)) &#123;                    start &lt;&lt; String.valueOf(c)                &#125;            &#125;            <span class="hljs-keyword">println</span>(start.<span class="hljs-keyword">size</span>())            <span class="hljs-keyword">def</span> f = outputs.files.getSingleFile()            f.getParentFile().mkdirs()            f.<span class="hljs-keyword">withWriter</span>(<span class="hljs-string">&quot;UTF-8&quot;</span>) &#123;                it.<span class="hljs-keyword">write</span>(start.<span class="hljs-keyword">join</span>(System.lineSeparator()))                it.<span class="hljs-keyword">write</span>()            &#125;        &#125;    &#125;&#125;</code></pre><p>run manual with <code>./gradlew genDict</code> or <code>bash ./gradlew genDict</code></p><p>but you can automated generator dictionary using <code>afterEvaluate</code></p><pre><code class="hljs gradle">afterEvaluate &#123;    <span class="hljs-comment">// each variant depends on `genDict` task</span>    android.applicationVariants.all &#123; variant -&gt;        <span class="hljs-keyword">if</span> (variant.name.endsWith(<span class="hljs-string">&#x27;Release&#x27;</span>))            variant.javaCompileProvider.configure &#123;                dependsOn <span class="hljs-string">&#x27;genDict&#x27;</span>            &#125;    &#125;&#125;</code></pre><p>in new API Androig Gradle Plugin v8</p><pre><code class="hljs gradle">afterEvaluate &#123;    <span class="hljs-comment">// each variant depends on `genDict` task</span>    android.applicationVariants.configureEach &#123; variant -&gt;        <span class="hljs-keyword">if</span> (variant.name.endsWith(<span class="hljs-string">&#x27;Release&#x27;</span>))            variant.javaCompileProvider.configure &#123;                dependsOn <span class="hljs-string">&#x27;genDict&#x27;</span>            &#125;    &#125;&#125;</code></pre><p>in your proguard rules dont forget put</p><pre><code class="hljs proguard">-obfuscationdictionary build/dict.txt-classobfuscationdictionary build/dict.txt-packageobfuscationdictionary build/dict.txt</code></pre><h2 id="My-working-scripts">My working scripts</h2><p>put in <code>app/build.gradle</code></p><pre><code class="hljs gradle"><span class="hljs-keyword">def</span> dictDest = <span class="hljs-keyword">new</span> <span class="hljs-keyword">File</span>(<span class="hljs-string">&#x27;.&#x27;</span>, <span class="hljs-string">&#x27;build/builddict.txt&#x27;</span>)tasks.register(<span class="hljs-string">&#x27;genDict&#x27;</span>) &#123;    outputs.<span class="hljs-keyword">file</span>(dictDest)    <span class="hljs-keyword">doLast</span> &#123;        <span class="hljs-comment">// prevent rewrite</span>        <span class="hljs-keyword">if</span> (dictDest.exists()) <span class="hljs-keyword">return</span>        <span class="hljs-keyword">def</span> r = <span class="hljs-keyword">new</span> Random()        <span class="hljs-keyword">println</span>(r)        <span class="hljs-keyword">def</span> begin = r.nextInt(<span class="hljs-number">1000</span>) + <span class="hljs-number">0</span>x0100        <span class="hljs-keyword">def</span> end = begin + <span class="hljs-number">0</span>x40000        <span class="hljs-keyword">println</span>(<span class="hljs-string">&quot;end: &quot;</span> + end)        <span class="hljs-keyword">def</span> chars = (begin..end)                .<span class="hljs-keyword">findAll</span> &#123; Character.isValidCodePoint(it) &amp;&amp; Character.isJavaIdentifierPart(it) &#125;                .<span class="hljs-keyword">collect</span> &#123; String.valueOf(Character.toChars(it)) &#125;        <span class="hljs-keyword">println</span>(<span class="hljs-string">&quot;chars: &quot;</span> + chars)        <span class="hljs-keyword">int</span> max = chars.<span class="hljs-keyword">size</span>()        <span class="hljs-keyword">println</span>(max)        <span class="hljs-keyword">def</span> start = []        <span class="hljs-keyword">def</span> dict = []        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; max; i++) &#123;            <span class="hljs-keyword">char</span> c = chars.get(i).charAt(<span class="hljs-number">0</span>)            <span class="hljs-keyword">if</span> (Character.isJavaIdentifierStart(c)) &#123;                start &lt;&lt; String.valueOf(c)            &#125;        &#125;        <span class="hljs-keyword">println</span>(start.<span class="hljs-keyword">size</span>())        <span class="hljs-keyword">def</span> f = outputs.files.getSingleFile()        f.getParentFile().mkdirs()        f.<span class="hljs-keyword">withWriter</span>(<span class="hljs-string">&quot;UTF-8&quot;</span>) &#123;            it.<span class="hljs-keyword">write</span>(start.<span class="hljs-keyword">join</span>(System.lineSeparator()))            it.<span class="hljs-keyword">write</span>()        &#125;    &#125;&#125;<span class="hljs-comment">// generate proguard dictionary on preBuild task (debug variant included)</span><span class="hljs-comment">//tasks.named(&quot;preBuild&quot;) &#123;</span><span class="hljs-comment">//    dependsOn(tasks.named(&quot;genDict&quot;))</span><span class="hljs-comment">//&#125;</span>afterEvaluate &#123;    <span class="hljs-comment">// each variant depends on `genDict` task</span>    android.applicationVariants.configureEach &#123; variant -&gt;        <span class="hljs-comment">// apply online variant with `release` substring</span>        <span class="hljs-keyword">if</span> (variant.name.toLowerCase().contains(<span class="hljs-string">&#x27;release&#x27;</span>))            variant.javaCompileProvider.configure &#123;                dependsOn <span class="hljs-string">&#x27;genDict&#x27;</span>            &#125;    &#125;&#125;</code></pre>]]></content>
    
    
    <summary type="html">Gradle script to generate proguard dictionaries each build</summary>
    
    
    
    <category term="programming" scheme="https://www.webmanajemen.com/categories/programming/"/>
    
    
    <category term="android" scheme="https://www.webmanajemen.com/tags/android/"/>
    
    <category term="gradle" scheme="https://www.webmanajemen.com/tags/gradle/"/>
    
    <category term="groovy" scheme="https://www.webmanajemen.com/tags/groovy/"/>
    
    <category term="proguard" scheme="https://www.webmanajemen.com/tags/proguard/"/>
    
  </entry>
  
  <entry>
    <title>ReactJS isMounted hook with useEffect</title>
    <link href="https://www.webmanajemen.com/2023/10/reactjs-is-mounted-hook-with-use-effect.html"/>
    <id>https://www.webmanajemen.com/2023/10/reactjs-is-mounted-hook-with-use-effect.html</id>
    <published>2023-10-16T22:34:57.000Z</published>
    <updated>2023-10-16T22:46:27.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Basic-errors">Basic errors</h2><pre><code class="hljs log">Warning: Can&#x27;t perform a React state update on an unmounted component. This is a no-op, but it indicates a memory leak in your application.</code></pre><h2 id="Basic-React-useEffect">Basic <code>React.useEffect</code></h2><p>understanding basic usage of <code>React.useEffect</code></p><h3 id="call-every-changes">call every changes</h3><blockquote><p>Below codes will run on every render of your component, e.g. when state or props change.</p></blockquote><pre><code class="hljs js"><span class="hljs-title class_">React</span>.<span class="hljs-title function_">useEffect</span>(<span class="hljs-function">() =&gt;</span> &#123;  <span class="hljs-comment">// component is mounted</span>  <span class="hljs-keyword">return</span> <span class="hljs-function">() =&gt;</span> &#123;    <span class="hljs-comment">// component is being unmounted</span>  &#125;&#125;);</code></pre><h3 id="call-only-once">call only once</h3><blockquote><p>Below codes will run an effect and clean it up only once (on mount and unmount). This tells React that your effect doesn’t depend on any values from props or state, so it never needs to re-run.</p></blockquote><pre><code class="hljs js"><span class="hljs-title class_">React</span>.<span class="hljs-title function_">useEffect</span>(<span class="hljs-function">() =&gt;</span> &#123;  <span class="hljs-comment">// component is mounted</span>  <span class="hljs-keyword">return</span> <span class="hljs-function">() =&gt;</span> &#123;    <span class="hljs-comment">// component is being unmounted</span>  &#125;&#125;, []); <span class="hljs-comment">// run once on mount</span></code></pre><h2 id="Basic-React-useRef">Basic <code>React.useRef</code></h2><blockquote><p>Keep in mind that useRef doesn’t notify you when its content changes. Mutating the .current property doesn’t cause a re-render.</p></blockquote><h2 id="Storing-isMounted-with-React-useRef">Storing <code>isMounted</code> with <code>React.useRef</code></h2><p>You’ll <code>React.useEffect</code> to monitor when the component mounts or unmounts, and save that info in a <code>ref</code></p><pre><code class="hljs js"><span class="hljs-keyword">const</span> isMounted = <span class="hljs-title class_">React</span>.<span class="hljs-title function_">useRef</span>(<span class="hljs-literal">false</span>); <span class="hljs-comment">// unmounted by default</span><span class="hljs-title class_">React</span>.<span class="hljs-title function_">useEffect</span>(<span class="hljs-function">() =&gt;</span> &#123;  isMounted.<span class="hljs-property">current</span> = <span class="hljs-literal">true</span>; <span class="hljs-comment">// mounted</span>  <span class="hljs-keyword">return</span> <span class="hljs-function">() =&gt;</span> &#123;    isMounted.<span class="hljs-property">current</span> = <span class="hljs-literal">false</span>; <span class="hljs-comment">// unmounted</span>  &#125;&#125;, []); <span class="hljs-comment">// run once on mount</span></code></pre><p>Now anytime you need to know if our component is mounted, you can check <code>isMounted.current</code> to get the current value.</p>]]></content>
    
    
    <summary type="html">ReactJS isMounted hook with useEffect Basic errors Warning: Cant perform a React state update on an unmounted component. This is a no-op, but it indicates a memory leak in your application. Basic Reac</summary>
    
    
    
    <category term="programming" scheme="https://www.webmanajemen.com/categories/programming/"/>
    
    
    <category term="javascript" scheme="https://www.webmanajemen.com/tags/javascript/"/>
    
    <category term="react" scheme="https://www.webmanajemen.com/tags/react/"/>
    
  </entry>
  
  <entry>
    <title>Convert iframe to hexo-shortcodes codepen</title>
    <link href="https://www.webmanajemen.com/2023/10/convert-iframe-to-hexo-shortcodes-codepen.html"/>
    <id>https://www.webmanajemen.com/2023/10/convert-iframe-to-hexo-shortcodes-codepen.html</id>
    <published>2023-10-09T00:12:12.000Z</published>
    <updated>2023-10-09T00:12:17.000Z</updated>
    
    <content type="html"><![CDATA[<pre><code class="hljs js"><span class="hljs-keyword">const</span> <span class="hljs-title class_">Promise</span> = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;bluebird&#x27;</span>);<span class="hljs-keyword">const</span> glob = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;glob&#x27;</span>);<span class="hljs-keyword">const</span> &#123; join &#125; = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;path&#x27;</span>);<span class="hljs-keyword">const</span> &#123; writefile &#125; = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;sbg-utility&#x27;</span>);<span class="hljs-keyword">const</span> moment = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;moment-timezone&#x27;</span>);<span class="hljs-comment">// convert iframe to hexo-shortcodes codepen</span><span class="hljs-title class_">Promise</span>.<span class="hljs-title function_">all</span>(glob.<span class="hljs-title function_">glob</span>(<span class="hljs-string">&#x27;src-posts/**/*.md&#x27;</span>, &#123; <span class="hljs-attr">ignore</span>: [<span class="hljs-string">&#x27;**/node_modules/**&#x27;</span>] &#125;))  .<span class="hljs-title function_">map</span>(<span class="hljs-function"><span class="hljs-params">p</span> =&gt;</span> <span class="hljs-title function_">join</span>(__dirname, p))  .<span class="hljs-title function_">map</span>(<span class="hljs-function"><span class="hljs-params">file</span> =&gt;</span>    <span class="hljs-keyword">import</span>(<span class="hljs-string">&#x27;hexo-post-parser&#x27;</span>).<span class="hljs-title function_">then</span>(<span class="hljs-keyword">async</span> loaded =&gt; &#123;      <span class="hljs-keyword">const</span> parsed = <span class="hljs-keyword">await</span> loaded.<span class="hljs-title function_">parsePost</span>(file);      <span class="hljs-keyword">return</span> &#123; <span class="hljs-attr">module</span>: loaded, file, ...parsed &#125;;    &#125;)  )  .<span class="hljs-title function_">each</span>(<span class="hljs-function"><span class="hljs-params">parsed</span> =&gt;</span> &#123;    <span class="hljs-keyword">const</span> &#123; file, <span class="hljs-variable language_">module</span> &#125; = parsed;    <span class="hljs-keyword">let</span> &#123; <span class="hljs-attr">body</span>: contents &#125; = parsed;    <span class="hljs-keyword">let</span> save = <span class="hljs-literal">false</span>;    <span class="hljs-keyword">if</span> (contents.<span class="hljs-title function_">includes</span>(<span class="hljs-string">&#x27;source.l3n4r0x.cf&#x27;</span>)) &#123;      contents = contents.<span class="hljs-title function_">replace</span>(<span class="hljs-regexp">/&lt;iframe [^&gt;]*src=&quot;[^&quot;]*&quot;[^&gt;]*&gt;[\s\S]*?&lt;\/iframe\b[^&gt;]*&gt;/gim</span>, <span class="hljs-function"><span class="hljs-params">tag</span> =&gt;</span> &#123;        <span class="hljs-keyword">let</span> shortcode = tag;        <span class="hljs-keyword">const</span> src = <span class="hljs-regexp">/(?&lt;=src=&quot;).*?(?=[*&quot;])/gim</span>.<span class="hljs-title function_">exec</span>(tag)[<span class="hljs-number">0</span>];        <span class="hljs-keyword">const</span> url = <span class="hljs-keyword">new</span> <span class="hljs-title function_">URL</span>(<span class="hljs-title function_">decodeHTMLEntities</span>(src));        <span class="hljs-keyword">const</span> searchParams = <span class="hljs-keyword">new</span> <span class="hljs-title class_">URLSearchParams</span>(url.<span class="hljs-property">search</span>);        <span class="hljs-keyword">let</span> user,          id,          opt = [];        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">const</span> [key, value] <span class="hljs-keyword">of</span> searchParams.<span class="hljs-title function_">entries</span>()) &#123;          <span class="hljs-keyword">if</span> (key == <span class="hljs-string">&#x27;id&#x27;</span>) &#123;            id = value;          &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (key == <span class="hljs-string">&#x27;user&#x27;</span>) &#123;            user = value;          &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (key == <span class="hljs-string">&#x27;h&#x27;</span>) &#123;            opt.<span class="hljs-title function_">push</span>(<span class="hljs-string">&#x27;height=&#x27;</span> + value);          &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (key == <span class="hljs-string">&#x27;tab&#x27;</span>) &#123;            opt.<span class="hljs-title function_">push</span>(<span class="hljs-string">&#x27;default_tab=&#x27;</span> + value);          &#125; <span class="hljs-keyword">else</span> &#123;            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(key, value);          &#125;        &#125;        <span class="hljs-keyword">if</span> (user.<span class="hljs-property">length</span> &gt; <span class="hljs-number">0</span> &amp;&amp; id.<span class="hljs-property">length</span> &gt; <span class="hljs-number">0</span>) &#123;          shortcode = <span class="hljs-string">`&#123;% codepen https://codepen.io/<span class="hljs-subst">$&#123;user&#125;</span>/pen/<span class="hljs-subst">$&#123;id&#125;</span> <span class="hljs-subst">$&#123;opt.join(<span class="hljs-string">&#x27; &#x27;</span>)&#125;</span> %&#125;`</span>;        &#125;        <span class="hljs-comment">// console.log(tag, shortcode);</span>        <span class="hljs-keyword">return</span> shortcode;      &#125;);      <span class="hljs-comment">// writefile(__dirname + &#x27;/tmp/x.html&#x27;, contents);</span>      parsed.<span class="hljs-property">body</span> = contents;      parsed.<span class="hljs-property">content</span> = contents;      parsed.<span class="hljs-property">metadata</span>.<span class="hljs-property">updated</span> = <span class="hljs-title function_">moment</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>()).<span class="hljs-title function_">tz</span>(<span class="hljs-string">&#x27;Asia/Jakarta&#x27;</span>).<span class="hljs-title function_">format</span>();      save = <span class="hljs-literal">true</span>;    &#125;    <span class="hljs-keyword">if</span> (save)      <span class="hljs-title class_">Promise</span>.<span class="hljs-title function_">resolve</span>(<span class="hljs-variable language_">module</span>.<span class="hljs-title function_">buildPost</span>(&#123; <span class="hljs-attr">body</span>: contents, <span class="hljs-attr">metadata</span>: parsed.<span class="hljs-property">metadata</span> &#125;)).<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">build</span> =&gt;</span> &#123;        <span class="hljs-title function_">writefile</span>(file, build);      &#125;);  &#125;);<span class="hljs-keyword">function</span> <span class="hljs-title function_">decodeHTMLEntities</span>(<span class="hljs-params">text</span>) &#123;  <span class="hljs-keyword">var</span> entities = [    [<span class="hljs-string">&#x27;amp&#x27;</span>, <span class="hljs-string">&#x27;&amp;&#x27;</span>],    [<span class="hljs-string">&#x27;apos&#x27;</span>, <span class="hljs-string">&quot;&#x27;&quot;</span>],    [<span class="hljs-string">&#x27;#x27&#x27;</span>, <span class="hljs-string">&quot;&#x27;&quot;</span>],    [<span class="hljs-string">&#x27;#x2F&#x27;</span>, <span class="hljs-string">&#x27;/&#x27;</span>],    [<span class="hljs-string">&#x27;#39&#x27;</span>, <span class="hljs-string">&quot;&#x27;&quot;</span>],    [<span class="hljs-string">&#x27;#47&#x27;</span>, <span class="hljs-string">&#x27;/&#x27;</span>],    [<span class="hljs-string">&#x27;lt&#x27;</span>, <span class="hljs-string">&#x27;&lt;&#x27;</span>],    [<span class="hljs-string">&#x27;gt&#x27;</span>, <span class="hljs-string">&#x27;&gt;&#x27;</span>],    [<span class="hljs-string">&#x27;nbsp&#x27;</span>, <span class="hljs-string">&#x27; &#x27;</span>],    [<span class="hljs-string">&#x27;quot&#x27;</span>, <span class="hljs-string">&#x27;&quot;&#x27;</span>]  ];  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>, max = entities.<span class="hljs-property">length</span>; i &lt; max; ++i)    text = text.<span class="hljs-title function_">replace</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">RegExp</span>(<span class="hljs-string">&#x27;&amp;&#x27;</span> + entities[i][<span class="hljs-number">0</span>] + <span class="hljs-string">&#x27;;&#x27;</span>, <span class="hljs-string">&#x27;g&#x27;</span>), entities[i][<span class="hljs-number">1</span>]);  <span class="hljs-keyword">return</span> text;&#125;</code></pre>]]></content>
    
    
    <summary type="html">Script javascript for convering html iframe to hexo-shortcodes codepen</summary>
    
    
    
    <category term="programming" scheme="https://www.webmanajemen.com/categories/programming/"/>
    
    
    <category term="hexo" scheme="https://www.webmanajemen.com/tags/hexo/"/>
    
    <category term="hexo-shortcodes" scheme="https://www.webmanajemen.com/tags/hexo-shortcodes/"/>
    
    <category term="codepen" scheme="https://www.webmanajemen.com/tags/codepen/"/>
    
    <category term="markdown" scheme="https://www.webmanajemen.com/tags/markdown/"/>
    
  </entry>
  
</feed>
