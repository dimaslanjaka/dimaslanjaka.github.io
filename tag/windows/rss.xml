<?xml version="1.0"?>
<rss version="2.0">
    <channel>
        <title>Website Management Indonesia â€¢ Posts by &#34;windows&#34; tag</title>
        <link>https://www.webmanajemen.com</link>
        <description>External source WMI Github Laboratory</description>
        <language>en</language>
        <pubDate>Wed, 24 Mar 2021 16:04:00 +0000</pubDate>
        <lastBuildDate>Wed, 24 Mar 2021 16:04:00 +0000</lastBuildDate>
        <category>RegExp</category>
        <category>Test</category>
        <category>Game Control</category>
        <category>Macros</category>
        <category>Life Skill</category>
        <category>Auto Click</category>
        <category>Event</category>
        <category>Wordpress</category>
        <category>Blogger</category>
        <category>Blogging</category>
        <category>CSS</category>
        <category>SEO</category>
        <category>Adsense</category>
        <category>JS</category>
        <category>PHP</category>
        <category>HTML</category>
        <category>AMP</category>
        <category>Facebook</category>
        <category>Social Media</category>
        <category>Android</category>
        <category>Script</category>
        <category>Tools</category>
        <category>Tips &amp; Tricks</category>
        <category>CodeIgniter</category>
        <category>Miscellaneous</category>
        <category>Linux/Unix</category>
        <category>Marketing Strategies</category>
        <category>VainGlory</category>
        <category>Hosting</category>
        <category>Games</category>
        <category>Durango</category>
        <category>Software</category>
        <category>Movies</category>
        <category>Musics</category>
        <category>Popular</category>
        <category>Fonts</category>
        <category>Share</category>
        <category>Proxy</category>
        <category>Java</category>
        <category>Gradle</category>
        <category>Kotlin</category>
        <category>Github</category>
        <category>TS</category>
        <category>Windows</category>
        <category>Genshin Impact</category>
        <category>Chest Location</category>
        <category>Quest</category>
        <item>
            <guid isPermalink="true">https://www.webmanajemen.com/2021/03/nodejs-windows-visual-studio.html</guid>
            <title>Fix Error NodeJS Windows Visual Studio</title>
            <link>https://www.webmanajemen.com/2021/03/nodejs-windows-visual-studio.html</link>
            <category>JS</category>
            <category>Windows</category>
            <pubDate>Wed, 24 Mar 2021 16:04:00 +0000</pubDate>
            <description><![CDATA[ &lt;ul&gt;    &lt;li&gt;Install &lt;a href=&#34;https://visualstudio.microsoft.com/downloads/&#34; rel=&#34;noopener noreferer nofollow&#34; target=&#34;_blank&#34;&gt;Microsoft Visual Studio Code 2019&lt;/a&gt;&lt;/li&gt;  &lt;li&gt;Install Module C++&lt;/li&gt;  &lt;img alt=&#34;Requirement C++ FOr Node JS&#34; src=&#34;https://1.bp.blogspot.com/-bnFVYzCkPiw/YFvFWw2im6I/AAAAAAAAAAM/28Q_ctk1SuE-1pskAFYfvVREqij-nsjhACLcBGAsYHQ/s0/VStudio2019-NodeJS.png&#34; title=&#34;C++ for nodejs&#34;&gt;  &lt;li&gt;Type below codes to your terminal (administrator)&lt;/li&gt;  &lt;pre&gt;	&lt;br&gt;  npm i -g --production windows-build-tools&lt;br&gt;  npm config set msvs_version 2019 --global&lt;br&gt;  npm config set msbuild_path &#34;C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\MSBuild\Current\Bin\MSBuild.exe&#34;&lt;br&gt;  &lt;/pre&gt;&lt;/ul&gt; &lt;div id=&#34;hexo-adsense-hidden&#34; style=&#34;display:none&#34;&gt;&lt;div hexo-adsense=&#34;ads-content&#34;&gt;
&lt;ins class=&#34;adsbygoogle&#34;
     style=&#34;display:block; text-align:center;&#34;
     data-ad-layout=&#34;in-article&#34;
     data-ad-format=&#34;fluid&#34;
     data-ad-client=&#34;ca-pub-1165447249910969&#34;
     data-ad-slot=&#34;8418182273&#34;&gt;&lt;/ins&gt;
&lt;script&gt;
     
&lt;/script&gt;
&lt;/div&gt;&lt;div hexo-adsense=&#34;ads-content&#34;&gt;
&lt;ins class=&#34;adsbygoogle&#34;
     style=&#34;display:block; text-align:center;&#34;
     data-ad-layout=&#34;in-article&#34;
     data-ad-format=&#34;fluid&#34;
     data-ad-client=&#34;ca-pub-1165447249910969&#34;
     data-ad-slot=&#34;7823254087&#34;&gt;&lt;/ins&gt;
&lt;script&gt;
     
&lt;/script&gt;
&lt;/div&gt;&lt;/div&gt;&lt;style&gt;*[hexo-adsense=&#34;ads-content&#34;] {
  display: block;
  background: #fff url(//i.imgur.com/mBbv90p.png) no-repeat top right;
  color: #303030;
  /*min-height: 18px;
  min-width: 81px;*/
  min-width: 250px;
  text-align: center;
  margin-left: auto;
  margin-right: auto;
}
&lt;/style&gt;&lt;script&gt;/**
 * Browser processor
 */

const isBrowser = new Function(&#34;try {return this===window;}catch(e){ return false;}&#34;);

/**
 * @type {import(&#34;../lib/config&#34;)}
 */
const hexoAdsenseConfig = JSON.parse(document.getElementById(&#34;hexo-adsense-config&#34;).textContent);
//console.log(hexoAdsenseConfig);

/**
 * Insert after element
 * @param {HTMLElement} newElement
 * @param {HTMLElement} oldElement
 */
function insertAfter(newElement, oldElement) {
  if (oldElement &amp;&amp; newElement) {
    let parent = oldElement.parentNode;
    if (parent.lastChild == oldElement) {
      parent.appendChild(newElement);
    } else {
      parent.insertBefore(newElement, oldElement.nextSibling);
    }
  } else {
    console.error(&#34;cannot insert element&#34;);
  }
}

/**
 * Replace elements with new
 * @param {HTMLElement} newElement
 * @param {HTMLElement} oldElement
 */
function replaceWith(newElement, oldElement) {
  if (!oldElement.parentNode) {
    console.log(oldElement, &#34;parent null&#34;);
    let d = document.createElement(&#34;div&#34;);
    d.appendChild(oldElement);
  } else {
    //console.log(oldElement.parentNode.tagName);
    oldElement.parentNode.replaceChild(newElement, oldElement);
  }
  /*
  try {
    oldElement.parentNode.replaceChild(newElement, oldElement);
  } catch (e) {}
  */
}

let createElementFromHTML = function (htmlString) {
  if (htmlString instanceof HTMLElement) {
    return htmlString;
  }
  var div = document.createElement(&#34;div&#34;);
  div.innerHTML = htmlString.trim();

  // Change this to div.childNodes to support multiple top-level nodes
  return div.firstChild;
};

function oldMethod() {
  let article = document.getElementsByTagName(&#34;article&#34;);
  let adscont = document.getElementById(&#34;hexo-adsense-ads-content&#34;);
  if (adscont &amp;&amp; adscont.length) {
    if (article &amp;&amp; article.length) {
      let linebreak = article.item(0).getElementsByTagName(&#34;br&#34;);
      if (linebreak.length &gt; 0) {
        return replaceWith(adscont, linebreak.item(0));
      }

      let headings = article.item(0).querySelectorAll(&#34;h2,h3,h4,h5&#34;);
      if (headings &amp;&amp; headings.length &gt; 0) {
        return insertAfter(adscont, headings.item(0));
      }
    }
  }
}

/**
 * random number between min and max
 */
function ranumb(min, max) {
  // min and max included
  return Math.floor(Math.random() * (max - min + 1) + min);
}

function newMethod() {
  const adshide = document.getElementById(&#34;hexo-adsense-hidden&#34;);
  let adscont = adshide.querySelectorAll(&#39;[hexo-adsense=&#34;ads-content&#34;]&#39;);
  const article = document.querySelectorAll(&#34;article&#34;);
  if (article.length &gt; 0 &amp;&amp; adscont.length &gt; 0) {
    /**
     * @type {HTMLElement}
     */
    let ads;
    if (article.length == 1) {
      console.log(&#34;webpage is post&#34;);
      let targetArticle = article.item(0);

      // prioritize hexo-adsense-fill before auto ads on other elements
      const ads_fill = targetArticle.querySelectorAll(&#34;*[hexo-adsense-fill]&#34;);
      if (ads_fill.length &gt; 0) {
        for (let index = 0; index &lt; ads_fill.length; index++) {
          const toFill = ads_fill[index];
          if (typeof adscont[index] !== &#34;undefined&#34;) {
            toFill.appendChild(adscont[index]);
          }
        }
      }

      // the rest of the ads will show automatically after headers elements
      adscont = adshide.querySelectorAll(&#39;[hexo-adsense=&#34;ads-content&#34;]&#39;);
      //console.log(adscont.length, &#34;ads left&#34;);
      if (adscont.length &gt; 0) {
        const headers = targetArticle.querySelectorAll(&#34;h1,h2,h3,h4,h5,h6&#34;);
        if (headers.length &gt; 0) {
          // generate index of headers
          let headers_index = Array.apply(null, { length: headers.length }).map(Number.call, Number);
          //console.log(headers_index);
          for (let index = 0; index &lt; adscont.length; index++) {
            ads = adscont[index];
            const rheaders = shuffleArr2(headers_index);
            // pick a random index
            const rheader = rheaders.next().value;
            if (typeof rheader === &#34;number&#34;) {
              const header = headers.item(rheader);
              insertAfter(createElementFromHTML(ads), header);
            }
          }
        }
      }

      // the rest of the ads will show automatically to linebreak elements
      adscont = adshide.querySelectorAll(&#39;[hexo-adsense=&#34;ads-content&#34;]&#39;);
      if (adscont.length &gt; 0) {
        const linebreaks = targetArticle.querySelectorAll(&#34;br,hr&#34;);
        if (linebreaks.length &gt; 0) {
          // generate index of linebreaks
          let linebreaks_index = Array.apply(null, { length: linebreaks.length }).map(Number.call, Number);
          //console.log(linebreaks_index);
          // randomize linebreaks index
          const rlinebreaks = shuffleArr2(linebreaks_index);
          for (let index = 0; index &lt; adscont.length; index++) {
            ads = adscont[index];
            // pick a random index
            const rlinebreak = rlinebreaks.next().value;
            if (typeof rlinebreak == &#34;number&#34;) {
              const linebreak = linebreaks.item(rlinebreak);
              if ([&#34;blockquote&#34;, &#34;img&#34;, &#34;a&#34;].includes(linebreak.parentNode.tagName.toLowerCase())) {
                index--;
                continue;
              }
              //console.log(linebreak.tagName);
              replaceWith(createElementFromHTML(ads), linebreak);
            }
          }
        }
      }
    } else {
      console.log(&#34;webpage is not post&#34;);
      // generate index of articles
      let articles_index = Array.apply(null, { length: article.length }).map(Number.call, Number);
      // randomize linebreaks index
      const rArticles = shuffleArr2(articles_index);
      for (let index = 0; index &lt; adscont.length; index++) {
        ads = adscont[index];
        // pick a random index
        const rArticle = rArticles.next().value;
        if (typeof rArticle == &#34;number&#34;) {
          //console.log(&#34;adsense display to article index&#34;, rArticle);
          const pickArticle = article.item(rArticle);
          pickArticle.appendChild(createElementFromHTML(ads));
        }
      }
    }

    // summon adsbygoogle.push()
    adsensePush();
  }
}

function eventMethod() {
  document.addEventListener(&#34;DOMContentLoaded&#34;, function () {
    // we look for the jump break
    var _moreElm = document.querySelector(&#34;a[name=more]&#34;);

    // here is your adsense code
    var _adsenseCode = &#34; [replace this with code from the last step] &#34;;

    // This inserts the ad inside of the blog post
    _moreElm.insertAdjacentHTML(&#34;afterend&#34;, &#39;&lt;div class=&#34;adsense-after-break&#34;&gt;&#39; + _adsenseCode + &#34;&lt;/div&gt;&#34;);

    // Initialize the ads here
    (adsbygoogle = window.adsbygoogle || []).push({});
  });
}

/**
 * Shuffle Array
 * @param {any[]} array
 * @see {@link https://stackoverflow.com/a/18806417}
 * @returns
 */
function shuffleArr(array) {
  var i = array.length,
    j = 0,
    temp;

  while (i--) {
    j = Math.floor(Math.random() * (i + 1));

    // swap randomly chosen element with current element
    temp = array[i];
    array[i] = array[j];
    array[j] = temp;
  }

  return array;
}

/**
 * Next generation of non-repeated randomizer
 * @see {@link shuffleArr}
 * @param {any[]} array
 */
function* shuffleArr2(array) {
  var i = array.length;

  while (i--) {
    yield array.splice(Math.floor(Math.random() * (i + 1)), 1)[0];
  }
}

function adsensePush() {
  for (let index = 0; index &lt; document.querySelectorAll(&#39;[hexo-adsense=&#34;ads-content&#34;]&#39;).length; index++) {
    (adsbygoogle = window.adsbygoogle || []).push({
      google_ad_client: hexoAdsenseConfig.pub,
    });
  }
}

if (!isBrowser()) {
  module.exports = {
    replaceWith,
    insertAfter,
  };
} else {
  window.__tcfapi = (command, parameter, callback) =&gt; {
    if (command === &#34;checkConsent&#34;) {
      callback(true);
    }
    if (command === &#34;addEventListener&#34;) {
      callback({ eventStatus: &#34;tcloaded&#34;, gdprApplies: false }, true);
    }
  };

  if (typeof document.addEventListener == &#34;function&#34;) {
    document.addEventListener(&#34;DOMContentLoaded&#34;, newMethod);
  } else if (typeof window.attachEvent == &#34;function&#34;) {
    window.attachEvent(&#34;onload&#34;, newMethod);
  } else {
    window.onload = newMethod;
  }
}
&lt;/script&gt; ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://www.webmanajemen.com/2020/12/nodejs-common-fix-command-on-linux-or.html</guid>
            <title>NodeJS Common Fix Command On Linux Or Windows</title>
            <link>https://www.webmanajemen.com/2020/12/nodejs-common-fix-command-on-linux-or.html</link>
            <category>Tips &amp; Tricks</category>
            <category>Linux/Unix</category>
            <category>Windows</category>
            <pubDate>Thu, 31 Dec 2020 01:11:00 +0000</pubDate>
            <description><![CDATA[ &lt;p&gt;&lt;/p&gt;&lt;h3&gt;Linux&lt;/h3&gt; &lt;pre class=&#34;bash&#34;&gt;&lt;br&gt;# add new repository&lt;br&gt;sudo add-apt-repository ppa:deadsnakes/ppa&lt;br&gt;sudo apt-get update -y&lt;br&gt;sudo apt install libgtk-3-0 -y&lt;br&gt;sudo apt install software-properties-common checkinstall -y&lt;br&gt;sudo apt-get install libreadline-gplv2-dev libncursesw5-dev libssl-dev libsqlite3-dev tk-dev libgdbm-dev libc6-dev libbz2-dev libffi-dev zlib1g-dev build-essential libncurses5-dev libgmp-dev libnss3-dev wget -y&lt;br&gt;&lt;br&gt;# nodejs additional packages&lt;br&gt;npm install --global lerna node-pre-gyp typescript&lt;br&gt;&lt;br&gt;# python 2.7&lt;br&gt;sudo apt install python-minimal -y&lt;br&gt;sudo apt install python-pip -y&lt;br&gt;&lt;br&gt;# Install&lt;br&gt;npm --build-from-source install&lt;br&gt;&lt;br&gt;# Fix Chrome Sandbox&lt;br&gt;sudo chown root:root node_modules/electron/dist/chrome-sandbox&lt;br&gt;sudo chmod 4755 node_modules/electron/dist/chrome-sandbox&lt;br&gt;&lt;br&gt;# run&lt;br&gt;sudo npm run start&lt;br&gt;&lt;/pre&gt; &lt;h3&gt;Windows&lt;/h3&gt;&lt;li&gt;install &lt;a href=&#34;https://visualstudio.microsoft.com/thank-you-downloading-visual-studio/?sku=BuildTools&#34; rel=&#34;noopener noreferer nofollow&#34;&gt;Visual Studio Installer&lt;/a&gt;&lt;/li&gt;&lt;pre&gt;&lt;br&gt;npm config set msvs_version 2017 --global&lt;br&gt;npm i electron-builder-squirrel-windows electron-builder node-gyp electron electron-rebuild -g&lt;br&gt;node-gyp configure --msvs_version=2017&lt;br&gt;npm install --global --production windows-build-tools&lt;br&gt;npm install&lt;br&gt;&lt;/pre&gt; &lt;p&gt;&lt;/p&gt;&lt;div id=&#34;hexo-adsense-hidden&#34; style=&#34;display:none&#34;&gt;&lt;div hexo-adsense=&#34;ads-content&#34;&gt;
&lt;ins class=&#34;adsbygoogle&#34;
     style=&#34;display:block; text-align:center;&#34;
     data-ad-layout=&#34;in-article&#34;
     data-ad-format=&#34;fluid&#34;
     data-ad-client=&#34;ca-pub-1165447249910969&#34;
     data-ad-slot=&#34;8418182273&#34;&gt;&lt;/ins&gt;
&lt;script&gt;
     
&lt;/script&gt;
&lt;/div&gt;&lt;div hexo-adsense=&#34;ads-content&#34;&gt;
&lt;ins class=&#34;adsbygoogle&#34;
     style=&#34;display:block; text-align:center;&#34;
     data-ad-layout=&#34;in-article&#34;
     data-ad-format=&#34;fluid&#34;
     data-ad-client=&#34;ca-pub-1165447249910969&#34;
     data-ad-slot=&#34;7823254087&#34;&gt;&lt;/ins&gt;
&lt;script&gt;
     
&lt;/script&gt;
&lt;/div&gt;&lt;/div&gt;&lt;style&gt;*[hexo-adsense=&#34;ads-content&#34;] {
  display: block;
  background: #fff url(//i.imgur.com/mBbv90p.png) no-repeat top right;
  color: #303030;
  /*min-height: 18px;
  min-width: 81px;*/
  min-width: 250px;
  text-align: center;
  margin-left: auto;
  margin-right: auto;
}
&lt;/style&gt;&lt;script&gt;/**
 * Browser processor
 */

const isBrowser = new Function(&#34;try {return this===window;}catch(e){ return false;}&#34;);

/**
 * @type {import(&#34;../lib/config&#34;)}
 */
const hexoAdsenseConfig = JSON.parse(document.getElementById(&#34;hexo-adsense-config&#34;).textContent);
//console.log(hexoAdsenseConfig);

/**
 * Insert after element
 * @param {HTMLElement} newElement
 * @param {HTMLElement} oldElement
 */
function insertAfter(newElement, oldElement) {
  if (oldElement &amp;&amp; newElement) {
    let parent = oldElement.parentNode;
    if (parent.lastChild == oldElement) {
      parent.appendChild(newElement);
    } else {
      parent.insertBefore(newElement, oldElement.nextSibling);
    }
  } else {
    console.error(&#34;cannot insert element&#34;);
  }
}

/**
 * Replace elements with new
 * @param {HTMLElement} newElement
 * @param {HTMLElement} oldElement
 */
function replaceWith(newElement, oldElement) {
  if (!oldElement.parentNode) {
    console.log(oldElement, &#34;parent null&#34;);
    let d = document.createElement(&#34;div&#34;);
    d.appendChild(oldElement);
  } else {
    //console.log(oldElement.parentNode.tagName);
    oldElement.parentNode.replaceChild(newElement, oldElement);
  }
  /*
  try {
    oldElement.parentNode.replaceChild(newElement, oldElement);
  } catch (e) {}
  */
}

let createElementFromHTML = function (htmlString) {
  if (htmlString instanceof HTMLElement) {
    return htmlString;
  }
  var div = document.createElement(&#34;div&#34;);
  div.innerHTML = htmlString.trim();

  // Change this to div.childNodes to support multiple top-level nodes
  return div.firstChild;
};

function oldMethod() {
  let article = document.getElementsByTagName(&#34;article&#34;);
  let adscont = document.getElementById(&#34;hexo-adsense-ads-content&#34;);
  if (adscont &amp;&amp; adscont.length) {
    if (article &amp;&amp; article.length) {
      let linebreak = article.item(0).getElementsByTagName(&#34;br&#34;);
      if (linebreak.length &gt; 0) {
        return replaceWith(adscont, linebreak.item(0));
      }

      let headings = article.item(0).querySelectorAll(&#34;h2,h3,h4,h5&#34;);
      if (headings &amp;&amp; headings.length &gt; 0) {
        return insertAfter(adscont, headings.item(0));
      }
    }
  }
}

/**
 * random number between min and max
 */
function ranumb(min, max) {
  // min and max included
  return Math.floor(Math.random() * (max - min + 1) + min);
}

function newMethod() {
  const adshide = document.getElementById(&#34;hexo-adsense-hidden&#34;);
  let adscont = adshide.querySelectorAll(&#39;[hexo-adsense=&#34;ads-content&#34;]&#39;);
  const article = document.querySelectorAll(&#34;article&#34;);
  if (article.length &gt; 0 &amp;&amp; adscont.length &gt; 0) {
    /**
     * @type {HTMLElement}
     */
    let ads;
    if (article.length == 1) {
      console.log(&#34;webpage is post&#34;);
      let targetArticle = article.item(0);

      // prioritize hexo-adsense-fill before auto ads on other elements
      const ads_fill = targetArticle.querySelectorAll(&#34;*[hexo-adsense-fill]&#34;);
      if (ads_fill.length &gt; 0) {
        for (let index = 0; index &lt; ads_fill.length; index++) {
          const toFill = ads_fill[index];
          if (typeof adscont[index] !== &#34;undefined&#34;) {
            toFill.appendChild(adscont[index]);
          }
        }
      }

      // the rest of the ads will show automatically after headers elements
      adscont = adshide.querySelectorAll(&#39;[hexo-adsense=&#34;ads-content&#34;]&#39;);
      //console.log(adscont.length, &#34;ads left&#34;);
      if (adscont.length &gt; 0) {
        const headers = targetArticle.querySelectorAll(&#34;h1,h2,h3,h4,h5,h6&#34;);
        if (headers.length &gt; 0) {
          // generate index of headers
          let headers_index = Array.apply(null, { length: headers.length }).map(Number.call, Number);
          //console.log(headers_index);
          for (let index = 0; index &lt; adscont.length; index++) {
            ads = adscont[index];
            const rheaders = shuffleArr2(headers_index);
            // pick a random index
            const rheader = rheaders.next().value;
            if (typeof rheader === &#34;number&#34;) {
              const header = headers.item(rheader);
              insertAfter(createElementFromHTML(ads), header);
            }
          }
        }
      }

      // the rest of the ads will show automatically to linebreak elements
      adscont = adshide.querySelectorAll(&#39;[hexo-adsense=&#34;ads-content&#34;]&#39;);
      if (adscont.length &gt; 0) {
        const linebreaks = targetArticle.querySelectorAll(&#34;br,hr&#34;);
        if (linebreaks.length &gt; 0) {
          // generate index of linebreaks
          let linebreaks_index = Array.apply(null, { length: linebreaks.length }).map(Number.call, Number);
          //console.log(linebreaks_index);
          // randomize linebreaks index
          const rlinebreaks = shuffleArr2(linebreaks_index);
          for (let index = 0; index &lt; adscont.length; index++) {
            ads = adscont[index];
            // pick a random index
            const rlinebreak = rlinebreaks.next().value;
            if (typeof rlinebreak == &#34;number&#34;) {
              const linebreak = linebreaks.item(rlinebreak);
              if ([&#34;blockquote&#34;, &#34;img&#34;, &#34;a&#34;].includes(linebreak.parentNode.tagName.toLowerCase())) {
                index--;
                continue;
              }
              //console.log(linebreak.tagName);
              replaceWith(createElementFromHTML(ads), linebreak);
            }
          }
        }
      }
    } else {
      console.log(&#34;webpage is not post&#34;);
      // generate index of articles
      let articles_index = Array.apply(null, { length: article.length }).map(Number.call, Number);
      // randomize linebreaks index
      const rArticles = shuffleArr2(articles_index);
      for (let index = 0; index &lt; adscont.length; index++) {
        ads = adscont[index];
        // pick a random index
        const rArticle = rArticles.next().value;
        if (typeof rArticle == &#34;number&#34;) {
          //console.log(&#34;adsense display to article index&#34;, rArticle);
          const pickArticle = article.item(rArticle);
          pickArticle.appendChild(createElementFromHTML(ads));
        }
      }
    }

    // summon adsbygoogle.push()
    adsensePush();
  }
}

function eventMethod() {
  document.addEventListener(&#34;DOMContentLoaded&#34;, function () {
    // we look for the jump break
    var _moreElm = document.querySelector(&#34;a[name=more]&#34;);

    // here is your adsense code
    var _adsenseCode = &#34; [replace this with code from the last step] &#34;;

    // This inserts the ad inside of the blog post
    _moreElm.insertAdjacentHTML(&#34;afterend&#34;, &#39;&lt;div class=&#34;adsense-after-break&#34;&gt;&#39; + _adsenseCode + &#34;&lt;/div&gt;&#34;);

    // Initialize the ads here
    (adsbygoogle = window.adsbygoogle || []).push({});
  });
}

/**
 * Shuffle Array
 * @param {any[]} array
 * @see {@link https://stackoverflow.com/a/18806417}
 * @returns
 */
function shuffleArr(array) {
  var i = array.length,
    j = 0,
    temp;

  while (i--) {
    j = Math.floor(Math.random() * (i + 1));

    // swap randomly chosen element with current element
    temp = array[i];
    array[i] = array[j];
    array[j] = temp;
  }

  return array;
}

/**
 * Next generation of non-repeated randomizer
 * @see {@link shuffleArr}
 * @param {any[]} array
 */
function* shuffleArr2(array) {
  var i = array.length;

  while (i--) {
    yield array.splice(Math.floor(Math.random() * (i + 1)), 1)[0];
  }
}

function adsensePush() {
  for (let index = 0; index &lt; document.querySelectorAll(&#39;[hexo-adsense=&#34;ads-content&#34;]&#39;).length; index++) {
    (adsbygoogle = window.adsbygoogle || []).push({
      google_ad_client: hexoAdsenseConfig.pub,
    });
  }
}

if (!isBrowser()) {
  module.exports = {
    replaceWith,
    insertAfter,
  };
} else {
  window.__tcfapi = (command, parameter, callback) =&gt; {
    if (command === &#34;checkConsent&#34;) {
      callback(true);
    }
    if (command === &#34;addEventListener&#34;) {
      callback({ eventStatus: &#34;tcloaded&#34;, gdprApplies: false }, true);
    }
  };

  if (typeof document.addEventListener == &#34;function&#34;) {
    document.addEventListener(&#34;DOMContentLoaded&#34;, newMethod);
  } else if (typeof window.attachEvent == &#34;function&#34;) {
    window.attachEvent(&#34;onload&#34;, newMethod);
  } else {
    window.onload = newMethod;
  }
}
&lt;/script&gt; ]]></description>
        </item>
    </channel>
</rss>
