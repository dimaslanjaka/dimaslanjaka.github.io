{
    "version": "https://jsonfeed.org/version/1",
    "title": "Website Management Indonesia • All posts by \"macros\" tag",
    "description": "External source WMI Github Laboratory",
    "home_page_url": "https://www.webmanajemen.com",
    "items": [
        {
            "id": "https://www.webmanajemen.com/The%20Legend%20Of%20Neverland/Fishing.html",
            "url": "https://www.webmanajemen.com/The%20Legend%20Of%20Neverland/Fishing.html",
            "title": "Auto Fishing",
            "date_published": "2021-09-18T17:00:00.000Z",
            "content_html": "<p>Fishing in the legend of neverland is an important activity to collect fish and then sell them and get ‘water essences’. Water Essences are used to buy ingredients in the <code>cooking shop</code>. You can see the recipe at <a href=\"/The%20Legend%20Of%20Neverland/Recipes.html\">Cooking Recipes</a>.<br />\nYou can cook buffs for your character or make dishes to increase the level of <code>Fairies</code> you have.<br />\nThis time you can auto-fish using <code>bluestacks</code> and <code>macros</code>.</p>\n<p><img src=\"https://user-images.githubusercontent.com/12471057/133905459-d00d586f-0b2e-4a43-abb9-cb726940bf3d.png\" alt=\"Fishing the legend of neverland\" /></p>\n<h2 id=\"calculating-the-fishing-actions\"><a class=\"markdownIt-Anchor\" href=\"#calculating-the-fishing-actions\"></a> Calculating the fishing actions</h2>\n<ul>\n  <li><span>1 bottle = 300 staminas</span> &divide; 5/action &rarr; <span>\n      <script>\n        document.write(300 / 5);\n      </script> actions\n    </span>.</li>\n  <li><span>1 fishing = &plusmn;7-8 secs (we take 7 secs)</span></li>\n  <li><span>7 x 60 actions &erarr; <script>\n        document.write(7 * 60)\n      </script> seconds &divide; 60 secs (1 min)</span> = <span>\n      <script>\n        document.write(420 / 60)\n      </script> minutes\n    </span> <span>to finish 1 stamina bottle</span></li>\n</ul>\n<h2 id=\"configuration\"><a class=\"markdownIt-Anchor\" href=\"#configuration\"></a> Configuration</h2>\n<ul>\n<li>First of all, make sure the position of the stamina bottle in your inventory/bag is in the second slot<br />\n<img src=\"https://user-images.githubusercontent.com/12471057/133907462-bf07b4c7-10f2-46ce-ba61-076af0357232.png\" alt=\"image\" /></li>\n<li>set <code>repeat actions</code> with the total stamina bottle you have, or my recommendation is to subtract a little from the total stamina bottle you have. for example you have 55 bottles, set just 50 repeat actions, this to prevent other items to be used unexpectedly/unintentionally.<br />\n<img src=\"https://user-images.githubusercontent.com/12471057/133907408-c3505025-1e78-4353-bdc0-1c6e7672d742.png\" alt=\"Setup total stamina bottles as repeat action\" /></li>\n</ul>\n<h2 id=\"how-to-download-script\"><a class=\"markdownIt-Anchor\" href=\"#how-to-download-script\"></a> How to download script</h2>\n<p><a href=\"/The%20Legend%20Of%20Neverland/Macros.html\">Read Here</a></p>\n<h2 id=\"auto-fishing-script\"><a class=\"markdownIt-Anchor\" href=\"#auto-fishing-script\"></a> Auto fishing script</h2>\n<p><a href=\"/The%20Legend%20Of%20Neverland/Macros/Auto%20Fishing%20%26%20Stamina.json\">Download Macros Auto Fishing</a></p>\n<h2 id=\"how-to-import-script\"><a class=\"markdownIt-Anchor\" href=\"#how-to-import-script\"></a> How to import script ?</h2>\n<p><a href=\"/The%20Legend%20Of%20Neverland/Macros.html\">Read Here</a></p>\n<div id=\"hexo-adsense-hidden\" style=\"display:none\"><div hexo-adsense=\"ads-content\">\n<ins class=\"adsbygoogle\"\n     style=\"display:block; text-align:center;\"\n     data-ad-layout=\"in-article\"\n     data-ad-format=\"fluid\"\n     data-ad-client=\"ca-pub-1165447249910969\"\n     data-ad-slot=\"8418182273\"></ins>\n<script>\n     \n</script>\n</div><div hexo-adsense=\"ads-content\">\n<ins class=\"adsbygoogle\"\n     style=\"display:block; text-align:center;\"\n     data-ad-layout=\"in-article\"\n     data-ad-format=\"fluid\"\n     data-ad-client=\"ca-pub-1165447249910969\"\n     data-ad-slot=\"7823254087\"></ins>\n<script>\n     \n</script>\n</div></div><style>*[hexo-adsense=\"ads-content\"] {\n  display: block;\n  background: #fff url(//i.imgur.com/mBbv90p.png) no-repeat top right;\n  color: #303030;\n  /*min-height: 18px;\n  min-width: 81px;*/\n  min-width: 250px;\n  text-align: center;\n  margin-left: auto;\n  margin-right: auto;\n}\n</style><script>/**\n * Browser processor\n */\n\nconst isBrowser = new Function(\"try {return this===window;}catch(e){ return false;}\");\n\n/**\n * @type {import(\"../lib/config\")}\n */\nconst hexoAdsenseConfig = JSON.parse(document.getElementById(\"hexo-adsense-config\").textContent);\n//console.log(hexoAdsenseConfig);\n\n/**\n * Insert after element\n * @param {HTMLElement} newElement\n * @param {HTMLElement} oldElement\n */\nfunction insertAfter(newElement, oldElement) {\n  if (oldElement && newElement) {\n    let parent = oldElement.parentNode;\n    if (parent.lastChild == oldElement) {\n      parent.appendChild(newElement);\n    } else {\n      parent.insertBefore(newElement, oldElement.nextSibling);\n    }\n  } else {\n    console.error(\"cannot insert element\");\n  }\n}\n\n/**\n * Replace elements with new\n * @param {HTMLElement} newElement\n * @param {HTMLElement} oldElement\n */\nfunction replaceWith(newElement, oldElement) {\n  if (!oldElement.parentNode) {\n    console.log(oldElement, \"parent null\");\n    let d = document.createElement(\"div\");\n    d.appendChild(oldElement);\n  } else {\n    //console.log(oldElement.parentNode.tagName);\n    oldElement.parentNode.replaceChild(newElement, oldElement);\n  }\n  /*\n  try {\n    oldElement.parentNode.replaceChild(newElement, oldElement);\n  } catch (e) {}\n  */\n}\n\nlet createElementFromHTML = function (htmlString) {\n  if (htmlString instanceof HTMLElement) {\n    return htmlString;\n  }\n  var div = document.createElement(\"div\");\n  div.innerHTML = htmlString.trim();\n\n  // Change this to div.childNodes to support multiple top-level nodes\n  return div.firstChild;\n};\n\nfunction oldMethod() {\n  let article = document.getElementsByTagName(\"article\");\n  let adscont = document.getElementById(\"hexo-adsense-ads-content\");\n  if (adscont && adscont.length) {\n    if (article && article.length) {\n      let linebreak = article.item(0).getElementsByTagName(\"br\");\n      if (linebreak.length > 0) {\n        return replaceWith(adscont, linebreak.item(0));\n      }\n\n      let headings = article.item(0).querySelectorAll(\"h2,h3,h4,h5\");\n      if (headings && headings.length > 0) {\n        return insertAfter(adscont, headings.item(0));\n      }\n    }\n  }\n}\n\n/**\n * random number between min and max\n */\nfunction ranumb(min, max) {\n  // min and max included\n  return Math.floor(Math.random() * (max - min + 1) + min);\n}\n\nfunction newMethod() {\n  const adshide = document.getElementById(\"hexo-adsense-hidden\");\n  let adscont = adshide.querySelectorAll('[hexo-adsense=\"ads-content\"]');\n  const article = document.querySelectorAll(\"article\");\n  if (article.length > 0 && adscont.length > 0) {\n    /**\n     * @type {HTMLElement}\n     */\n    let ads;\n    if (article.length == 1) {\n      console.log(\"webpage is post\");\n      let targetArticle = article.item(0);\n\n      // prioritize hexo-adsense-fill before auto ads on other elements\n      const ads_fill = targetArticle.querySelectorAll(\"*[hexo-adsense-fill]\");\n      if (ads_fill.length > 0) {\n        for (let index = 0; index < ads_fill.length; index++) {\n          const toFill = ads_fill[index];\n          if (typeof adscont[index] !== \"undefined\") {\n            toFill.appendChild(adscont[index]);\n          }\n        }\n      }\n\n      // the rest of the ads will show automatically after headers elements\n      adscont = adshide.querySelectorAll('[hexo-adsense=\"ads-content\"]');\n      //console.log(adscont.length, \"ads left\");\n      if (adscont.length > 0) {\n        const headers = targetArticle.querySelectorAll(\"h1,h2,h3,h4,h5,h6\");\n        if (headers.length > 0) {\n          // generate index of headers\n          let headers_index = Array.apply(null, { length: headers.length }).map(Number.call, Number);\n          //console.log(headers_index);\n          for (let index = 0; index < adscont.length; index++) {\n            ads = adscont[index];\n            const rheaders = shuffleArr2(headers_index);\n            // pick a random index\n            const rheader = rheaders.next().value;\n            if (typeof rheader === \"number\") {\n              const header = headers.item(rheader);\n              insertAfter(createElementFromHTML(ads), header);\n            }\n          }\n        }\n      }\n\n      // the rest of the ads will show automatically to linebreak elements\n      adscont = adshide.querySelectorAll('[hexo-adsense=\"ads-content\"]');\n      if (adscont.length > 0) {\n        const linebreaks = targetArticle.querySelectorAll(\"br,hr\");\n        if (linebreaks.length > 0) {\n          // generate index of linebreaks\n          let linebreaks_index = Array.apply(null, { length: linebreaks.length }).map(Number.call, Number);\n          //console.log(linebreaks_index);\n          // randomize linebreaks index\n          const rlinebreaks = shuffleArr2(linebreaks_index);\n          for (let index = 0; index < adscont.length; index++) {\n            ads = adscont[index];\n            // pick a random index\n            const rlinebreak = rlinebreaks.next().value;\n            if (typeof rlinebreak == \"number\") {\n              const linebreak = linebreaks.item(rlinebreak);\n              if ([\"blockquote\", \"img\", \"a\"].includes(linebreak.parentNode.tagName.toLowerCase())) {\n                index--;\n                continue;\n              }\n              //console.log(linebreak.tagName);\n              replaceWith(createElementFromHTML(ads), linebreak);\n            }\n          }\n        }\n      }\n    } else {\n      console.log(\"webpage is not post\");\n      // generate index of articles\n      let articles_index = Array.apply(null, { length: article.length }).map(Number.call, Number);\n      // randomize linebreaks index\n      const rArticles = shuffleArr2(articles_index);\n      for (let index = 0; index < adscont.length; index++) {\n        ads = adscont[index];\n        // pick a random index\n        const rArticle = rArticles.next().value;\n        if (typeof rArticle == \"number\") {\n          //console.log(\"adsense display to article index\", rArticle);\n          const pickArticle = article.item(rArticle);\n          pickArticle.appendChild(createElementFromHTML(ads));\n        }\n      }\n    }\n\n    // summon adsbygoogle.push()\n    adsensePush();\n  }\n}\n\nfunction eventMethod() {\n  document.addEventListener(\"DOMContentLoaded\", function () {\n    // we look for the jump break\n    var _moreElm = document.querySelector(\"a[name=more]\");\n\n    // here is your adsense code\n    var _adsenseCode = \" [replace this with code from the last step] \";\n\n    // This inserts the ad inside of the blog post\n    _moreElm.insertAdjacentHTML(\"afterend\", '<div class=\"adsense-after-break\">' + _adsenseCode + \"</div>\");\n\n    // Initialize the ads here\n    (adsbygoogle = window.adsbygoogle || []).push({});\n  });\n}\n\n/**\n * Shuffle Array\n * @param {any[]} array\n * @see {@link https://stackoverflow.com/a/18806417}\n * @returns\n */\nfunction shuffleArr(array) {\n  var i = array.length,\n    j = 0,\n    temp;\n\n  while (i--) {\n    j = Math.floor(Math.random() * (i + 1));\n\n    // swap randomly chosen element with current element\n    temp = array[i];\n    array[i] = array[j];\n    array[j] = temp;\n  }\n\n  return array;\n}\n\n/**\n * Next generation of non-repeated randomizer\n * @see {@link shuffleArr}\n * @param {any[]} array\n */\nfunction* shuffleArr2(array) {\n  var i = array.length;\n\n  while (i--) {\n    yield array.splice(Math.floor(Math.random() * (i + 1)), 1)[0];\n  }\n}\n\nfunction adsensePush() {\n  for (let index = 0; index < document.querySelectorAll('[hexo-adsense=\"ads-content\"]').length; index++) {\n    (adsbygoogle = window.adsbygoogle || []).push({\n      google_ad_client: hexoAdsenseConfig.pub,\n    });\n  }\n}\n\nif (!isBrowser()) {\n  module.exports = {\n    replaceWith,\n    insertAfter,\n  };\n} else {\n  window.__tcfapi = (command, parameter, callback) => {\n    if (command === \"checkConsent\") {\n      callback(true);\n    }\n    if (command === \"addEventListener\") {\n      callback({ eventStatus: \"tcloaded\", gdprApplies: false }, true);\n    }\n  };\n\n  if (typeof document.addEventListener == \"function\") {\n    document.addEventListener(\"DOMContentLoaded\", newMethod);\n  } else if (typeof window.attachEvent == \"function\") {\n    window.attachEvent(\"onload\", newMethod);\n  } else {\n    window.onload = newMethod;\n  }\n}\n</script>",
            "tags": [
                "Macros",
                "Life Skill"
            ]
        },
        {
            "id": "https://www.webmanajemen.com/The%20Legend%20Of%20Neverland/Macros.html",
            "url": "https://www.webmanajemen.com/The%20Legend%20Of%20Neverland/Macros.html",
            "title": "Macros Auto Click Bluestacks",
            "date_published": "2021-09-06T17:00:00.000Z",
            "content_html": "<p>Indeed, in case you’re on BlueStacks construct 4.130 or higher, you’ll approach the Macros, a component that permits you to record yourself finishing a portion of these dull jobs/monotonous tasks, and afterward utilize these accounts to mechanize them in each resulting endeavor.</p>\n<!-- toc -->\n<pre><code>  - [Introduction: Macros barely used for Collect assets. Update abilities. Train troops. Assault brutes. Farming monsters. And More.](#introduction-macros-barely-used-for-collect-assets-update-abilities-train-troops-assault-brutes-farming-monsters-and-more)\n</code></pre>\n<ul>\n<li><a href=\"#features\">Features</a>\n<ul>\n<li><a href=\"#how-to-download-the-macros\">How to download the macros</a></li>\n<li><a href=\"#how-to-import-the-macros-script-into-bluestacks\">How to import the macros script into bluestacks</a></li>\n</ul>\n</li>\n</ul>\n<!-- tocstop -->\n<h4><span id=\"introduction-macros-barely-used-for-collect-assets-update-abilities-train-troops-assault-brutes-farming-monsters-and-more\"> Introduction: Macros barely used for Collect assets. Update abilities. Train troops. Assault brutes. Farming monsters. And More.</span></h4>\n<p>Presenting Macros in BlueStacks (for variants 4.140 or higher). Record an arrangement of activities on any piece of BlueStacks, including the home screen, tie it to a catch on your mouse or console, and duplicate them later with 100% accuracy. You can make Macros for any game however it is particularly viable in victory games and RPGs. <a href=\"https://www.bluestacks.com/features/macros.html\">Read more</a></p>\n<h1><span id=\"features\"> Features</span></h1>\n<ul>\n<li>Collect materials</li>\n<li>Mining: for upgrading gears and weapons</li>\n<li>Inscription: for upgrading skills and talents</li>\n<li>Insect: for produce crystal</li>\n<li>Auto fishing: <a href=\"/The%20Legend%20Of%20Neverland/Fishing.html\">Click Here To Read And Download The Script</a></li>\n</ul>\n<h3><span id=\"how-to-download-the-macros\"> How to download the macros</span></h3>\n<div style=\"clear:both;\"></div>\n<div style=\"width: 100%;\">\n  <img src=\"https://user-images.githubusercontent.com/12471057/132330527-d978ef5c-aa2d-4387-bf65-bf817ae66c97.png\" width=\"50%\" height=\"auto\" alt=\"Save Link As\" style=\"display:inline-block;float:left;\">\n  <img src=\"https://user-images.githubusercontent.com/12471057/132330641-d0b6dd99-34b4-42c4-81aa-4be7bddfb4b7.png\" width=\"50%\" height=\"auto\" alt=\"Save With Filename\" style=\"display:inline-block;float:left;\">\n</div>\n<div style=\"clear:both;\"></div>\n<table class=\"table table-responsive\">\n  <tr>\n    <td rowspan=\"2\">Auto Farming Materials</td>\n    <td><a href=\"Macros/auto%20action%20%5Bn%5D.json\">Download (normal mode)</a></td>\n  </tr>\n  <tr>\n    <td><a href=\"Macros/auto%20action%20%5Bu1%5D.json\">Download (unlimited mode)</a></td>\n  </tr>\n  <tr>\n    <td>Auto accept Trial Of Time Captain Invitation</td>\n    <td><a href=\"Macros/auto%20acc%20tt.json\">Download</a></td>\n  </tr>\n  <tr>\n    <td>Auto Claim Abyss Rewards</td>\n    <td><a href=\"Macros/auto%20claim%20abyss.json\">Download</a></td>\n  </tr>\n  <tr>\n    <td>Auto target monsters</td>\n    <td><a href=\"Macros/auto%20target.json\">Download</a></td>\n  </tr>\n</table>\n<h3><span id=\"how-to-import-the-macros-script-into-bluestacks\"> How to import the macros script into bluestacks</span></h3>\n<p><img src=\"https://user-images.githubusercontent.com/12471057/132939380-d9fbf1d7-2cb1-469a-a29b-cf3f1c33084f.png\" alt=\"Click Macros On Bluestacks\"><br>\n<em>Click Macros On Bluestacks</em></p>\n<p><img src=\"https://user-images.githubusercontent.com/12471057/132939401-b1a36399-2d91-46bd-82f9-78cb8e65c985.png\" alt=\"Click Import\"><br>\n<em>Click Import</em></p>\n<p><img src=\"https://user-images.githubusercontent.com/12471057/132939413-53a2940a-d018-4b04-963c-9968abd6304c.png\" alt=\"Select JSON macros script\"><br>\n<em>Select JSON macros script then import</em></p>\n<p><img src=\"https://user-images.githubusercontent.com/12471057/132939502-c9bb6e0c-284b-47a9-84b5-8863af2266f5.png\" alt=\"image\"><br>\n<em>Import successful</em></p>\n<div id=\"hexo-adsense-hidden\" style=\"display:none\"><div hexo-adsense=\"ads-content\">\n<ins class=\"adsbygoogle\" style=\"display:block; text-align:center;\" data-ad-layout=\"in-article\" data-ad-format=\"fluid\" data-ad-client=\"ca-pub-1165447249910969\" data-ad-slot=\"8418182273\"></ins>\n<script>\n     \n</script>\n</div><div hexo-adsense=\"ads-content\">\n<ins class=\"adsbygoogle\" style=\"display:block; text-align:center;\" data-ad-layout=\"in-article\" data-ad-format=\"fluid\" data-ad-client=\"ca-pub-1165447249910969\" data-ad-slot=\"7823254087\"></ins>\n<script>\n     \n</script>\n</div></div><style>*[hexo-adsense=\"ads-content\"] {\n  display: block;\n  background: #fff url(//i.imgur.com/mBbv90p.png) no-repeat top right;\n  color: #303030;\n  /*min-height: 18px;\n  min-width: 81px;*/\n  min-width: 250px;\n  text-align: center;\n  margin-left: auto;\n  margin-right: auto;\n}\n</style><script>/**\n * Browser processor\n */\n\nconst isBrowser = new Function(\"try {return this===window;}catch(e){ return false;}\");\n\n/**\n * @type {import(\"../lib/config\")}\n */\nconst hexoAdsenseConfig = JSON.parse(document.getElementById(\"hexo-adsense-config\").textContent);\n//console.log(hexoAdsenseConfig);\n\n/**\n * Insert after element\n * @param {HTMLElement} newElement\n * @param {HTMLElement} oldElement\n */\nfunction insertAfter(newElement, oldElement) {\n  if (oldElement && newElement) {\n    let parent = oldElement.parentNode;\n    if (parent.lastChild == oldElement) {\n      parent.appendChild(newElement);\n    } else {\n      parent.insertBefore(newElement, oldElement.nextSibling);\n    }\n  } else {\n    console.error(\"cannot insert element\");\n  }\n}\n\n/**\n * Replace elements with new\n * @param {HTMLElement} newElement\n * @param {HTMLElement} oldElement\n */\nfunction replaceWith(newElement, oldElement) {\n  if (!oldElement.parentNode) {\n    console.log(oldElement, \"parent null\");\n    let d = document.createElement(\"div\");\n    d.appendChild(oldElement);\n  } else {\n    //console.log(oldElement.parentNode.tagName);\n    oldElement.parentNode.replaceChild(newElement, oldElement);\n  }\n  /*\n  try {\n    oldElement.parentNode.replaceChild(newElement, oldElement);\n  } catch (e) {}\n  */\n}\n\nlet createElementFromHTML = function (htmlString) {\n  if (htmlString instanceof HTMLElement) {\n    return htmlString;\n  }\n  var div = document.createElement(\"div\");\n  div.innerHTML = htmlString.trim();\n\n  // Change this to div.childNodes to support multiple top-level nodes\n  return div.firstChild;\n};\n\nfunction oldMethod() {\n  let article = document.getElementsByTagName(\"article\");\n  let adscont = document.getElementById(\"hexo-adsense-ads-content\");\n  if (adscont && adscont.length) {\n    if (article && article.length) {\n      let linebreak = article.item(0).getElementsByTagName(\"br\");\n      if (linebreak.length > 0) {\n        return replaceWith(adscont, linebreak.item(0));\n      }\n\n      let headings = article.item(0).querySelectorAll(\"h2,h3,h4,h5\");\n      if (headings && headings.length > 0) {\n        return insertAfter(adscont, headings.item(0));\n      }\n    }\n  }\n}\n\n/**\n * random number between min and max\n */\nfunction ranumb(min, max) {\n  // min and max included\n  return Math.floor(Math.random() * (max - min + 1) + min);\n}\n\nfunction newMethod() {\n  const adshide = document.getElementById(\"hexo-adsense-hidden\");\n  let adscont = adshide.querySelectorAll('[hexo-adsense=\"ads-content\"]');\n  const article = document.querySelectorAll(\"article\");\n  if (article.length > 0 && adscont.length > 0) {\n    /**\n     * @type {HTMLElement}\n     */\n    let ads;\n    if (article.length == 1) {\n      console.log(\"webpage is post\");\n      let targetArticle = article.item(0);\n\n      // prioritize hexo-adsense-fill before auto ads on other elements\n      const ads_fill = targetArticle.querySelectorAll(\"*[hexo-adsense-fill]\");\n      if (ads_fill.length > 0) {\n        for (let index = 0; index < ads_fill.length; index++) {\n          const toFill = ads_fill[index];\n          if (typeof adscont[index] !== \"undefined\") {\n            toFill.appendChild(adscont[index]);\n          }\n        }\n      }\n\n      // the rest of the ads will show automatically after headers elements\n      adscont = adshide.querySelectorAll('[hexo-adsense=\"ads-content\"]');\n      //console.log(adscont.length, \"ads left\");\n      if (adscont.length > 0) {\n        const headers = targetArticle.querySelectorAll(\"h1,h2,h3,h4,h5,h6\");\n        if (headers.length > 0) {\n          // generate index of headers\n          let headers_index = Array.apply(null, { length: headers.length }).map(Number.call, Number);\n          //console.log(headers_index);\n          for (let index = 0; index < adscont.length; index++) {\n            ads = adscont[index];\n            const rheaders = shuffleArr2(headers_index);\n            // pick a random index\n            const rheader = rheaders.next().value;\n            if (typeof rheader === \"number\") {\n              const header = headers.item(rheader);\n              insertAfter(createElementFromHTML(ads), header);\n            }\n          }\n        }\n      }\n\n      // the rest of the ads will show automatically to linebreak elements\n      adscont = adshide.querySelectorAll('[hexo-adsense=\"ads-content\"]');\n      if (adscont.length > 0) {\n        const linebreaks = targetArticle.querySelectorAll(\"br,hr\");\n        if (linebreaks.length > 0) {\n          // generate index of linebreaks\n          let linebreaks_index = Array.apply(null, { length: linebreaks.length }).map(Number.call, Number);\n          //console.log(linebreaks_index);\n          // randomize linebreaks index\n          const rlinebreaks = shuffleArr2(linebreaks_index);\n          for (let index = 0; index < adscont.length; index++) {\n            ads = adscont[index];\n            // pick a random index\n            const rlinebreak = rlinebreaks.next().value;\n            if (typeof rlinebreak == \"number\") {\n              const linebreak = linebreaks.item(rlinebreak);\n              if ([\"blockquote\", \"img\", \"a\"].includes(linebreak.parentNode.tagName.toLowerCase())) {\n                index--;\n                continue;\n              }\n              //console.log(linebreak.tagName);\n              replaceWith(createElementFromHTML(ads), linebreak);\n            }\n          }\n        }\n      }\n    } else {\n      console.log(\"webpage is not post\");\n      // generate index of articles\n      let articles_index = Array.apply(null, { length: article.length }).map(Number.call, Number);\n      // randomize linebreaks index\n      const rArticles = shuffleArr2(articles_index);\n      for (let index = 0; index < adscont.length; index++) {\n        ads = adscont[index];\n        // pick a random index\n        const rArticle = rArticles.next().value;\n        if (typeof rArticle == \"number\") {\n          //console.log(\"adsense display to article index\", rArticle);\n          const pickArticle = article.item(rArticle);\n          pickArticle.appendChild(createElementFromHTML(ads));\n        }\n      }\n    }\n\n    // summon adsbygoogle.push()\n    adsensePush();\n  }\n}\n\nfunction eventMethod() {\n  document.addEventListener(\"DOMContentLoaded\", function () {\n    // we look for the jump break\n    var _moreElm = document.querySelector(\"a[name=more]\");\n\n    // here is your adsense code\n    var _adsenseCode = \" [replace this with code from the last step] \";\n\n    // This inserts the ad inside of the blog post\n    _moreElm.insertAdjacentHTML(\"afterend\", '<div class=\"adsense-after-break\">' + _adsenseCode + \"</div>\");\n\n    // Initialize the ads here\n    (adsbygoogle = window.adsbygoogle || []).push({});\n  });\n}\n\n/**\n * Shuffle Array\n * @param {any[]} array\n * @see {@link https://stackoverflow.com/a/18806417}\n * @returns\n */\nfunction shuffleArr(array) {\n  var i = array.length,\n    j = 0,\n    temp;\n\n  while (i--) {\n    j = Math.floor(Math.random() * (i + 1));\n\n    // swap randomly chosen element with current element\n    temp = array[i];\n    array[i] = array[j];\n    array[j] = temp;\n  }\n\n  return array;\n}\n\n/**\n * Next generation of non-repeated randomizer\n * @see {@link shuffleArr}\n * @param {any[]} array\n */\nfunction* shuffleArr2(array) {\n  var i = array.length;\n\n  while (i--) {\n    yield array.splice(Math.floor(Math.random() * (i + 1)), 1)[0];\n  }\n}\n\nfunction adsensePush() {\n  for (let index = 0; index < document.querySelectorAll('[hexo-adsense=\"ads-content\"]').length; index++) {\n    (adsbygoogle = window.adsbygoogle || []).push({\n      google_ad_client: hexoAdsenseConfig.pub,\n    });\n  }\n}\n\nif (!isBrowser()) {\n  module.exports = {\n    replaceWith,\n    insertAfter,\n  };\n} else {\n  window.__tcfapi = (command, parameter, callback) => {\n    if (command === \"checkConsent\") {\n      callback(true);\n    }\n    if (command === \"addEventListener\") {\n      callback({ eventStatus: \"tcloaded\", gdprApplies: false }, true);\n    }\n  };\n\n  if (typeof document.addEventListener == \"function\") {\n    document.addEventListener(\"DOMContentLoaded\", newMethod);\n  } else if (typeof window.attachEvent == \"function\") {\n    window.attachEvent(\"onload\", newMethod);\n  } else {\n    window.onload = newMethod;\n  }\n}\n</script>",
            "tags": [
                "Macros",
                "Auto Click"
            ]
        }
    ]
}