{"version":3,"file":"index.modern.mjs","sources":["../src/serialize.ts","../src/hash.ts"],"sourcesContent":["/**\n * Serializes any give value into a string. Used internally by the `hash` function.\n *\n * @example\n *\n * ```ts\n * class B {}\n *\n * serialize(B); // functionclass B{}\n * ```\n *\n * **Note**: Symbols uniqueness are not guaranteed, as they are transformed to strings.\n *\n * @param property The property to Serialize\n * @returns A unique string representation of the property\n * @see https://tinylibs.js.org/packages/object-code/\n */\nexport function serialize<T>(value?: T): string {\n  const type = typeof value;\n\n  if (value && type === 'object' && !(value instanceof Date || value instanceof RegExp)) {\n    const copy = (Array.isArray(value) ? [] : {}) as Record<keyof T, string>;\n\n    const keys = Object.keys(value).sort((a, b) => (a > b ? 1 : -1));\n    let i = keys.length;\n\n    while (i--) {\n      /* eslint-disable @typescript-eslint/no-non-null-assertion */\n      const key = keys[i]! as keyof T;\n      copy[key] = serialize(value[key]);\n    }\n\n    return (\n      //@ts-expect-error ignore if not present\n      String(value.constructor) + JSON.stringify(copy, keys)\n    );\n  }\n\n  return type + String(value);\n}\n","import { serialize } from './serialize';\n\n/**\n * Hashes a given value into a unique number.\n *\n * This function accepts **ANY** kind of value, like `functions`, `classes`, `objects` and so on.\n *\n * **Note**: Symbols uniqueness are not guaranteed, as they are transformed to strings.\n *\n * @example\n *\n * ```ts\n * class B {}\n *\n * const bHash = hash(B);\n * const bInstanceHash = hash(new B());\n * const bArrayHash = hash([B, new B(), new B(), { b: new B() }]);\n * const bBuilderHash = hash(() => B);\n * const bFactoryHash = hash(() => new B());\n * ```\n *\n * @param val The value to be hashed\n * @returns The signed integer result from the provided value\n * @see https://tinylibs.js.org/packages/object-code/\n */\nexport function hash(val?: unknown): number {\n  val = serialize(val);\n\n  let hash = 5381;\n  let index = 0;\n\n  while (index < (val as string).length) {\n    hash = (hash * 33) ^ (val as string).charCodeAt(index++);\n  }\n\n  return hash;\n}\n"],"names":["serialize","value","type","Date","RegExp","copy","Array","isArray","keys","Object","sort","a","b","i","length","key","String","constructor","JSON","stringify","hash","val","index","charCodeAt"],"mappings":"AAiBgBA,SAAAA,EAAaC,GAC3B,MAAMC,SAAcD,EAEpB,GAAIA,GAAkB,WAATC,KAAuBD,aAAiBE,MAAQF,aAAiBG,QAAS,CACrF,MAAMC,EAAQC,MAAMC,QAAQN,GAAS,GAAK,GAEpCO,EAAOC,OAAOD,KAAKP,GAAOS,KAAK,CAACC,EAAGC,IAAOD,EAAIC,EAAI,GAAK,GAC7D,IAAIC,EAAIL,EAAKM,OAEb,KAAOD,KAAK,CAEV,MAAME,EAAMP,EAAKK,GACjBR,EAAKU,GAAOf,EAAUC,EAAMc,IAG9B,OAEEC,OAAOf,EAAMgB,aAAeC,KAAKC,UAAUd,EAAMG,GAIrD,OAAON,EAAOc,OAAOf,YCbPmB,EAAKC,GACnBA,EAAMrB,EAAUqB,GAEhB,IAAID,EAAO,KACPE,EAAQ,EAEZ,KAAOA,EAASD,EAAeP,QAC7BM,EAAe,GAAPA,EAAcC,EAAeE,WAAWD,KAGlD,OAAOF"}