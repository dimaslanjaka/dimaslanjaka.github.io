<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>WMI</title>
    <link>https://www.webmanajemen.com/</link>
    
    <image>
      <url>https://www.webmanajemen.com/logo.png</url>
      <title>WMI</title>
      <link>https://www.webmanajemen.com/</link>
    </image>
    
    <atom:link href="https://www.webmanajemen.com/rss.xml" rel="self" type="application/rss+xml"/>
    
    <description>Website Management Indonesia is a blog about scripts, tips and tricks, games, software. Covering php, javascript, jquery, mysql, seo, e-commerce and others.</description>
    <pubDate>Fri, 19 Jan 2024 01:59:39 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>Spring Boot login programmatically</title>
      <link>https://www.webmanajemen.com/2024/01/spring-boot-login-programatically.html</link>
      <guid>https://www.webmanajemen.com/2024/01/spring-boot-login-programatically.html</guid>
      <pubDate>Thu, 18 Jan 2024 13:56:37 GMT</pubDate>
      
      <description>How to implement login programmatically in spring boot java</description>
      
      
      
      <content:encoded><![CDATA[<p><strong>Important</strong>:<br>First you need a <a href="/2024/01/spring-boot-custom-passwordEncoder.html">custom password encoder</a> for your spring boot project, so you can log in using your user credentials. <a href="/2024/01/spring-boot-custom-passwordEncoder.html">READ HERE - custom password encoder for spring boot</a>.</p><h2 id="Add-Field">Add Field</h2><p>add custom fields to your <code>@Controller</code> class like my LoginController below.</p><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.springframework.security.authentication.AuthenticationManager;<span class="hljs-keyword">import</span> org.springframework.stereotype.Controller;<span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<span class="hljs-meta">@Controller</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">LoginController</span> &#123;  <span class="hljs-meta">@Autowired</span>  <span class="hljs-keyword">private</span> UserService userService;  <span class="hljs-keyword">private</span> CustomPassword passwordEncoder;  <span class="hljs-keyword">private</span> AuthenticationManager authenticationManager;  <span class="hljs-keyword">public</span> <span class="hljs-title function_">LoginController</span><span class="hljs-params">(UserService userService, CustomPassword passwordEncoder, AuthenticationManager authenticationManager)</span> &#123;      <span class="hljs-built_in">this</span>.userService = userService;      <span class="hljs-built_in">this</span>.passwordEncoder = passwordEncoder;      <span class="hljs-built_in">this</span>.authenticationManager = authenticationManager;  &#125;&#125;</code></pre><h2 id="Create-endpoint-mapping">Create endpoint mapping</h2><p>create new url mapping for authenticate the given identifier to valid session token.</p><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(value = &quot;/login/&#123;uuid&#125;&quot;, produces = MediaType.APPLICATION_JSON_VALUE)</span><span class="hljs-meta">@ResponseBody</span><span class="hljs-keyword">public</span> String <span class="hljs-title function_">loginUUID</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable</span> String uuid, HttpServletRequest request, HttpServletResponse response)</span> &#123;    <span class="hljs-type">JSONObject</span> <span class="hljs-variable">jsonObject</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JSONObject</span>();    Optional&lt;User&gt; find = Optional.ofNullable(userService.findUserByEmail(uuid));    <span class="hljs-type">SecurityContext</span> <span class="hljs-variable">securityContext</span> <span class="hljs-operator">=</span> SecurityContextHolder.getContext();    <span class="hljs-keyword">if</span> (find.isPresent()) &#123;        <span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> find.get();        <span class="hljs-type">String</span> <span class="hljs-variable">password</span> <span class="hljs-operator">=</span> passwordEncoder.decode(user.getPassword());        <span class="hljs-type">String</span> <span class="hljs-variable">email</span> <span class="hljs-operator">=</span> user.getEmail();        jsonObject.put(<span class="hljs-string">&quot;email&quot;</span>, user.getEmail());        <span class="hljs-keyword">try</span> &#123;            <span class="hljs-type">UsernamePasswordAuthenticationToken</span> <span class="hljs-variable">loginToken</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UsernamePasswordAuthenticationToken</span>(email,                    password);            <span class="hljs-type">Authentication</span> <span class="hljs-variable">authenticatedUser</span> <span class="hljs-operator">=</span> authenticationManager.authenticate(loginToken);            securityContext.setAuthentication(authenticatedUser);            <span class="hljs-type">HttpSession</span> <span class="hljs-variable">session</span> <span class="hljs-operator">=</span> request.getSession(<span class="hljs-literal">true</span>);            session.setAttribute(<span class="hljs-string">&quot;SPRING_SECURITY_CONTEXT&quot;</span>, securityContext);        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;            System.err.println(<span class="hljs-string">&quot;Error while login&quot;</span>);        &#125;    &#125;    <span class="hljs-type">Authentication</span> <span class="hljs-variable">authentication</span> <span class="hljs-operator">=</span> securityContext.getAuthentication();    <span class="hljs-keyword">if</span> (authentication != <span class="hljs-literal">null</span>) &#123;        jsonObject.put(<span class="hljs-string">&quot;is login&quot;</span>, authentication.isAuthenticated());        jsonObject.put(<span class="hljs-string">&quot;authorities&quot;</span>, authentication.getAuthorities());        jsonObject.put(<span class="hljs-string">&quot;authorities has admin&quot;</span>, authentication.getAuthorities().stream()                .anyMatch(a -&gt; a.getAuthority().toLowerCase(Locale.ROOT).contains(<span class="hljs-string">&quot;admin&quot;</span>)));    &#125;    <span class="hljs-keyword">return</span> jsonObject.toString();&#125;</code></pre><p>above codes will return content-type: application/json</p><h2 id="Full-codes-sample">Full codes sample</h2><p>full my sample codes login programmatically with <a href="/2024/01/spring-boot-custom-passwordEncoder.html">custom password encoder for spring boot</a>.</p><pre><code class="hljs java"><span class="hljs-keyword">package</span> web.user;<span class="hljs-keyword">import</span> java.util.Locale;<span class="hljs-keyword">import</span> java.util.Optional;<span class="hljs-keyword">import</span> org.json.JSONObject;<span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<span class="hljs-keyword">import</span> org.springframework.http.MediaType;<span class="hljs-keyword">import</span> org.springframework.security.authentication.AuthenticationManager;<span class="hljs-keyword">import</span> org.springframework.security.authentication.UsernamePasswordAuthenticationToken;<span class="hljs-keyword">import</span> org.springframework.security.core.Authentication;<span class="hljs-keyword">import</span> org.springframework.security.core.context.SecurityContext;<span class="hljs-keyword">import</span> org.springframework.security.core.context.SecurityContextHolder;<span class="hljs-keyword">import</span> org.springframework.stereotype.Controller;<span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.GetMapping;<span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.PathVariable;<span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;<span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.ResponseBody;<span class="hljs-keyword">import</span> jakarta.servlet.http.HttpServletRequest;<span class="hljs-keyword">import</span> jakarta.servlet.http.HttpServletResponse;<span class="hljs-keyword">import</span> jakarta.servlet.http.HttpSession;<span class="hljs-keyword">import</span> web.CustomPassword;<span class="hljs-meta">@Controller</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">LoginController</span> &#123;    <span class="hljs-meta">@Autowired</span>    <span class="hljs-keyword">private</span> UserService userService;    <span class="hljs-keyword">private</span> CustomPassword passwordEncoder;    <span class="hljs-keyword">private</span> AuthenticationManager authenticationManager;    <span class="hljs-keyword">public</span> <span class="hljs-title function_">LoginController</span><span class="hljs-params">(UserService userService, CustomPassword passwordEncoder,</span><span class="hljs-params">            AuthenticationManager authenticationManager)</span> &#123;        <span class="hljs-built_in">this</span>.userService = userService;        <span class="hljs-built_in">this</span>.passwordEncoder = passwordEncoder;        <span class="hljs-built_in">this</span>.authenticationManager = authenticationManager;    &#125;    <span class="hljs-meta">@RequestMapping(value = &quot;/login/&#123;uuid&#125;&quot;, produces = MediaType.APPLICATION_JSON_VALUE)</span>    <span class="hljs-meta">@ResponseBody</span>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">loginUUID</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable</span> String uuid, HttpServletRequest request, HttpServletResponse response)</span> &#123;        <span class="hljs-type">JSONObject</span> <span class="hljs-variable">jsonObject</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JSONObject</span>();        Optional&lt;User&gt; find = Optional.ofNullable(userService.findUserByUuid(uuid));        <span class="hljs-type">SecurityContext</span> <span class="hljs-variable">securityContext</span> <span class="hljs-operator">=</span> SecurityContextHolder.getContext();        <span class="hljs-keyword">if</span> (find.isPresent()) &#123;            <span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> find.get();            <span class="hljs-type">String</span> <span class="hljs-variable">password</span> <span class="hljs-operator">=</span> passwordEncoder.decode(user.getPassword());            <span class="hljs-type">String</span> <span class="hljs-variable">email</span> <span class="hljs-operator">=</span> user.getEmail();            jsonObject.put(<span class="hljs-string">&quot;email&quot;</span>, user.getEmail());            <span class="hljs-keyword">try</span> &#123;                <span class="hljs-type">UsernamePasswordAuthenticationToken</span> <span class="hljs-variable">loginToken</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UsernamePasswordAuthenticationToken</span>(email,                        password);                <span class="hljs-type">Authentication</span> <span class="hljs-variable">authenticatedUser</span> <span class="hljs-operator">=</span> authenticationManager.authenticate(loginToken);                securityContext.setAuthentication(authenticatedUser);                <span class="hljs-type">HttpSession</span> <span class="hljs-variable">session</span> <span class="hljs-operator">=</span> request.getSession(<span class="hljs-literal">true</span>);                session.setAttribute(<span class="hljs-string">&quot;SPRING_SECURITY_CONTEXT&quot;</span>, securityContext);            &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;                System.err.println(<span class="hljs-string">&quot;Error while login&quot;</span>);            &#125;        &#125;        <span class="hljs-type">Authentication</span> <span class="hljs-variable">authentication</span> <span class="hljs-operator">=</span> securityContext.getAuthentication();        <span class="hljs-keyword">if</span> (authentication != <span class="hljs-literal">null</span>) &#123;            jsonObject.put(<span class="hljs-string">&quot;is login&quot;</span>, authentication.isAuthenticated());            jsonObject.put(<span class="hljs-string">&quot;authorities&quot;</span>, authentication.getAuthorities());            jsonObject.put(<span class="hljs-string">&quot;authorities has admin&quot;</span>, authentication.getAuthorities().stream()                    .anyMatch(a -&gt; a.getAuthority().toLowerCase(Locale.ROOT).contains(<span class="hljs-string">&quot;admin&quot;</span>)));        &#125;        <span class="hljs-keyword">return</span> jsonObject.toString();    &#125;&#125;</code></pre>]]></content:encoded>
      
      
      <category domain="https://www.webmanajemen.com/categories/programming/">programming</category>
      
      
      <category domain="https://www.webmanajemen.com/tags/java/">java</category>
      
      <category domain="https://www.webmanajemen.com/tags/spring-boot/">spring-boot</category>
      
      
      <comments>https://www.webmanajemen.com/2024/01/spring-boot-login-programatically.html#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>custom passwordEncoder for spring boot java</title>
      <link>https://www.webmanajemen.com/2024/01/spring-boot-custom-passwordEncoder.html</link>
      <guid>https://www.webmanajemen.com/2024/01/spring-boot-custom-passwordEncoder.html</guid>
      <pubDate>Thu, 18 Jan 2024 13:23:22 GMT</pubDate>
      
      <description>Custom PasswordEncoder that works within spring boot java project</description>
      
      
      
      <content:encoded><![CDATA[<p>Source code custom password encoder for spring</p><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.jetbrains.annotations.NotNull;<span class="hljs-keyword">import</span> org.springframework.security.crypto.password.PasswordEncoder;<span class="hljs-comment">// custom password encoder</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CustomPassword</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">PasswordEncoder</span> &#123;    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> String SALT;    <span class="hljs-keyword">public</span> <span class="hljs-title function_">CustomPassword</span><span class="hljs-params">(String str)</span> &#123;        <span class="hljs-built_in">this</span>.SALT = str;    &#125;    <span class="hljs-keyword">public</span> <span class="hljs-title function_">CustomPassword</span><span class="hljs-params">()</span> &#123;        <span class="hljs-built_in">this</span>.SALT = <span class="hljs-string">&quot;DEFAULT_SALT&quot;</span>;    &#125;    <span class="hljs-keyword">private</span> <span class="hljs-meta">@NotNull</span> String <span class="hljs-title function_">a</span><span class="hljs-params">(String str)</span> &#123;        <span class="hljs-type">int</span>[] f9939a = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[<span class="hljs-number">256</span>];        <span class="hljs-type">int</span>[] iArr = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[<span class="hljs-number">256</span>];        <span class="hljs-type">String</span> <span class="hljs-variable">str2</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.SALT;        <span class="hljs-type">int</span> <span class="hljs-variable">length</span> <span class="hljs-operator">=</span> str2.length();        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">256</span>; i++) &#123;            iArr[i] = str2.charAt(i % length);            f9939a[i] = i;        &#125;        <span class="hljs-type">int</span> <span class="hljs-variable">i2</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i3</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i3 &lt; <span class="hljs-number">256</span>; i3++) &#123;            <span class="hljs-type">int</span>[] iArr2 = f9939a;            <span class="hljs-type">int</span> <span class="hljs-variable">i4</span> <span class="hljs-operator">=</span> iArr2[i3];            i2 = ((i2 + i4) + iArr[i3]) % <span class="hljs-number">256</span>;            iArr2[i3] = iArr2[i2];            iArr2[i2] = i4;        &#125;        <span class="hljs-type">StringBuilder</span> <span class="hljs-variable">sb</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuilder</span>();        <span class="hljs-type">int</span> <span class="hljs-variable">i5</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;        <span class="hljs-type">int</span> <span class="hljs-variable">i6</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i7</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i7 &lt; str.length(); i7++) &#123;            i5 = (i5 + <span class="hljs-number">1</span>) % <span class="hljs-number">256</span>;            <span class="hljs-type">int</span> <span class="hljs-variable">i8</span> <span class="hljs-operator">=</span> f9939a[i5];            i6 = (i6 + i8) % <span class="hljs-number">256</span>;            f9939a[i5] = f9939a[i6];            f9939a[i6] = i8;            sb.append(Character.toChars(f9939a[(f9939a[i5] + i8) % <span class="hljs-number">256</span>] ^ str.charAt(i7)));        &#125;        <span class="hljs-keyword">return</span> sb.toString();    &#125;    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">decode</span><span class="hljs-params">(<span class="hljs-meta">@NotNull</span> CharSequence str)</span> &#123;        <span class="hljs-type">StringBuilder</span> <span class="hljs-variable">sb</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuilder</span>();        <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;        <span class="hljs-keyword">while</span> (i &lt; str.length()) &#123;            <span class="hljs-keyword">try</span> &#123;                <span class="hljs-type">int</span> <span class="hljs-variable">i2</span> <span class="hljs-operator">=</span> i + <span class="hljs-number">2</span>;                sb.append((<span class="hljs-type">char</span>) Integer.parseInt(String.valueOf(str).substring(i, i2), <span class="hljs-number">16</span>));                i = i2;            &#125; <span class="hljs-keyword">catch</span> (Exception e3) &#123;                <span class="hljs-comment">//</span>            &#125;        &#125;        <span class="hljs-keyword">return</span> a(sb.toString());    &#125;    <span class="hljs-meta">@Override</span>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">encode</span><span class="hljs-params">(CharSequence str)</span> &#123;        <span class="hljs-type">String</span> <span class="hljs-variable">a3</span> <span class="hljs-operator">=</span> a(String.valueOf(str));        <span class="hljs-type">StringBuilder</span> <span class="hljs-variable">sb</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuilder</span>();        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; a3.length(); i++) &#123;            sb.append(String.format(<span class="hljs-string">&quot;%02x&quot;</span>, (<span class="hljs-type">int</span>) a3.charAt(i)));        &#125;        <span class="hljs-keyword">return</span> sb.toString();    &#125;    <span class="hljs-meta">@Override</span>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">matches</span><span class="hljs-params">(CharSequence rawPassword, String encodedPassword)</span> &#123;        <span class="hljs-comment">// return encode(rawPassword).contentEquals(encodedPassword);</span>        <span class="hljs-keyword">return</span> decode(encodedPassword).contentEquals(rawPassword);    &#125;&#125;</code></pre><p>example custom password implementation in spring security</p><pre><code class="hljs java"><span class="hljs-keyword">import</span> javax.sql.DataSource;<span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<span class="hljs-keyword">import</span> org.springframework.context.annotation.Bean;<span class="hljs-keyword">import</span> org.springframework.context.annotation.Configuration;<span class="hljs-keyword">import</span> org.springframework.security.authentication.AuthenticationManager;<span class="hljs-keyword">import</span> org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;<span class="hljs-keyword">import</span> org.springframework.security.config.annotation.web.builders.HttpSecurity;<span class="hljs-keyword">import</span> org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;<span class="hljs-keyword">import</span> org.springframework.security.config.annotation.web.configurers.AbstractHttpConfigurer;<span class="hljs-keyword">import</span> org.springframework.security.core.userdetails.UserDetailsService;<span class="hljs-keyword">import</span> org.springframework.security.web.SecurityFilterChain;<span class="hljs-keyword">import</span> org.springframework.security.web.util.matcher.AntPathRequestMatcher;<span class="hljs-meta">@Configuration</span><span class="hljs-meta">@EnableWebSecurity</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SecurityConfig</span> &#123;  <span class="hljs-meta">@Autowired</span>  <span class="hljs-keyword">private</span> UserDetailsService userDetailsService;  <span class="hljs-meta">@Autowired</span>  DataSource dataSource;  <span class="hljs-meta">@Bean</span>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> CustomPassword <span class="hljs-title function_">passwordEncoder</span><span class="hljs-params">()</span> &#123;    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CustomPassword</span>(<span class="hljs-string">&quot;passwordEncoder&quot;</span>);  &#125;  <span class="hljs-meta">@Bean</span>  <span class="hljs-keyword">public</span> AuthenticationManager <span class="hljs-title function_">authenticationManager</span><span class="hljs-params">(HttpSecurity http)</span> <span class="hljs-keyword">throws</span> Exception &#123;    <span class="hljs-keyword">return</span> http.getSharedObject(AuthenticationManagerBuilder.class)        .build();  &#125;  <span class="hljs-meta">@Autowired</span>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">configureGlobal</span><span class="hljs-params">(<span class="hljs-keyword">final</span> AuthenticationManagerBuilder auth)</span> <span class="hljs-keyword">throws</span> Exception &#123;    auth        .userDetailsService(userDetailsService)        .passwordEncoder(passwordEncoder());  &#125;  <span class="hljs-meta">@Bean</span>  <span class="hljs-keyword">public</span> SecurityFilterChain <span class="hljs-title function_">filterChain</span><span class="hljs-params">(HttpSecurity http)</span> <span class="hljs-keyword">throws</span> Exception &#123;    http        .csrf(AbstractHttpConfigurer::disable)        .authorizeHttpRequests((authorize) -&gt; authorize            <span class="hljs-comment">// admin area</span>            .requestMatchers(<span class="hljs-string">&quot;/users/**&quot;</span>).hasRole(<span class="hljs-string">&quot;ADMIN&quot;</span>)            .requestMatchers(<span class="hljs-string">&quot;/add/**&quot;</span>).hasRole(<span class="hljs-string">&quot;ADMIN&quot;</span>)            .requestMatchers(<span class="hljs-string">&quot;/delete/**&quot;</span>).hasRole(<span class="hljs-string">&quot;ADMIN&quot;</span>)            .requestMatchers(<span class="hljs-string">&quot;/edit/**&quot;</span>).hasRole(<span class="hljs-string">&quot;ADMIN&quot;</span>)            <span class="hljs-comment">// need login area</span>            .requestMatchers(<span class="hljs-string">&quot;/me&quot;</span>).authenticated()            <span class="hljs-comment">// allow all non configured endpoint from above</span>            <span class="hljs-comment">// like css, js, and other static assets</span>            .anyRequest().permitAll())        .formLogin(            form -&gt; form                .loginPage(<span class="hljs-string">&quot;/login&quot;</span>)                .loginProcessingUrl(<span class="hljs-string">&quot;/login&quot;</span>)                <span class="hljs-comment">// default success login redirect to dashboard</span>                .defaultSuccessUrl(<span class="hljs-string">&quot;/dashboard&quot;</span>)                .permitAll())        .logout(            logout -&gt; logout                .logoutRequestMatcher(                    <span class="hljs-keyword">new</span> <span class="hljs-title class_">AntPathRequestMatcher</span>(<span class="hljs-string">&quot;/logout&quot;</span>))                .permitAll());    <span class="hljs-keyword">return</span> http.build();  &#125;&#125;</code></pre><p>example custom spring password encoder implementation in user service</p><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Arrays;<span class="hljs-keyword">import</span> java.util.List;<span class="hljs-keyword">import</span> java.util.Optional;<span class="hljs-keyword">import</span> java.util.stream.Collectors;<span class="hljs-keyword">import</span> org.springframework.stereotype.Service;<span class="hljs-keyword">import</span> jakarta.persistence.EntityNotFoundException;<span class="hljs-keyword">import</span> your.<span class="hljs-keyword">package</span>.CustomPassword;<span class="hljs-meta">@SuppressWarnings(&#123; &quot;ArraysAsListWithZeroOrOneArgument&quot;, &quot;OptionalIsPresent&quot;, &quot;FieldMayBeFinal&quot;, &quot;Convert2MethodRef&quot; &#125;)</span><span class="hljs-meta">@Service</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">UserService</span> &#123;    <span class="hljs-keyword">private</span> UserRepository userRepository;    <span class="hljs-keyword">private</span> RoleRepository roleRepository;    <span class="hljs-keyword">private</span> CustomPassword passwordEncoder;    <span class="hljs-keyword">public</span> <span class="hljs-title function_">UserServiceImpl</span><span class="hljs-params">(UserRepository userRepository,</span><span class="hljs-params">            RoleRepository roleRepository,</span><span class="hljs-params">            CustomPassword passwordEncoder)</span> &#123;        <span class="hljs-built_in">this</span>.userRepository = userRepository;        <span class="hljs-built_in">this</span>.roleRepository = roleRepository;        <span class="hljs-built_in">this</span>.passwordEncoder = passwordEncoder;    &#125;    <span class="hljs-comment">// other your methods here</span>&#125;</code></pre>]]></content:encoded>
      
      
      <category domain="https://www.webmanajemen.com/categories/programming/">programming</category>
      
      
      <category domain="https://www.webmanajemen.com/tags/java/">java</category>
      
      <category domain="https://www.webmanajemen.com/tags/spring-boot/">spring-boot</category>
      
      
      <comments>https://www.webmanajemen.com/2024/01/spring-boot-custom-passwordEncoder.html#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>how to setup local site domain vhost xampp windows 2024</title>
      <link>https://www.webmanajemen.com/2024/01/how-to-setup-local-domain-vhost-xampp-windows.html</link>
      <guid>https://www.webmanajemen.com/2024/01/how-to-setup-local-domain-vhost-xampp-windows.html</guid>
      <pubDate>Fri, 05 Jan 2024 10:20:40 GMT</pubDate>
      
      <description>how to setup local site domain vhost xampp windows 2024</description>
      
      
      
      <content:encoded><![CDATA[<p>How to setup vhost config on xampp for local site domain, support for multiple local site.</p><h2 id="Setup-hosts">Setup hosts</h2><pre><code class="hljs php"><span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span>    localhost<span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span>    mysite-dev.com<span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span>    anothersite-dev.com</code></pre><h2 id="Setup-httpd-vhost-conf">Setup httpd-vhost.conf</h2><pre><code class="hljs conf">&lt;VirtualHost *:80&gt;  DocumentRoot C:/xampp/htdocs/  ServerName localhost&lt;/VirtualHost&gt;&lt;VirtualHost *:80&gt;    ServerName mysite-dev.com # domain name    DocumentRoot &quot;D:/Workspaces/PHP/ISP&quot;    &lt;Directory &quot;D:/Workspaces/PHP/ISP&quot;&gt;        Options Indexes FollowSymLinks        # AllowOverride All      # Deprecated        # Order Allow,Deny       # Deprecated        # Allow from all         # Deprecated        # --New way of doing it        Require all granted    &lt;/Directory&gt;&lt;/VirtualHost&gt;</code></pre><p>you can add more virtual host, like:</p><blockquote><p>using forward slash <code>/</code> instead of back slash <code>\</code></p></blockquote><pre><code class="hljs conf">&lt;VirtualHost *:80&gt;    ServerName yourdomain.tld    DocumentRoot &quot;your/directory&quot;    &lt;Directory &quot;your/directory&quot;&gt;        Options Indexes FollowSymLinks        Require all granted    &lt;/Directory&gt;&lt;/VirtualHost&gt;</code></pre><h2 id="Setup-httpd-xampp-conf">Setup httpd-xampp.conf</h2><p>this required for <code>mod_rewrite</code> module works. add new line:</p><pre><code class="hljs conf">&lt;Directory &quot;D:/Workspaces/PHP/ISP&quot;&gt;    AllowOverride All    Require all granted&lt;/Directory&gt;</code></pre><blockquote><p>change <strong>D:/Workspaces/PHP/ISP</strong> to your directory</p></blockquote><p>All sets, try start xampp.</p>]]></content:encoded>
      
      
      <category domain="https://www.webmanajemen.com/categories/programming/">programming</category>
      
      
      <category domain="https://www.webmanajemen.com/tags/php/">php</category>
      
      <category domain="https://www.webmanajemen.com/tags/apache/">apache</category>
      
      <category domain="https://www.webmanajemen.com/tags/xampp/">xampp</category>
      
      
      <comments>https://www.webmanajemen.com/2024/01/how-to-setup-local-domain-vhost-xampp-windows.html#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Geckoview cangoback equivalent of android webview.canGoBack</title>
      <link>https://www.webmanajemen.com/2023/11/geckoview-equivalent-cangoback-android-webview.html</link>
      <guid>https://www.webmanajemen.com/2023/11/geckoview-equivalent-cangoback-android-webview.html</guid>
      <pubDate>Fri, 10 Nov 2023 23:41:10 GMT</pubDate>
      
      <description>Geckoview cangoback equivalent of android webview.canGoBack How can i use canGoBack on GeckoView? below is sample default android webview canGoBack implemention canGoBack public void onBackPressed if </description>
      
      
      
      <content:encoded><![CDATA[<h2 id="How-can-i-use-canGoBack-on-GeckoView">How can i use canGoBack() on GeckoView?</h2><p>below is sample default android webview <code>canGoBack()</code> implemention</p><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onBackPressed</span><span class="hljs-params">()</span> &#123;    <span class="hljs-keyword">if</span> (webView.canGoBack()) &#123;        webView.goBack();    &#125; <span class="hljs-keyword">else</span> &#123;        <span class="hljs-built_in">super</span>.onBackPressed();    &#125;&#125;</code></pre><p>on geckoview</p><blockquote><p>You need to set a navigation delegate on the gecko session and use a global boolean to keep track of whether it can go back or not.</p></blockquote><h2 id="Java">Java</h2><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-type">boolean</span> <span class="hljs-variable">canGoBack</span> <span class="hljs-operator">=</span> <span class="hljs-literal">false</span>;<span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MainActivity</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AppCompatActivity</span> &#123;   <span class="hljs-meta">@Override</span>   <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onCreate</span><span class="hljs-params">(Bundle savedInstanceState)</span> &#123;       <span class="hljs-built_in">super</span>.onCreate(savedInstanceState);       session.setNavigationDelegate(<span class="hljs-keyword">new</span> <span class="hljs-title class_">GeckoSession</span>.NavigationDelegate() &#123;                  <span class="hljs-meta">@Override</span>                  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onCanGoBack</span><span class="hljs-params">(<span class="hljs-meta">@NonNull</span> GeckoSession session, <span class="hljs-type">boolean</span> canGoBack)</span> &#123;                      MainActivity.<span class="hljs-built_in">this</span>.canGoBack = canGoBack;                  &#125;         &#125;);   &#125;&#125;</code></pre><h2 id="Kotlin">Kotlin</h2><pre><code class="hljs kotlin">session.navigationDelegate = <span class="hljs-keyword">object</span> : NavigationDelegate &#123;    <span class="hljs-keyword">override</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">onCanGoBack</span><span class="hljs-params">(session: <span class="hljs-type">GeckoSession</span>, canGoBack: <span class="hljs-type">Boolean</span>)</span></span> &#123;        <span class="hljs-comment">// equivalent of webview.canGoBack</span>        <span class="hljs-keyword">this</span><span class="hljs-symbol">@MainActivity</span>.canGoBack = canGoBack    &#125;&#125;</code></pre>]]></content:encoded>
      
      
      <category domain="https://www.webmanajemen.com/categories/programming/">programming</category>
      
      
      <category domain="https://www.webmanajemen.com/tags/android/">android</category>
      
      <category domain="https://www.webmanajemen.com/tags/webview/">webview</category>
      
      <category domain="https://www.webmanajemen.com/tags/java/">java</category>
      
      <category domain="https://www.webmanajemen.com/tags/kotlin/">kotlin</category>
      
      <category domain="https://www.webmanajemen.com/tags/geckoview/">geckoview</category>
      
      
      <comments>https://www.webmanajemen.com/2023/11/geckoview-equivalent-cangoback-android-webview.html#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>List referrer of original traffic from android</title>
      <link>https://www.webmanajemen.com/2023/11/list-referrer-of-original-traffic-from-android.html</link>
      <guid>https://www.webmanajemen.com/2023/11/list-referrer-of-original-traffic-from-android.html</guid>
      <pubDate>Fri, 10 Nov 2023 01:36:29 GMT</pubDate>
      
      <description>List referrer of original traffic from android list original traffic referrer from android parsed with regex android-app:[&#92;w&#92;/&#92;.] android-app:[&#92;w&#92;/&#92;.] android-app://arun.com.chromerandroid-app://com.a</description>
      
      
      
      <content:encoded><![CDATA[<p>list original traffic referrer from android (parsed with regex <code>(android-app:[\w\/\.]+)</code>)</p><pre><code class="hljs log">android-app://arun.com.chromerandroid-app://com.andrewshu.android.redditandroid-app://com.andrewshu.android.redditdonationandroid-app://com.android.chromeandroid-app://com.google.android.apps.genie.geniewidgetandroid-app://com.google.android.apps.plus/https/plus.url.google.com/mobileappandroid-app://com.google.android.apps.social.spacesandroid-app://com.google.android.googlequicksearchboxandroid-app://com.google.android.googlequicksearchbox/googlequicksearchbox/suggestandroid-app://com.google.android.googlequicksearchbox/https/www.google.comandroid-app://com.guardianandroid-app://com.hanista.mobogramandroid-app://com.innologica.inoreaderandroid-app://com.laurencedawson.reddit_syncandroid-app://com.laurencedawson.reddit_sync.devandroid-app://com.laurencedawson.reddit_sync.proandroid-app://com.levelup.palabreandroid-app://com.linkedin.androidandroid-app://com.noinnion.android.greader.readerandroid-app://com.noinnion.android.greader.readerproandroid-app://com.paladin.auto.car.news.reviewsandroid-app://com.pinterestandroid-app://com.Slackandroid-app://com.stickypassword.androidandroid-app://com.tumblrandroid-app://com.twitpane.premiumandroid-app://com.twitter.androidandroid-app://de.idealo.androidandroid-app://ir.felegramandroid-app://org.telegram.messengerandroid-app://org.telegram.plus</code></pre>]]></content:encoded>
      
      
      <category domain="https://www.webmanajemen.com/categories/programming/">programming</category>
      
      
      <category domain="https://www.webmanajemen.com/tags/seo/">seo</category>
      
      
      <comments>https://www.webmanajemen.com/2023/11/list-referrer-of-original-traffic-from-android.html#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>What does google-services.json really do?</title>
      <link>https://www.webmanajemen.com/2023/10/what-does-google-servicesjson-really-do.html</link>
      <guid>https://www.webmanajemen.com/2023/10/what-does-google-servicesjson-really-do.html</guid>
      <pubDate>Mon, 30 Oct 2023 01:19:17 GMT</pubDate>
      
      <description>Android - What does google-services.json really do?</description>
      
      
      
      <content:encoded><![CDATA[<h2 id="What-is-this-file-really-for">What is this file really for</h2><p><strong>google-services.json</strong> contains developer credentials and configuration settings, which is needed to verify while connecting with GoogleApiClient. Though your service is working fine with your test device as it is detecting your developer account but after releasing your app in public, it will not work without the json file. So don’t delete it.</p><p><strong>The Official Documentation says:</strong></p><p>The application builds a GoogleApiClient, specifying which scopes and APIs the application will access. When the GoogleApiClient connects, the user is signed in.</p><p>See the <a href="https://developers.google.com/identity/sign-in/android/start">how it works</a> section</p><h2 id="How-does-google-services-json-file-affects-your-android-studio-project">How does google-services.json file affects your android studio project?</h2><p>I investigated a bit regarding the google-services plugin and json and found the sources to this plugin.</p><h2 id="First-things-first">First things first</h2><p>The gradle-plugin google-services that is referenced by classpath and with apply is a build-time plugin only! So it only influences the build-process of your app, but not the runtime-process!</p><p>This plugin is only meant as a quickstart-helper to integrating Google-services quickly in your app. Obviously, the process is somewhat convoluted and not documented, so Google should have made it clear what this process does.</p><p>In fact, I found the source code for the plugin version com.google.gms:google-services:1.4.0-beta3 and didnt find any specific reference in it regarding appinvites nor did I find any Google API for App Invites! (But maybe it just uses a generic API project with its project id, I didnt try this)</p><h2 id="What-it-does">What it does</h2><p>The google-services gradle-plugin looks for the mentioned google-services.json file in your app-module. Then it looks for configured settings like project-id’s and tracking-id’s and such, generated by the Google API developer console into the google-services.json file. From the settings it found, Android resource values are generated into the following path:</p><pre><code class="hljs kotlin"><span class="hljs-string">&quot;<span class="hljs-variable">$project</span>.buildDir/generated/res/google-services/<span class="hljs-variable">$variant</span>.dirName/values/values.xml&quot;</span></code></pre><p>For example for a debug-build of your app:</p><blockquote><p>just in short for second url, if you add google-services.json in your project there must be a auto-generated <code>google-services</code> folder for <code>debug</code> variant in this path</p></blockquote><pre><code class="hljs kotlin"><span class="hljs-string">&quot;app/build/generated/res/google-services/debug/values/values.xml&quot;</span></code></pre><p>E.g. if you followed the GCM tutorial, the JSON file would include the API project’s id as the following android-resource:</p><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">string</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;gcm_defaultSenderId&quot;</span>&gt;</span>project-id<span class="hljs-tag">&lt;/<span class="hljs-name">string</span>&gt;</span></code></pre><p>So this plugin and JSON file are not essential to running or publishing your app, it is just a quickstart helper to generate some basic android-resource files for easier integration of specific Google API features.</p><p>Notice in the source code referenced below that the google-services plugin always generates those android-resources for every app-variant that is defined in your app/build.gradle.</p><p>If you don’t want that, you should use those generated resources in the app-variants you want, and delete the others. Don’t forget to remove the google-services plugin apply from app/build.gradle, or else it will be regenerated for all app-variants.</p><h2 id="What-it-does-not">What it does not</h2><p>This plugin and JSON-file do NOT directly influence the inner workings of said Google-features for your app! If you already have followed older tutorials on <a href="http://developer.android.com">developer.android.com</a> on how to integrate e.g. GCM or Google Analytics, then you don’t even need to integrate either the gradle-plugin google-services or the google-services.json file!</p><h2 id="Notice-about-where-I-found-the-sources">Notice about where I found the sources</h2><p>After you integrated the google-services gradle-plugin and when sync your project, Gradle automatically downloads the google-services dependency to a path similar to this (on Windows, you might need to look into your home/.gradle for Linux):</p><pre><code class="hljs plaintext">C:\Users\user\.gradle\caches\modules-2\files-2.1\com.google.gms\google-services\1.4.0-beta3\f1580f62e3be313eba041ce19b64fd3f44cf8951\google-services-1.4.0-beta3-sources.jar</code></pre><p>If you extract this jar-file, you will find two files:</p><pre><code class="hljs plaintext">GoogleServicesPlugin.groovyGoogleServicesTask.java</code></pre><p>which contain the plain source code of the gradle-plugin.</p><pre><code class="hljs plaintext">GoogleServicesPlugin.groovy</code></pre><p>contains the handling of the app-variants and basic definitions of paths etc.</p><pre><code class="hljs plaintext">GoogleServicesTask.java</code></pre><p>contains the actual task-definition, look for the following method to see what it really does:</p><pre><code class="hljs java"><span class="hljs-meta">@TaskAction</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">action</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException &#123;</code></pre><h2 id="What-to-do-to-make-it-done">What to do, to make it done?</h2><p>add google-services dependency in <code>project_level</code> build.gradle, you can also use <code>version 3.0.0</code> if you are using app_compact library.</p><pre><code class="hljs gradle"><span class="hljs-comment">// Top-level build.gradle file</span><span class="hljs-keyword">classpath</span> <span class="hljs-string">&#x27;com.google.gms:google-services:2.1.2&#x27;</span></code></pre><p>now in <code>app_level</code> build.gradle you have to add at the <strong>bottom</strong>.</p><pre><code class="hljs gradle"><span class="hljs-comment">// app-level build.gradle file</span>apply plugin: <span class="hljs-string">&#x27;com.google.gms.google-services&#x27;</span></code></pre><p><strong>Note:</strong> Adding this line at the bottom of the gradle file is really important. Otherwise Gradle builds won’t give you any errors, but it won’t just work properly.</p><h2 id="Where-to-put-google-service-json-file-in-your-structure">Where to put google-service.json file in your structure.</h2><p>case 1.) if you have no build_flavor just put it in inside <code>/app/google-service.json</code> folder.</p><p>case 2.) if you have multiple build_flavor and you have different-different google_services.json files put inside <code>app/src/build_flavor/google-service.json</code>.</p><p>case 3.) if you have multiple build_flavor and you have single google_services.json file put inside <code>app/google-service.json</code>.</p>]]></content:encoded>
      
      
      <category domain="https://www.webmanajemen.com/categories/programming/">programming</category>
      
      
      <category domain="https://www.webmanajemen.com/tags/android/">android</category>
      
      <category domain="https://www.webmanajemen.com/tags/json/">json</category>
      
      
      <comments>https://www.webmanajemen.com/2023/10/what-does-google-servicesjson-really-do.html#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>android webview get content height</title>
      <link>https://www.webmanajemen.com/2023/10/android-webview-get-content-height.html</link>
      <guid>https://www.webmanajemen.com/2023/10/android-webview-get-content-height.html</guid>
      <pubDate>Sat, 28 Oct 2023 21:43:36 GMT</pubDate>
      
      <description>script to get content height of android webview</description>
      
      
      
      <content:encoded><![CDATA[<h2 id="Basic-methods">Basic methods</h2><p>Basic methods of Various ways to get the height of a Webview on Android. Nothing really works on all cases</p><pre><code class="hljs kotlin"><span class="hljs-keyword">import</span> android.view.ViewTreeObserver<span class="hljs-keyword">import</span> android.webkit.JavascriptInterface<span class="hljs-keyword">import</span> android.webkit.WebView<span class="hljs-keyword">import</span> android.webkit.WebViewClient<span class="hljs-comment">// Try 1</span><span class="hljs-keyword">private</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">getHeightFromDocumentBodyScrollHeight</span><span class="hljs-params">(webView: <span class="hljs-type">WebView</span>, setHeight: (<span class="hljs-type">Int</span>)-&gt;<span class="hljs-type">Unit</span>)</span></span> &#123;    webView.webViewClient = <span class="hljs-keyword">object</span> : WebViewClient() &#123;        <span class="hljs-keyword">override</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">onPageFinished</span><span class="hljs-params">(view: <span class="hljs-type">WebView</span>?, url: <span class="hljs-type">String</span>?)</span></span> &#123;            view?.let &#123;                it.settings.javaScriptEnabled = <span class="hljs-literal">true</span>                it.addJavascriptInterface(WebAppInterface(it, setHeight), <span class="hljs-string">&quot;AndroidGetHeightFunction&quot;</span>)                it.loadUrl(<span class="hljs-string">&quot;javascript:AndroidGetHeightFunction.resize(document.body.scrollHeight)&quot;</span>)            &#125;        &#125;    &#125;&#125;<span class="hljs-keyword">class</span> <span class="hljs-title class_">WebAppInterface</span>(<span class="hljs-keyword">private</span> <span class="hljs-keyword">val</span> webView: WebView, <span class="hljs-keyword">val</span> setHeight: (<span class="hljs-built_in">Int</span>)-&gt;<span class="hljs-built_in">Unit</span>) &#123;    <span class="hljs-meta">@JavascriptInterface</span>    <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">resize</span><span class="hljs-params">(height: <span class="hljs-type">Float</span>)</span></span> &#123;        webView.post &#123;            <span class="hljs-keyword">val</span> h = Math.floor((height * webView.context.resources.displayMetrics.density).toDouble()).toInt()            setHeight(h)            webView.settings.javaScriptEnabled = <span class="hljs-literal">false</span>        &#125;    &#125;&#125;<span class="hljs-comment">// Try 2</span><span class="hljs-keyword">private</span> <span class="hljs-keyword">val</span> heightWebViewJSScript = <span class="hljs-string">&quot;(function() &#123;var pageHeight = 0;function findHighestNode(nodesList) &#123; for (var i = nodesList.length - 1; i &gt;= 0; i--) &#123;if (nodesList[i].scrollHeight &amp;&amp; nodesList[i].clientHeight) &#123;var elHeight = Math.max(nodesList[i].scrollHeight, nodesList[i].clientHeight);pageHeight = Math.max(elHeight, pageHeight);&#125;if (nodesList[i].childNodes.length) findHighestNode(nodesList[i].childNodes);&#125;&#125;findHighestNode(document.documentElement.childNodes); return pageHeight;&#125;)()&quot;</span><span class="hljs-keyword">private</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">getHeightWithJavascriptEvaluation</span><span class="hljs-params">(webView: <span class="hljs-type">WebView</span>, setHeight: (<span class="hljs-type">Int</span>)-&gt;<span class="hljs-type">Unit</span>)</span></span> &#123;    webView.settings.javaScriptEnabled = <span class="hljs-literal">true</span>    webView.webViewClient = <span class="hljs-keyword">object</span> : WebViewClient() &#123;        <span class="hljs-keyword">override</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">onPageFinished</span><span class="hljs-params">(view: <span class="hljs-type">WebView</span>, url: <span class="hljs-type">String</span>)</span></span> &#123;            webView.evaluateJavascript(heightWebViewJSScript) &#123; height -&gt;                <span class="hljs-keyword">val</span> h = Math.floor((height.toInt() * webView.context.resources.displayMetrics.density).toDouble()).toInt()                setHeight(h)                webView.settings.javaScriptEnabled = <span class="hljs-literal">false</span>            &#125;        &#125;    &#125;&#125;<span class="hljs-comment">// Try 3</span><span class="hljs-keyword">private</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">getHeightWithViewTreeObserver</span><span class="hljs-params">(webView: <span class="hljs-type">WebView</span>, setHeight: (<span class="hljs-type">Int</span>)-&gt;<span class="hljs-type">Unit</span>)</span></span> &#123;        webView.viewTreeObserver.addOnPreDrawListener(<span class="hljs-keyword">object</span> : ViewTreeObserver.OnPreDrawListener &#123;            <span class="hljs-keyword">override</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">onPreDraw</span><span class="hljs-params">()</span></span>: <span class="hljs-built_in">Boolean</span> &#123;                <span class="hljs-keyword">val</span> height = webView.measuredHeight                <span class="hljs-keyword">if</span> (height != <span class="hljs-number">0</span>) &#123;                    <span class="hljs-keyword">val</span> h = Math.floor((height * webView.context.resources.displayMetrics.density).toDouble()).toInt()                    setHeight(height)                    webView.viewTreeObserver.removeOnPreDrawListener(<span class="hljs-keyword">this</span>)                &#125;                <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>            &#125;        &#125;)&#125;<span class="hljs-comment">// Try 4</span><span class="hljs-keyword">private</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">getHeightWithLayoutChangeListener</span><span class="hljs-params">(webView: <span class="hljs-type">WebView</span>, setHeight: (<span class="hljs-type">Int</span>)-&gt;<span class="hljs-type">Unit</span>)</span></span> &#123;    webView.addOnLayoutChangeListener&#123; _, _, _, _, _, _, _, _, _ -&gt;        setHeight(webView.contentHeight)    &#125;&#125;</code></pre>]]></content:encoded>
      
      
      <category domain="https://www.webmanajemen.com/categories/programming/">programming</category>
      
      
      <category domain="https://www.webmanajemen.com/tags/android/">android</category>
      
      <category domain="https://www.webmanajemen.com/tags/webview/">webview</category>
      
      <category domain="https://www.webmanajemen.com/tags/java/">java</category>
      
      <category domain="https://www.webmanajemen.com/tags/kotlin/">kotlin</category>
      
      
      <comments>https://www.webmanajemen.com/2023/10/android-webview-get-content-height.html#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Android SDK API List</title>
      <link>https://www.webmanajemen.com/2023/10/android-sdk-api-list.html</link>
      <guid>https://www.webmanajemen.com/2023/10/android-sdk-api-list.html</guid>
      <pubDate>Sat, 28 Oct 2023 03:33:48 GMT</pubDate>
      
      <description>Collection list of android SDK API</description>
      
      
      
      <content:encoded><![CDATA[<p><img src="https://github.com/dimaslanjaka/source-posts/assets/12471057/7254c426-aea8-41bc-aad5-c06eee780162" alt=""></p><ul><li>API 10 (Gingerbread) - 0.3%</li><li>API 15 (Ice Cream Sandwich) - 0.3%</li><li>API 16 (Jellybean) - 1.2%</li><li>API 17 (Jellybean) - 1.5%</li><li>API 18 (Jellybean) - 0.5%</li><li>API 19 (KitKat) - 6.9%</li><li>API 21 (Lollipop) - 3.0%</li><li>API 22 (Lollipop) - 11.5%</li><li>API 23 (Marshmallow) - 16.9%</li><li>API 24 (Nougat) - 11.4%</li><li>API 25 (Nougat) - 7.8%</li><li>API 26 (Oreo) - 12.9%</li><li>API 27 (Oreo) - 15.4%</li><li>API 28 (Pie) - 10.4%</li></ul>]]></content:encoded>
      
      
      <category domain="https://www.webmanajemen.com/categories/programming/">programming</category>
      
      
      <category domain="https://www.webmanajemen.com/tags/android/">android</category>
      
      
      <comments>https://www.webmanajemen.com/2023/10/android-sdk-api-list.html#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Kill gradle daemon process</title>
      <link>https://www.webmanajemen.com/2023/10/kill-gradle-daemon-process.html</link>
      <guid>https://www.webmanajemen.com/2023/10/kill-gradle-daemon-process.html</guid>
      <pubDate>Fri, 27 Oct 2023 15:16:52 GMT</pubDate>
      
      <description>command to kill gradle daemon processes</description>
      
      
      
      <content:encoded><![CDATA[<p><img src="https://github.com/dimaslanjaka/source-posts/assets/12471057/0801b88a-5332-4bfa-94f1-f3e52972016d" alt=""></p><h2 id="Windows">Windows</h2><h3 id="Using-WMIC">Using WMIC</h3><p>kill gradle processes using <code>WMIC</code></p><pre><code class="hljs cmd">WMIC PROCESS where &quot;Name like &#x27;java%&#x27; AND CommandLine like &#x27;<span class="hljs-variable">%GradleDaemon%</span>&#x27;&quot; <span class="hljs-keyword">Call</span> TerminateWMIC PROCESS where &quot;Name like &#x27;java%&#x27; AND CommandLine like &#x27;<span class="hljs-variable">%kotlin%</span>&#x27;&quot; <span class="hljs-keyword">Call</span> TerminateWMIC PROCESS where &quot;Name like &#x27;java%&#x27; AND CommandLine like &#x27;<span class="hljs-variable">%java%</span>&#x27;&quot; <span class="hljs-keyword">Call</span> Terminate</code></pre><p>in batch file remove percent symbol <code>%</code></p><pre><code class="hljs cmd"><span class="hljs-keyword">call</span> wmic process where &quot;name like &#x27;java.exe&#x27;&quot; delete</code></pre><h3 id="Using-Taskkill">Using Taskkill</h3><p>kill gradle processes using <code>taskkill</code></p><pre><code class="hljs cmd"><span class="hljs-built_in">taskkill</span> /f /im java.exe<span class="hljs-built_in">taskkill</span> /f /im javaw.exe</code></pre><h2 id="Linux">Linux</h2><pre><code class="hljs bash">pkill -f <span class="hljs-string">&#x27;.*GradleDaemon.*&#x27;</span></code></pre>]]></content:encoded>
      
      
      <category domain="https://www.webmanajemen.com/categories/programming/">programming</category>
      
      
      <category domain="https://www.webmanajemen.com/tags/bash/">bash</category>
      
      <category domain="https://www.webmanajemen.com/tags/cmd/">cmd</category>
      
      <category domain="https://www.webmanajemen.com/tags/java/">java</category>
      
      <category domain="https://www.webmanajemen.com/tags/gradle/">gradle</category>
      
      
      <comments>https://www.webmanajemen.com/2023/10/kill-gradle-daemon-process.html#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Gradle script to generate proguard dictionaries each build</title>
      <link>https://www.webmanajemen.com/2023/10/gradle-generate-proguard-dictionaries-each-build.html</link>
      <guid>https://www.webmanajemen.com/2023/10/gradle-generate-proguard-dictionaries-each-build.html</guid>
      <pubDate>Wed, 25 Oct 2023 07:32:33 GMT</pubDate>
      
      <description>Gradle script to generate proguard dictionaries each build</description>
      
      
      
      <content:encoded><![CDATA[<h2 id="Gradle-task-to-generate-proguard-dictonary">Gradle task to generate proguard dictonary</h2><h3 id="Always-overwrite-existing-generated-dictionary">Always overwrite existing generated dictionary</h3><pre><code class="hljs gradle"><span class="hljs-keyword">def</span> dictDest = <span class="hljs-keyword">new</span> <span class="hljs-keyword">File</span>(<span class="hljs-string">&#x27;build/builddict.txt&#x27;</span>)tasks.register(<span class="hljs-string">&#x27;genDict&#x27;</span>) &#123;    outputs.<span class="hljs-keyword">file</span>(dictDest)    <span class="hljs-keyword">doLast</span> &#123;        <span class="hljs-keyword">if</span> (dictDest.exists()) <span class="hljs-keyword">return</span>        <span class="hljs-keyword">def</span> r = <span class="hljs-keyword">new</span> Random()        <span class="hljs-keyword">println</span>(r)        <span class="hljs-keyword">def</span> begin = r.nextInt(<span class="hljs-number">1000</span>) + <span class="hljs-number">0</span>x0100        <span class="hljs-keyword">def</span> end = begin + <span class="hljs-number">0</span>x40000        <span class="hljs-keyword">println</span>(<span class="hljs-string">&quot;end: &quot;</span> + end)        <span class="hljs-keyword">def</span> chars = (begin..end)                .<span class="hljs-keyword">findAll</span> &#123; Character.isValidCodePoint(it) &amp;&amp; Character.isJavaIdentifierPart(it) &#125;                .<span class="hljs-keyword">collect</span> &#123; String.valueOf(Character.toChars(it)) &#125;        <span class="hljs-keyword">println</span>(<span class="hljs-string">&quot;chars: &quot;</span> + chars)        <span class="hljs-keyword">int</span> max = chars.<span class="hljs-keyword">size</span>()        <span class="hljs-keyword">println</span>(max)        <span class="hljs-keyword">def</span> start = []        <span class="hljs-keyword">def</span> dict = []        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; max; i++) &#123;            <span class="hljs-keyword">char</span> c = chars.get(i).charAt(<span class="hljs-number">0</span>)            <span class="hljs-keyword">if</span> (Character.isJavaIdentifierStart(c)) &#123;                start &lt;&lt; String.valueOf(c)            &#125;        &#125;        <span class="hljs-keyword">println</span>(start.<span class="hljs-keyword">size</span>())        <span class="hljs-keyword">def</span> f = outputs.files.getSingleFile()        f.getParentFile().mkdirs()        f.<span class="hljs-keyword">withWriter</span>(<span class="hljs-string">&quot;UTF-8&quot;</span>) &#123;            it.<span class="hljs-keyword">write</span>(start.<span class="hljs-keyword">join</span>(System.lineSeparator()))            it.<span class="hljs-keyword">write</span>()        &#125;    &#125;&#125;</code></pre><h3 id="Prevent-overwriting-existing-generated-dictionary">Prevent overwriting existing generated dictionary</h3><pre><code class="hljs gradle"><span class="hljs-comment">// tell others this file cannot be replaced (final)</span><span class="hljs-keyword">final</span> <span class="hljs-keyword">def</span> dictDest = <span class="hljs-keyword">project</span>.<span class="hljs-keyword">file</span>(<span class="hljs-string">&quot;build/builddict.txt&quot;</span>)tasks.register(<span class="hljs-string">&quot;genDict&quot;</span>) &#123;    <span class="hljs-comment">// prevent duplicate</span>    <span class="hljs-keyword">println</span> <span class="hljs-string">&quot;$dictDest exists $&#123;dictDest.exists()&#125;&quot;</span>    <span class="hljs-keyword">if</span> (!dictDest.exists()) &#123;        outputs.<span class="hljs-keyword">file</span>(dictDest)        <span class="hljs-keyword">doLast</span> &#123;            <span class="hljs-keyword">def</span> r = <span class="hljs-keyword">new</span> Random()            <span class="hljs-keyword">println</span>(r)            <span class="hljs-keyword">def</span> begin = r.nextInt(<span class="hljs-number">1000</span>) + <span class="hljs-number">0</span>x0100            <span class="hljs-keyword">def</span> end = begin + <span class="hljs-number">0</span>x40000            <span class="hljs-keyword">println</span>(<span class="hljs-string">&quot;end: &quot;</span> + end)            <span class="hljs-keyword">def</span> chars = (begin..end)                    .<span class="hljs-keyword">findAll</span> &#123; Character.isValidCodePoint(it) &amp;&amp; Character.isJavaIdentifierPart(it) &#125;                    .<span class="hljs-keyword">collect</span> &#123; String.valueOf(Character.toChars(it)) &#125;            <span class="hljs-keyword">println</span>(<span class="hljs-string">&quot;chars: &quot;</span> + chars)            <span class="hljs-keyword">int</span> max = chars.<span class="hljs-keyword">size</span>()            <span class="hljs-keyword">println</span>(max)            <span class="hljs-keyword">def</span> start = []            <span class="hljs-keyword">def</span> dict = []            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; max; i++) &#123;                <span class="hljs-keyword">char</span> c = chars.get(i).charAt(<span class="hljs-number">0</span>)                <span class="hljs-keyword">if</span> (Character.isJavaIdentifierStart(c)) &#123;                    start &lt;&lt; String.valueOf(c)                &#125;            &#125;            <span class="hljs-keyword">println</span>(start.<span class="hljs-keyword">size</span>())            <span class="hljs-keyword">def</span> f = outputs.files.getSingleFile()            f.getParentFile().mkdirs()            f.<span class="hljs-keyword">withWriter</span>(<span class="hljs-string">&quot;UTF-8&quot;</span>) &#123;                it.<span class="hljs-keyword">write</span>(start.<span class="hljs-keyword">join</span>(System.lineSeparator()))                it.<span class="hljs-keyword">write</span>()            &#125;        &#125;    &#125;&#125;</code></pre><p>run manual with <code>./gradlew genDict</code> or <code>bash ./gradlew genDict</code></p><p>but you can automated generator dictionary using <code>afterEvaluate</code></p><pre><code class="hljs gradle">afterEvaluate &#123;    <span class="hljs-comment">// each variant depends on `genDict` task</span>    android.applicationVariants.all &#123; variant -&gt;        <span class="hljs-keyword">if</span> (variant.name.endsWith(<span class="hljs-string">&#x27;Release&#x27;</span>))            variant.javaCompileProvider.configure &#123;                dependsOn <span class="hljs-string">&#x27;genDict&#x27;</span>            &#125;    &#125;&#125;</code></pre><p>in new API Androig Gradle Plugin v8</p><pre><code class="hljs gradle">afterEvaluate &#123;    <span class="hljs-comment">// each variant depends on `genDict` task</span>    android.applicationVariants.configureEach &#123; variant -&gt;        <span class="hljs-keyword">if</span> (variant.name.endsWith(<span class="hljs-string">&#x27;Release&#x27;</span>))            variant.javaCompileProvider.configure &#123;                dependsOn <span class="hljs-string">&#x27;genDict&#x27;</span>            &#125;    &#125;&#125;</code></pre><p>in your proguard rules dont forget put</p><pre><code class="hljs proguard">-obfuscationdictionary build/dict.txt-classobfuscationdictionary build/dict.txt-packageobfuscationdictionary build/dict.txt</code></pre><h2 id="My-working-scripts">My working scripts</h2><p>put in <code>app/build.gradle</code></p><pre><code class="hljs gradle"><span class="hljs-keyword">def</span> dictDest = <span class="hljs-keyword">new</span> <span class="hljs-keyword">File</span>(<span class="hljs-string">&#x27;.&#x27;</span>, <span class="hljs-string">&#x27;build/builddict.txt&#x27;</span>)tasks.register(<span class="hljs-string">&#x27;genDict&#x27;</span>) &#123;    outputs.<span class="hljs-keyword">file</span>(dictDest)    <span class="hljs-keyword">doLast</span> &#123;        <span class="hljs-comment">// prevent rewrite</span>        <span class="hljs-keyword">if</span> (dictDest.exists()) <span class="hljs-keyword">return</span>        <span class="hljs-keyword">def</span> r = <span class="hljs-keyword">new</span> Random()        <span class="hljs-keyword">println</span>(r)        <span class="hljs-keyword">def</span> begin = r.nextInt(<span class="hljs-number">1000</span>) + <span class="hljs-number">0</span>x0100        <span class="hljs-keyword">def</span> end = begin + <span class="hljs-number">0</span>x40000        <span class="hljs-keyword">println</span>(<span class="hljs-string">&quot;end: &quot;</span> + end)        <span class="hljs-keyword">def</span> chars = (begin..end)                .<span class="hljs-keyword">findAll</span> &#123; Character.isValidCodePoint(it) &amp;&amp; Character.isJavaIdentifierPart(it) &#125;                .<span class="hljs-keyword">collect</span> &#123; String.valueOf(Character.toChars(it)) &#125;        <span class="hljs-keyword">println</span>(<span class="hljs-string">&quot;chars: &quot;</span> + chars)        <span class="hljs-keyword">int</span> max = chars.<span class="hljs-keyword">size</span>()        <span class="hljs-keyword">println</span>(max)        <span class="hljs-keyword">def</span> start = []        <span class="hljs-keyword">def</span> dict = []        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; max; i++) &#123;            <span class="hljs-keyword">char</span> c = chars.get(i).charAt(<span class="hljs-number">0</span>)            <span class="hljs-keyword">if</span> (Character.isJavaIdentifierStart(c)) &#123;                start &lt;&lt; String.valueOf(c)            &#125;        &#125;        <span class="hljs-keyword">println</span>(start.<span class="hljs-keyword">size</span>())        <span class="hljs-keyword">def</span> f = outputs.files.getSingleFile()        f.getParentFile().mkdirs()        f.<span class="hljs-keyword">withWriter</span>(<span class="hljs-string">&quot;UTF-8&quot;</span>) &#123;            it.<span class="hljs-keyword">write</span>(start.<span class="hljs-keyword">join</span>(System.lineSeparator()))            it.<span class="hljs-keyword">write</span>()        &#125;    &#125;&#125;<span class="hljs-comment">// generate proguard dictionary on preBuild task (debug variant included)</span><span class="hljs-comment">//tasks.named(&quot;preBuild&quot;) &#123;</span><span class="hljs-comment">//    dependsOn(tasks.named(&quot;genDict&quot;))</span><span class="hljs-comment">//&#125;</span>afterEvaluate &#123;    <span class="hljs-comment">// each variant depends on `genDict` task</span>    android.applicationVariants.configureEach &#123; variant -&gt;        <span class="hljs-comment">// apply online variant with `release` substring</span>        <span class="hljs-keyword">if</span> (variant.name.toLowerCase().contains(<span class="hljs-string">&#x27;release&#x27;</span>))            variant.javaCompileProvider.configure &#123;                dependsOn <span class="hljs-string">&#x27;genDict&#x27;</span>            &#125;    &#125;&#125;</code></pre>]]></content:encoded>
      
      
      <category domain="https://www.webmanajemen.com/categories/programming/">programming</category>
      
      
      <category domain="https://www.webmanajemen.com/tags/android/">android</category>
      
      <category domain="https://www.webmanajemen.com/tags/gradle/">gradle</category>
      
      <category domain="https://www.webmanajemen.com/tags/groovy/">groovy</category>
      
      <category domain="https://www.webmanajemen.com/tags/proguard/">proguard</category>
      
      
      <comments>https://www.webmanajemen.com/2023/10/gradle-generate-proguard-dictionaries-each-build.html#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>ReactJS isMounted hook with useEffect</title>
      <link>https://www.webmanajemen.com/2023/10/reactjs-is-mounted-hook-with-use-effect.html</link>
      <guid>https://www.webmanajemen.com/2023/10/reactjs-is-mounted-hook-with-use-effect.html</guid>
      <pubDate>Mon, 16 Oct 2023 22:34:57 GMT</pubDate>
      
      <description>ReactJS isMounted hook with useEffect Basic errors Warning: Cant perform a React state update on an unmounted component. This is a no-op, but it indicates a memory leak in your application. Basic Reac</description>
      
      
      
      <content:encoded><![CDATA[<h2 id="Basic-errors">Basic errors</h2><pre><code class="hljs log">Warning: Can&#x27;t perform a React state update on an unmounted component. This is a no-op, but it indicates a memory leak in your application.</code></pre><h2 id="Basic-React-useEffect">Basic <code>React.useEffect</code></h2><p>understanding basic usage of <code>React.useEffect</code></p><h3 id="call-every-changes">call every changes</h3><blockquote><p>Below codes will run on every render of your component, e.g. when state or props change.</p></blockquote><pre><code class="hljs js"><span class="hljs-title class_">React</span>.<span class="hljs-title function_">useEffect</span>(<span class="hljs-function">() =&gt;</span> &#123;  <span class="hljs-comment">// component is mounted</span>  <span class="hljs-keyword">return</span> <span class="hljs-function">() =&gt;</span> &#123;    <span class="hljs-comment">// component is being unmounted</span>  &#125;&#125;);</code></pre><h3 id="call-only-once">call only once</h3><blockquote><p>Below codes will run an effect and clean it up only once (on mount and unmount). This tells React that your effect doesn’t depend on any values from props or state, so it never needs to re-run.</p></blockquote><pre><code class="hljs js"><span class="hljs-title class_">React</span>.<span class="hljs-title function_">useEffect</span>(<span class="hljs-function">() =&gt;</span> &#123;  <span class="hljs-comment">// component is mounted</span>  <span class="hljs-keyword">return</span> <span class="hljs-function">() =&gt;</span> &#123;    <span class="hljs-comment">// component is being unmounted</span>  &#125;&#125;, []); <span class="hljs-comment">// run once on mount</span></code></pre><h2 id="Basic-React-useRef">Basic <code>React.useRef</code></h2><blockquote><p>Keep in mind that useRef doesn’t notify you when its content changes. Mutating the .current property doesn’t cause a re-render.</p></blockquote><h2 id="Storing-isMounted-with-React-useRef">Storing <code>isMounted</code> with <code>React.useRef</code></h2><p>You’ll <code>React.useEffect</code> to monitor when the component mounts or unmounts, and save that info in a <code>ref</code></p><pre><code class="hljs js"><span class="hljs-keyword">const</span> isMounted = <span class="hljs-title class_">React</span>.<span class="hljs-title function_">useRef</span>(<span class="hljs-literal">false</span>); <span class="hljs-comment">// unmounted by default</span><span class="hljs-title class_">React</span>.<span class="hljs-title function_">useEffect</span>(<span class="hljs-function">() =&gt;</span> &#123;  isMounted.<span class="hljs-property">current</span> = <span class="hljs-literal">true</span>; <span class="hljs-comment">// mounted</span>  <span class="hljs-keyword">return</span> <span class="hljs-function">() =&gt;</span> &#123;    isMounted.<span class="hljs-property">current</span> = <span class="hljs-literal">false</span>; <span class="hljs-comment">// unmounted</span>  &#125;&#125;, []); <span class="hljs-comment">// run once on mount</span></code></pre><p>Now anytime you need to know if our component is mounted, you can check <code>isMounted.current</code> to get the current value.</p>]]></content:encoded>
      
      
      <category domain="https://www.webmanajemen.com/categories/programming/">programming</category>
      
      
      <category domain="https://www.webmanajemen.com/tags/javascript/">javascript</category>
      
      <category domain="https://www.webmanajemen.com/tags/react/">react</category>
      
      
      <comments>https://www.webmanajemen.com/2023/10/reactjs-is-mounted-hook-with-use-effect.html#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Convert iframe to hexo-shortcodes codepen</title>
      <link>https://www.webmanajemen.com/2023/10/convert-iframe-to-hexo-shortcodes-codepen.html</link>
      <guid>https://www.webmanajemen.com/2023/10/convert-iframe-to-hexo-shortcodes-codepen.html</guid>
      <pubDate>Mon, 09 Oct 2023 00:12:12 GMT</pubDate>
      
      <description>Script javascript for convering html iframe to hexo-shortcodes codepen</description>
      
      
      
      <content:encoded><![CDATA[<pre><code class="hljs js"><span class="hljs-keyword">const</span> <span class="hljs-title class_">Promise</span> = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;bluebird&#x27;</span>);<span class="hljs-keyword">const</span> glob = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;glob&#x27;</span>);<span class="hljs-keyword">const</span> &#123; join &#125; = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;path&#x27;</span>);<span class="hljs-keyword">const</span> &#123; writefile &#125; = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;sbg-utility&#x27;</span>);<span class="hljs-keyword">const</span> moment = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;moment-timezone&#x27;</span>);<span class="hljs-comment">// convert iframe to hexo-shortcodes codepen</span><span class="hljs-title class_">Promise</span>.<span class="hljs-title function_">all</span>(glob.<span class="hljs-title function_">glob</span>(<span class="hljs-string">&#x27;src-posts/**/*.md&#x27;</span>, &#123; <span class="hljs-attr">ignore</span>: [<span class="hljs-string">&#x27;**/node_modules/**&#x27;</span>] &#125;))  .<span class="hljs-title function_">map</span>(<span class="hljs-function"><span class="hljs-params">p</span> =&gt;</span> <span class="hljs-title function_">join</span>(__dirname, p))  .<span class="hljs-title function_">map</span>(<span class="hljs-function"><span class="hljs-params">file</span> =&gt;</span>    <span class="hljs-keyword">import</span>(<span class="hljs-string">&#x27;hexo-post-parser&#x27;</span>).<span class="hljs-title function_">then</span>(<span class="hljs-keyword">async</span> loaded =&gt; &#123;      <span class="hljs-keyword">const</span> parsed = <span class="hljs-keyword">await</span> loaded.<span class="hljs-title function_">parsePost</span>(file);      <span class="hljs-keyword">return</span> &#123; <span class="hljs-attr">module</span>: loaded, file, ...parsed &#125;;    &#125;)  )  .<span class="hljs-title function_">each</span>(<span class="hljs-function"><span class="hljs-params">parsed</span> =&gt;</span> &#123;    <span class="hljs-keyword">const</span> &#123; file, <span class="hljs-variable language_">module</span> &#125; = parsed;    <span class="hljs-keyword">let</span> &#123; <span class="hljs-attr">body</span>: contents &#125; = parsed;    <span class="hljs-keyword">let</span> save = <span class="hljs-literal">false</span>;    <span class="hljs-keyword">if</span> (contents.<span class="hljs-title function_">includes</span>(<span class="hljs-string">&#x27;source.l3n4r0x.cf&#x27;</span>)) &#123;      contents = contents.<span class="hljs-title function_">replace</span>(<span class="hljs-regexp">/&lt;iframe [^&gt;]*src=&quot;[^&quot;]*&quot;[^&gt;]*&gt;[\s\S]*?&lt;\/iframe\b[^&gt;]*&gt;/gim</span>, <span class="hljs-function"><span class="hljs-params">tag</span> =&gt;</span> &#123;        <span class="hljs-keyword">let</span> shortcode = tag;        <span class="hljs-keyword">const</span> src = <span class="hljs-regexp">/(?&lt;=src=&quot;).*?(?=[*&quot;])/gim</span>.<span class="hljs-title function_">exec</span>(tag)[<span class="hljs-number">0</span>];        <span class="hljs-keyword">const</span> url = <span class="hljs-keyword">new</span> <span class="hljs-title function_">URL</span>(<span class="hljs-title function_">decodeHTMLEntities</span>(src));        <span class="hljs-keyword">const</span> searchParams = <span class="hljs-keyword">new</span> <span class="hljs-title class_">URLSearchParams</span>(url.<span class="hljs-property">search</span>);        <span class="hljs-keyword">let</span> user,          id,          opt = [];        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">const</span> [key, value] <span class="hljs-keyword">of</span> searchParams.<span class="hljs-title function_">entries</span>()) &#123;          <span class="hljs-keyword">if</span> (key == <span class="hljs-string">&#x27;id&#x27;</span>) &#123;            id = value;          &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (key == <span class="hljs-string">&#x27;user&#x27;</span>) &#123;            user = value;          &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (key == <span class="hljs-string">&#x27;h&#x27;</span>) &#123;            opt.<span class="hljs-title function_">push</span>(<span class="hljs-string">&#x27;height=&#x27;</span> + value);          &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (key == <span class="hljs-string">&#x27;tab&#x27;</span>) &#123;            opt.<span class="hljs-title function_">push</span>(<span class="hljs-string">&#x27;default_tab=&#x27;</span> + value);          &#125; <span class="hljs-keyword">else</span> &#123;            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(key, value);          &#125;        &#125;        <span class="hljs-keyword">if</span> (user.<span class="hljs-property">length</span> &gt; <span class="hljs-number">0</span> &amp;&amp; id.<span class="hljs-property">length</span> &gt; <span class="hljs-number">0</span>) &#123;          shortcode = <span class="hljs-string">`&#123;% codepen https://codepen.io/<span class="hljs-subst">$&#123;user&#125;</span>/pen/<span class="hljs-subst">$&#123;id&#125;</span> <span class="hljs-subst">$&#123;opt.join(<span class="hljs-string">&#x27; &#x27;</span>)&#125;</span> %&#125;`</span>;        &#125;        <span class="hljs-comment">// console.log(tag, shortcode);</span>        <span class="hljs-keyword">return</span> shortcode;      &#125;);      <span class="hljs-comment">// writefile(__dirname + &#x27;/tmp/x.html&#x27;, contents);</span>      parsed.<span class="hljs-property">body</span> = contents;      parsed.<span class="hljs-property">content</span> = contents;      parsed.<span class="hljs-property">metadata</span>.<span class="hljs-property">updated</span> = <span class="hljs-title function_">moment</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>()).<span class="hljs-title function_">tz</span>(<span class="hljs-string">&#x27;Asia/Jakarta&#x27;</span>).<span class="hljs-title function_">format</span>();      save = <span class="hljs-literal">true</span>;    &#125;    <span class="hljs-keyword">if</span> (save)      <span class="hljs-title class_">Promise</span>.<span class="hljs-title function_">resolve</span>(<span class="hljs-variable language_">module</span>.<span class="hljs-title function_">buildPost</span>(&#123; <span class="hljs-attr">body</span>: contents, <span class="hljs-attr">metadata</span>: parsed.<span class="hljs-property">metadata</span> &#125;)).<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">build</span> =&gt;</span> &#123;        <span class="hljs-title function_">writefile</span>(file, build);      &#125;);  &#125;);<span class="hljs-keyword">function</span> <span class="hljs-title function_">decodeHTMLEntities</span>(<span class="hljs-params">text</span>) &#123;  <span class="hljs-keyword">var</span> entities = [    [<span class="hljs-string">&#x27;amp&#x27;</span>, <span class="hljs-string">&#x27;&amp;&#x27;</span>],    [<span class="hljs-string">&#x27;apos&#x27;</span>, <span class="hljs-string">&quot;&#x27;&quot;</span>],    [<span class="hljs-string">&#x27;#x27&#x27;</span>, <span class="hljs-string">&quot;&#x27;&quot;</span>],    [<span class="hljs-string">&#x27;#x2F&#x27;</span>, <span class="hljs-string">&#x27;/&#x27;</span>],    [<span class="hljs-string">&#x27;#39&#x27;</span>, <span class="hljs-string">&quot;&#x27;&quot;</span>],    [<span class="hljs-string">&#x27;#47&#x27;</span>, <span class="hljs-string">&#x27;/&#x27;</span>],    [<span class="hljs-string">&#x27;lt&#x27;</span>, <span class="hljs-string">&#x27;&lt;&#x27;</span>],    [<span class="hljs-string">&#x27;gt&#x27;</span>, <span class="hljs-string">&#x27;&gt;&#x27;</span>],    [<span class="hljs-string">&#x27;nbsp&#x27;</span>, <span class="hljs-string">&#x27; &#x27;</span>],    [<span class="hljs-string">&#x27;quot&#x27;</span>, <span class="hljs-string">&#x27;&quot;&#x27;</span>]  ];  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>, max = entities.<span class="hljs-property">length</span>; i &lt; max; ++i)    text = text.<span class="hljs-title function_">replace</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">RegExp</span>(<span class="hljs-string">&#x27;&amp;&#x27;</span> + entities[i][<span class="hljs-number">0</span>] + <span class="hljs-string">&#x27;;&#x27;</span>, <span class="hljs-string">&#x27;g&#x27;</span>), entities[i][<span class="hljs-number">1</span>]);  <span class="hljs-keyword">return</span> text;&#125;</code></pre>]]></content:encoded>
      
      
      <category domain="https://www.webmanajemen.com/categories/programming/">programming</category>
      
      
      <category domain="https://www.webmanajemen.com/tags/hexo/">hexo</category>
      
      <category domain="https://www.webmanajemen.com/tags/hexo-shortcodes/">hexo-shortcodes</category>
      
      <category domain="https://www.webmanajemen.com/tags/codepen/">codepen</category>
      
      <category domain="https://www.webmanajemen.com/tags/markdown/">markdown</category>
      
      
      <comments>https://www.webmanajemen.com/2023/10/convert-iframe-to-hexo-shortcodes-codepen.html#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Catatan Muslim</title>
      <link>https://www.webmanajemen.com/notes/catatan-muslim.html</link>
      <guid>https://www.webmanajemen.com/notes/catatan-muslim.html</guid>
      <pubDate>Sun, 01 Oct 2023 19:09:45 GMT</pubDate>
      
      <description>Catatan Muslim Barang siapa membaca attaubah ayat 128-129 enam puluh enam kali kepada orang yang terkena bisa binatang maka akan sembuh seketika Asy-Syaikh At-Tijani Barang siapa menghafal sepuluh aya</description>
      
      
      
      <content:encoded><![CDATA[<p>Barang siapa membaca attaubah ayat 128-129 enam puluh enam kali kepada orang yang terkena bisa binatang maka akan sembuh seketika (Asy-Syaikh At-Tijani)</p><p>Barang siapa menghafal sepuluh ayat terakhir dari surah Al kahfi, maka ia akan terlindungi dari fitnah dajjal (HR Muslim)</p><p>Barang siapa yang membacakan do’a ini di depan kuburan minimal 3 kali, maka Allah akan mengangkat siksa kuburnya hingga hari kiamat nanti.</p><blockquote><p>Allahumma Bihakki sayyidina Muhammadin wa’Ali Muhammadin la tu’adzib hadzal mayyit</p></blockquote><p>Neraka tidak akan menyentuh orang yang mengamalkan doa ini setelah sholat Maghrib dan subuh</p><blockquote><p>Allahumma ajirni minannar 7x</p></blockquote><blockquote class="tiktok-embed" cite="https://www.tiktok.com/@ajiepanqestu/video/7233039713081298202" data-video-id="7233039713081298202" data-embed-from="embed_page" style="max-width: 605px;min-width: 325px;" > <section> <a target="_blank" title="@ajiepanqestu" href="https://www.tiktok.com/@ajiepanqestu?refer=embed">@ajiepanqestu</a> <p>nraka tidak akan menyentuh orang yang berdzikir ini <a title="nongkireligi" target="_blank" href="https://www.tiktok.com/tag/nongkireligi?refer=embed">#nongkireligi</a> </p> <a target="_blank" title="♬ Epic Inspiration - DM Production" href="https://www.tiktok.com/music/Epic-Inspiration-7116400670005872641?refer=embed">♬ Epic Inspiration - DM Production</a> </section> </blockquote> <script async src="https://www.tiktok.com/embed.js"></script><p>la illaha iillallah wahdaula syarikala lahul mulku walahul hamdu yuhyii wa yumit<br>wahwa hayun layyamutubiyadh khoir wahua alakulli syaiin khodir</p>]]></content:encoded>
      
      
      <category domain="https://www.webmanajemen.com/categories/uncategorized/">uncategorized</category>
      
      
      
      <comments>https://www.webmanajemen.com/notes/catatan-muslim.html#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>react-dom server generate static html from react elements</title>
      <link>https://www.webmanajemen.com/2023/09/react-dom-server-generate-static-html-from-react.html</link>
      <guid>https://www.webmanajemen.com/2023/09/react-dom-server-generate-static-html-from-react.html</guid>
      <pubDate>Wed, 27 Sep 2023 23:34:23 GMT</pubDate>
      
      <description>react-dom server generate static html from react elements import as fs from fs;import prettier from prettier;import React from react;import ReactDOMServer from react-dom/server;render;function render </description>
      
      
      
      <content:encoded><![CDATA[<pre><code class="hljs tsx"><span class="hljs-keyword">import</span> * <span class="hljs-keyword">as</span> fs <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;fs&quot;</span>;<span class="hljs-keyword">import</span> prettier <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;prettier&quot;</span>;<span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span>;<span class="hljs-keyword">import</span> <span class="hljs-title class_">ReactDOMServer</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react-dom/server&quot;</span>;<span class="hljs-title function_">render</span>();<span class="hljs-keyword">function</span> <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;  <span class="hljs-keyword">let</span> html = <span class="hljs-title class_">ReactDOMServer</span>.<span class="hljs-title function_">renderToStaticMarkup</span>(<span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">HelloWorldPage</span> /&gt;</span></span>);  <span class="hljs-keyword">let</span> htmlWDoc = <span class="hljs-string">&quot;&lt;!DOCTYPE html&gt;&quot;</span> + html;  <span class="hljs-keyword">let</span> prettyHtml = prettier.<span class="hljs-title function_">format</span>(htmlWDoc, &#123; <span class="hljs-attr">parser</span>: <span class="hljs-string">&quot;html&quot;</span> &#125;);  <span class="hljs-keyword">let</span> outputFile = <span class="hljs-string">&quot;./output.html&quot;</span>;  fs.<span class="hljs-title function_">writeFileSync</span>(outputFile, prettyHtml);  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`Wrote <span class="hljs-subst">$&#123;outputFile&#125;</span>`</span>);&#125;<span class="hljs-keyword">function</span> <span class="hljs-title function_">HelloWorldPage</span>(<span class="hljs-params"></span>) &#123;  <span class="hljs-keyword">return</span> (    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span></span><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span></span><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charSet</span>=<span class="hljs-string">&quot;utf-8&quot;</span> /&gt;</span></span><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Hello world<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span></span><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span></span><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span></span><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>Hello world<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span></span><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></span>  );&#125;</code></pre><h2 id="Conclusion">Conclusion</h2><p>generated static html result at <code>output.html</code></p>]]></content:encoded>
      
      
      <category domain="https://www.webmanajemen.com/categories/programming/">programming</category>
      
      
      <category domain="https://www.webmanajemen.com/tags/typescript/">typescript</category>
      
      <category domain="https://www.webmanajemen.com/tags/javascript/">javascript</category>
      
      <category domain="https://www.webmanajemen.com/tags/react/">react</category>
      
      
      <comments>https://www.webmanajemen.com/2023/09/react-dom-server-generate-static-html-from-react.html#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>How to use react suite toaster in reactjs</title>
      <link>https://www.webmanajemen.com/2023/09/how-to-use-react-suite-toaster-in-reactjs.html</link>
      <guid>https://www.webmanajemen.com/2023/09/how-to-use-react-suite-toaster-in-reactjs.html</guid>
      <pubDate>Tue, 26 Sep 2023 01:00:44 GMT</pubDate>
      
      <description>How to use react suite toaster in reactjs React Hook useToaster cannot be called in a class component You cannot using useToaster in class component, use rsuite.toaster instead. useToaster rsuite.toas</description>
      
      
      
      <content:encoded><![CDATA[<h2 id="React-Hook-“useToaster”-cannot-be-called-in-a-class-component">React Hook “useToaster” cannot be called in a class component</h2><blockquote><p>You cannot using <code>useToaster</code> in class component, use <a href="#using-in-class-component"><code>rsuite.toaster</code></a> instead.</p></blockquote><h2 id="Using-in-function-component">Using in function component</h2><pre><code class="hljs tsx"><span class="hljs-keyword">import</span> &#123;  <span class="hljs-title class_">Notification</span>,  useToaster,  <span class="hljs-title class_">Placeholder</span>,  <span class="hljs-title class_">Uploader</span>,  <span class="hljs-title class_">ButtonToolbar</span>,  <span class="hljs-title class_">SelectPicker</span>,  <span class="hljs-title class_">Button</span>&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;rsuite&#x27;</span>;<span class="hljs-keyword">const</span> <span class="hljs-title function_">App</span> = (<span class="hljs-params"></span>) =&gt; &#123;  <span class="hljs-keyword">const</span> [<span class="hljs-keyword">type</span>, setType] = <span class="hljs-title class_">React</span>.<span class="hljs-title function_">useState</span>(<span class="hljs-string">&#x27;info&#x27;</span>);  <span class="hljs-keyword">const</span> [placement, setPlacement] = <span class="hljs-title class_">React</span>.<span class="hljs-title function_">useState</span>(<span class="hljs-string">&#x27;topStart&#x27;</span>);  <span class="hljs-keyword">const</span> toaster = <span class="hljs-title function_">useToaster</span>();  <span class="hljs-keyword">const</span> message = (    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Notification</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&#123;type&#125;</span> <span class="hljs-attr">header</span>=<span class="hljs-string">&#123;type&#125;</span> <span class="hljs-attr">closable</span>&gt;</span></span><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">Placeholder.Paragraph</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&#123;&#123;</span> <span class="hljs-attr">width:</span> <span class="hljs-attr">320</span> &#125;&#125; <span class="hljs-attr">rows</span>=<span class="hljs-string">&#123;3&#125;</span> /&gt;</span></span><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">hr</span> /&gt;</span></span><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">Uploader</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;#&quot;</span> /&gt;</span></span><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">Notification</span>&gt;</span></span>  );  <span class="hljs-keyword">return</span> (    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><span class="language-xml">      &#123;message&#125;</span><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">hr</span> /&gt;</span></span><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">ButtonToolbar</span>&gt;</span></span><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">SelectPicker</span></span></span><span class="hljs-tag"><span class="language-xml">          <span class="hljs-attr">value</span>=<span class="hljs-string">&#123;type&#125;</span></span></span><span class="hljs-tag"><span class="language-xml">          <span class="hljs-attr">data</span>=<span class="hljs-string">&#123;[</span></span></span><span class="hljs-tag"><span class="language-xml">            &#123; <span class="hljs-attr">label:</span> &#x27;<span class="hljs-attr">info</span>&#x27;, <span class="hljs-attr">value:</span> &#x27;<span class="hljs-attr">info</span>&#x27; &#125;,</span></span><span class="hljs-tag"><span class="language-xml">            &#123; <span class="hljs-attr">label:</span> &#x27;<span class="hljs-attr">success</span>&#x27;, <span class="hljs-attr">value:</span> &#x27;<span class="hljs-attr">success</span>&#x27; &#125;,</span></span><span class="hljs-tag"><span class="language-xml">            &#123; <span class="hljs-attr">label:</span> &#x27;<span class="hljs-attr">warning</span>&#x27;, <span class="hljs-attr">value:</span> &#x27;<span class="hljs-attr">warning</span>&#x27; &#125;,</span></span><span class="hljs-tag"><span class="language-xml">            &#123; <span class="hljs-attr">label:</span> &#x27;<span class="hljs-attr">error</span>&#x27;, <span class="hljs-attr">value:</span> &#x27;<span class="hljs-attr">error</span>&#x27; &#125;</span></span><span class="hljs-tag"><span class="language-xml">          ]&#125;</span></span><span class="hljs-tag"><span class="language-xml">          <span class="hljs-attr">onChange</span>=<span class="hljs-string">&#123;setType&#125;</span></span></span><span class="hljs-tag"><span class="language-xml">          <span class="hljs-attr">style</span>=<span class="hljs-string">&#123;&#123;</span> <span class="hljs-attr">width:</span> <span class="hljs-attr">200</span> &#125;&#125;</span></span><span class="hljs-tag"><span class="language-xml">        /&gt;</span></span><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">SelectPicker</span></span></span><span class="hljs-tag"><span class="language-xml">          <span class="hljs-attr">value</span>=<span class="hljs-string">&#123;placement&#125;</span></span></span><span class="hljs-tag"><span class="language-xml">          <span class="hljs-attr">data</span>=<span class="hljs-string">&#123;[</span></span></span><span class="hljs-tag"><span class="language-xml">            &#123; <span class="hljs-attr">label:</span> &#x27;<span class="hljs-attr">topStart</span>&#x27;, <span class="hljs-attr">value:</span> &#x27;<span class="hljs-attr">topStart</span>&#x27; &#125;,</span></span><span class="hljs-tag"><span class="language-xml">            &#123; <span class="hljs-attr">label:</span> &#x27;<span class="hljs-attr">topCenter</span>&#x27;, <span class="hljs-attr">value:</span> &#x27;<span class="hljs-attr">topCenter</span>&#x27; &#125;,</span></span><span class="hljs-tag"><span class="language-xml">            &#123; <span class="hljs-attr">label:</span> &#x27;<span class="hljs-attr">topEnd</span>&#x27;, <span class="hljs-attr">value:</span> &#x27;<span class="hljs-attr">topEnd</span>&#x27; &#125;,</span></span><span class="hljs-tag"><span class="language-xml">            &#123; <span class="hljs-attr">label:</span> &#x27;<span class="hljs-attr">bottomStart</span>&#x27;, <span class="hljs-attr">value:</span> &#x27;<span class="hljs-attr">bottomStart</span>&#x27; &#125;,</span></span><span class="hljs-tag"><span class="language-xml">            &#123; <span class="hljs-attr">label:</span> &#x27;<span class="hljs-attr">bottomCenter</span>&#x27;, <span class="hljs-attr">value:</span> &#x27;<span class="hljs-attr">bottomCenter</span>&#x27; &#125;,</span></span><span class="hljs-tag"><span class="language-xml">            &#123; <span class="hljs-attr">label:</span> &#x27;<span class="hljs-attr">bottomEnd</span>&#x27;, <span class="hljs-attr">value:</span> &#x27;<span class="hljs-attr">bottomEnd</span>&#x27; &#125;</span></span><span class="hljs-tag"><span class="language-xml">          ]&#125;</span></span><span class="hljs-tag"><span class="language-xml">          <span class="hljs-attr">onChange</span>=<span class="hljs-string">&#123;setPlacement&#125;</span></span></span><span class="hljs-tag"><span class="language-xml">          <span class="hljs-attr">style</span>=<span class="hljs-string">&#123;&#123;</span> <span class="hljs-attr">width:</span> <span class="hljs-attr">200</span> &#125;&#125;</span></span><span class="hljs-tag"><span class="language-xml">        /&gt;</span></span><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">Button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> toaster.push(message, &#123; placement &#125;)&#125;&gt;Push<span class="hljs-tag">&lt;/<span class="hljs-name">Button</span>&gt;</span></span><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">Button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> toaster.remove()&#125;&gt;Remove<span class="hljs-tag">&lt;/<span class="hljs-name">Button</span>&gt;</span></span><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">Button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> toaster.clear()&#125;&gt;Clear<span class="hljs-tag">&lt;/<span class="hljs-name">Button</span>&gt;</span></span><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">ButtonToolbar</span>&gt;</span></span><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span>  );&#125;;<span class="hljs-title class_">ReactDOM</span>.<span class="hljs-title function_">render</span>(<span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">App</span> /&gt;</span></span>, <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;root&#x27;</span>));</code></pre><h2 id="Using-in-class-component">Using in class component</h2><pre><code class="hljs jsx"><span class="hljs-keyword">class</span> <span class="hljs-title class_">AppClass</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">React.Component</span> &#123;  toaster;  <span class="hljs-title function_">constructor</span>(<span class="hljs-params">props</span>) &#123;    <span class="hljs-variable language_">super</span>(props);    <span class="hljs-variable language_">this</span>.<span class="hljs-property">state</span> = &#123;      <span class="hljs-attr">type</span>: <span class="hljs-string">&quot;info&quot;</span>,      <span class="hljs-attr">placement</span>: <span class="hljs-string">&quot;topStart&quot;</span>    &#125;;  &#125;  <span class="hljs-title function_">componentDidMount</span>(<span class="hljs-params"></span>) &#123;    <span class="hljs-keyword">import</span>(<span class="hljs-string">&quot;rsuite&quot;</span>).<span class="hljs-title function_">then</span>(<span class="hljs-function">(<span class="hljs-params">modules</span>) =&gt;</span> &#123;      <span class="hljs-variable language_">this</span>.<span class="hljs-property">toaster</span> = modules.<span class="hljs-property">toaster</span>;    &#125;);  &#125;  <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;    <span class="hljs-keyword">const</span> &#123; type, placement &#125; = <span class="hljs-variable language_">this</span>.<span class="hljs-property">state</span>;    <span class="hljs-keyword">const</span> message = (      <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Notification</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&#123;type&#125;</span> <span class="hljs-attr">header</span>=<span class="hljs-string">&#123;type&#125;</span> <span class="hljs-attr">closable</span>&gt;</span></span><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">Placeholder.Paragraph</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&#123;&#123;</span> <span class="hljs-attr">width:</span> <span class="hljs-attr">320</span> &#125;&#125; <span class="hljs-attr">rows</span>=<span class="hljs-string">&#123;3&#125;</span> /&gt;</span></span><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">hr</span> /&gt;</span></span><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">Uploader</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;#&quot;</span> /&gt;</span></span><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">Notification</span>&gt;</span></span>    );    <span class="hljs-keyword">return</span> (      <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><span class="language-xml">        &#123;message&#125;</span><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">hr</span> /&gt;</span></span><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">ButtonToolbar</span>&gt;</span></span><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">SelectPicker</span></span></span><span class="hljs-tag"><span class="language-xml">            <span class="hljs-attr">value</span>=<span class="hljs-string">&#123;type&#125;</span></span></span><span class="hljs-tag"><span class="language-xml">            <span class="hljs-attr">data</span>=<span class="hljs-string">&#123;[</span></span></span><span class="hljs-tag"><span class="language-xml">              &#123; <span class="hljs-attr">label:</span> &quot;<span class="hljs-attr">info</span>&quot;, <span class="hljs-attr">value:</span> &quot;<span class="hljs-attr">info</span>&quot; &#125;,</span></span><span class="hljs-tag"><span class="language-xml">              &#123; <span class="hljs-attr">label:</span> &quot;<span class="hljs-attr">success</span>&quot;, <span class="hljs-attr">value:</span> &quot;<span class="hljs-attr">success</span>&quot; &#125;,</span></span><span class="hljs-tag"><span class="language-xml">              &#123; <span class="hljs-attr">label:</span> &quot;<span class="hljs-attr">warning</span>&quot;, <span class="hljs-attr">value:</span> &quot;<span class="hljs-attr">warning</span>&quot; &#125;,</span></span><span class="hljs-tag"><span class="language-xml">              &#123; <span class="hljs-attr">label:</span> &quot;<span class="hljs-attr">error</span>&quot;, <span class="hljs-attr">value:</span> &quot;<span class="hljs-attr">error</span>&quot; &#125;</span></span><span class="hljs-tag"><span class="language-xml">            ]&#125;</span></span><span class="hljs-tag"><span class="language-xml">            <span class="hljs-attr">onChange</span>=<span class="hljs-string">&#123;(e)</span> =&gt;</span> console.log(&quot;label&quot;, e)&#125;</span><span class="language-xml">            style=&#123;&#123; width: 200 &#125;&#125;</span><span class="language-xml">          /&gt;</span><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">SelectPicker</span></span></span><span class="hljs-tag"><span class="language-xml">            <span class="hljs-attr">value</span>=<span class="hljs-string">&#123;placement&#125;</span></span></span><span class="hljs-tag"><span class="language-xml">            <span class="hljs-attr">data</span>=<span class="hljs-string">&#123;[</span></span></span><span class="hljs-tag"><span class="language-xml">              &#123; <span class="hljs-attr">label:</span> &quot;<span class="hljs-attr">topStart</span>&quot;, <span class="hljs-attr">value:</span> &quot;<span class="hljs-attr">topStart</span>&quot; &#125;,</span></span><span class="hljs-tag"><span class="language-xml">              &#123; <span class="hljs-attr">label:</span> &quot;<span class="hljs-attr">topCenter</span>&quot;, <span class="hljs-attr">value:</span> &quot;<span class="hljs-attr">topCenter</span>&quot; &#125;,</span></span><span class="hljs-tag"><span class="language-xml">              &#123; <span class="hljs-attr">label:</span> &quot;<span class="hljs-attr">topEnd</span>&quot;, <span class="hljs-attr">value:</span> &quot;<span class="hljs-attr">topEnd</span>&quot; &#125;,</span></span><span class="hljs-tag"><span class="language-xml">              &#123; <span class="hljs-attr">label:</span> &quot;<span class="hljs-attr">bottomStart</span>&quot;, <span class="hljs-attr">value:</span> &quot;<span class="hljs-attr">bottomStart</span>&quot; &#125;,</span></span><span class="hljs-tag"><span class="language-xml">              &#123; <span class="hljs-attr">label:</span> &quot;<span class="hljs-attr">bottomCenter</span>&quot;, <span class="hljs-attr">value:</span> &quot;<span class="hljs-attr">bottomCenter</span>&quot; &#125;,</span></span><span class="hljs-tag"><span class="language-xml">              &#123; <span class="hljs-attr">label:</span> &quot;<span class="hljs-attr">bottomEnd</span>&quot;, <span class="hljs-attr">value:</span> &quot;<span class="hljs-attr">bottomEnd</span>&quot; &#125;</span></span><span class="hljs-tag"><span class="language-xml">            ]&#125;</span></span><span class="hljs-tag"><span class="language-xml">            <span class="hljs-attr">onChange</span>=<span class="hljs-string">&#123;(e)</span> =&gt;</span> console.log(&quot;placement&quot;, e)&#125;</span><span class="language-xml">            style=&#123;&#123; width: 200 &#125;&#125;</span><span class="language-xml">          /&gt;</span><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">Button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> this.toaster.push(message, &#123; placement &#125;)&#125;&gt;</span><span class="language-xml">            Push</span><span class="language-xml">          <span class="hljs-tag">&lt;/<span class="hljs-name">Button</span>&gt;</span></span><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">Button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> this.toaster.remove()&#125;&gt;Remove<span class="hljs-tag">&lt;/<span class="hljs-name">Button</span>&gt;</span></span><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">Button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> this.toaster.clear()&#125;&gt;Clear<span class="hljs-tag">&lt;/<span class="hljs-name">Button</span>&gt;</span></span><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">ButtonToolbar</span>&gt;</span></span><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span>    );  &#125;&#125;</code></pre><h2 id="react-suite-toaster-live-playground">react suite toaster live playground</h2><p><a href="https://codesandbox.io/s/billowing-rain-dn9r2y?fontsize=14&amp;hidenavigation=1&amp;theme=dark"><img src="https://codesandbox.io/static/img/play-codesandbox.svg" alt=""></a></p><iframe src="https://codesandbox.io/embed/billowing-rain-dn9r2y?fontsize=14&hidenavigation=1&theme=dark"     style="width:100%; height:500px; border:0; border-radius: 4px; overflow:hidden;"     title="billowing-rain-dn9r2y"     allow="accelerometer; ambient-light-sensor; camera; encrypted-media; geolocation; gyroscope; hid; microphone; midi; payment; usb; vr; xr-spatial-tracking"     sandbox="allow-forms allow-modals allow-popups allow-presentation allow-same-origin allow-scripts"   ></iframe>]]></content:encoded>
      
      
      <category domain="https://www.webmanajemen.com/categories/programming/">programming</category>
      
      
      <category domain="https://www.webmanajemen.com/tags/typescript/">typescript</category>
      
      <category domain="https://www.webmanajemen.com/tags/javascript/">javascript</category>
      
      <category domain="https://www.webmanajemen.com/tags/react/">react</category>
      
      
      <comments>https://www.webmanajemen.com/2023/09/how-to-use-react-suite-toaster-in-reactjs.html#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>How to fix vscode settings sync in linux</title>
      <link>https://www.webmanajemen.com/2023/09/fix-vscode-settings-sync-linux.html</link>
      <guid>https://www.webmanajemen.com/2023/09/fix-vscode-settings-sync-linux.html</guid>
      <pubDate>Mon, 18 Sep 2023 20:37:50 GMT</pubDate>
      
      <description>How to fix vscode settings sync in linux Ensure gnome-keyring is running systemctl --user status gnome-keyring-daemon gnome-keyring-daemon.service - GNOME Keyring daemon Loaded: loaded /usr/lib/system</description>
      
      
      
      <content:encoded><![CDATA[<h2 id="Ensure-gnome-keyring-is-running">Ensure gnome-keyring is running</h2><pre><code class="hljs bash">$ systemctl --user status gnome-keyring-daemon● gnome-keyring-daemon.service - GNOME Keyring daemon     Loaded: loaded (/usr/lib/systemd/user/gnome-keyring-daemon.service; enabled; preset: enabled)     Active: active (running) since Thu 2023-06-15 12:36:32 CEST; 3h 43min agoTriggeredBy: ● gnome-keyring-daemon.socket   Main PID: 16317 (gnome-keyring-d)      Tasks: 4 (<span class="hljs-built_in">limit</span>: 67352)     Memory: 3.5M        CPU: 1.067s     CGroup: /user.slice/user-1000.slice/user@1000.service/app.slice/gnome-keyring-daemon.service             └─16317 /usr/bin/gnome-keyring-daemon --foreground --components=pkcs11,secrets --control-directory=/run/user/1000/keyring</code></pre><p>Otherwise</p><h3 id="enable-gnome-keyring-daemon-manually">enable <code>gnome-keyring-daemon</code> manually</h3><pre><code class="hljs bash">gnome-keyring-daemon --replace --daemonize --components=pkcs11,secrets,ssh</code></pre><h4 id="Show-installed-gnome-keyring">Show installed <code>gnome-keyring</code></h4><pre><code class="hljs bash">$ dpkg -l | grep gnome-keyringii  gnome-keyring                                               42.1-1+b2                                            amd64        GNOME keyring services (daemon and tools)ii  gnome-keyring-pkcs11:amd64                                  42.1-1+b2                                            amd64        GNOME keyring module <span class="hljs-keyword">for</span> the PKCS<span class="hljs-comment">#11 module loading library</span>ii  libgnome-keyring-common                                     3.12.0-1                                             all          GNOME keyring services library - data filesii  libgnome-keyring-dev                                        3.12.0-1+b2                                          amd64        Development files <span class="hljs-keyword">for</span> GNOME keyring serviceii  libgnome-keyring0:amd64                                     3.12.0-1+b2                                          amd64        GNOME keyring services libraryii  libpam-gnome-keyring:amd64                                  42.1-1+b2                                            amd64        PAM module to unlock the GNOME keyring upon login</code></pre><h4 id="Show-installed-libsecret">Show installed <code>libsecret</code></h4><pre><code class="hljs bash">$ dpkg -l | grep libsecretii  libsecret-1-0:amd64                                         0.20.5-3                                             amd64        Secret storeii  libsecret-common                                            0.20.5-3                                             all          Secret store (common files)</code></pre><h4 id="Show-installed-dbus-x11">Show installed <code>dbus-x11</code></h4><pre><code class="hljs bash">$ dpkg -l | grep -i dbus-x11ii  dbus-x11                                                    1.14.6-1                                             amd64        simple interprocess messaging system (X11 deps)</code></pre><h2 id="Open-VSCode-argument-settings">Open VSCode argument settings</h2><p>open the Command Palette (<code>Ctrl+Shift+P</code>) and type <strong>Preferences: Configure Runtime Arguments</strong></p><p><img src="/2023/09/fix-vscode-settings-sync-linux/image.png" alt=""></p><h2 id="Add-settings">Add settings</h2><p>add the setting <code>&quot;password-store&quot;:&quot;gnome&quot;</code></p><p><img src="/2023/09/fix-vscode-settings-sync-linux/add-settings.png" alt=""></p><h2 id="Restart-VSCode">Restart VSCode</h2><p>after added the password-store to settings, clean restart VSCode.</p><p>Close the window (<code>X</code>) then re-open VSCode from start menu or desktop icon.</p><h2 id="Relogin">Relogin</h2><p>Try relogin VSCode with github or microsoft account</p>]]></content:encoded>
      
      
      <category domain="https://www.webmanajemen.com/categories/programming/">programming</category>
      
      
      <category domain="https://www.webmanajemen.com/tags/tips-tricks/">tips &amp; tricks</category>
      
      <category domain="https://www.webmanajemen.com/tags/vscode/">vscode</category>
      
      
      <comments>https://www.webmanajemen.com/2023/09/fix-vscode-settings-sync-linux.html#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>How to lazy loading JSX react module with dots notation</title>
      <link>https://www.webmanajemen.com/2023/09/how-to-react-lazy-load-module-with-dot-notation.html</link>
      <guid>https://www.webmanajemen.com/2023/09/how-to-react-lazy-load-module-with-dot-notation.html</guid>
      <pubDate>Sun, 17 Sep 2023 23:18:02 GMT</pubDate>
      
      <description>React lazy loading module with dot notation such as subclass or non default export</description>
      
      
      
      <content:encoded><![CDATA[<p>How to React lazy loading module with dot notation such as subclass or non default export ?</p><h2 id="Original-code-without-react-lazy">Original code without react lazy</h2><pre><code class="hljs tsx"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span>;<span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">Navbar</span>, <span class="hljs-title class_">Nav</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;rsuite&#x27;</span>;<span class="hljs-keyword">import</span> <span class="hljs-title class_">HomeIcon</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@rsuite/icons/legacy/Home&#x27;</span>;<span class="hljs-keyword">import</span> <span class="hljs-title class_">CogIcon</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@rsuite/icons/legacy/Cog&#x27;</span>;<span class="hljs-keyword">const</span> <span class="hljs-title function_">MyNavbar</span> = (<span class="hljs-params"></span>) =&gt; (  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Navbar</span>&gt;</span></span><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">Navbar.Brand</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>RSUITE<span class="hljs-tag">&lt;/<span class="hljs-name">Navbar.Brand</span>&gt;</span></span><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">Nav</span>&gt;</span></span><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">Nav.Item</span> <span class="hljs-attr">icon</span>=<span class="hljs-string">&#123;</span>&lt;<span class="hljs-attr">HomeIcon</span> /&gt;</span>&#125;&gt;Home<span class="hljs-tag">&lt;/<span class="hljs-name">Nav.Item</span>&gt;</span></span><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">Nav.Item</span>&gt;</span>News<span class="hljs-tag">&lt;/<span class="hljs-name">Nav.Item</span>&gt;</span></span><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">Nav.Item</span>&gt;</span>Products<span class="hljs-tag">&lt;/<span class="hljs-name">Nav.Item</span>&gt;</span></span><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">Nav.Menu</span> <span class="hljs-attr">title</span>=<span class="hljs-string">&quot;About&quot;</span>&gt;</span></span><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">Nav.Item</span>&gt;</span>Company<span class="hljs-tag">&lt;/<span class="hljs-name">Nav.Item</span>&gt;</span></span><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">Nav.Item</span>&gt;</span>Team<span class="hljs-tag">&lt;/<span class="hljs-name">Nav.Item</span>&gt;</span></span><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">Nav.Menu</span> <span class="hljs-attr">title</span>=<span class="hljs-string">&quot;Contact&quot;</span>&gt;</span></span><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">Nav.Item</span>&gt;</span>Via email<span class="hljs-tag">&lt;/<span class="hljs-name">Nav.Item</span>&gt;</span></span><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">Nav.Item</span>&gt;</span>Via telephone<span class="hljs-tag">&lt;/<span class="hljs-name">Nav.Item</span>&gt;</span></span><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">Nav.Menu</span>&gt;</span></span><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">Nav.Menu</span>&gt;</span></span><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">Nav</span>&gt;</span></span><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">Nav</span> <span class="hljs-attr">pullRight</span>&gt;</span></span><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">Nav.Item</span> <span class="hljs-attr">icon</span>=<span class="hljs-string">&#123;</span>&lt;<span class="hljs-attr">CogIcon</span> /&gt;</span>&#125;&gt;Settings<span class="hljs-tag">&lt;/<span class="hljs-name">Nav.Item</span>&gt;</span></span><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">Nav</span>&gt;</span></span><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">Navbar</span>&gt;</span></span>);</code></pre><h2 id="Convert-to-react-lazy">Convert to react lazy</h2><pre><code class="hljs tsx"><span class="hljs-comment">// below is turn them into react lazy loading</span><span class="hljs-keyword">const</span> <span class="hljs-title class_">Nav</span> = <span class="hljs-title class_">React</span>.<span class="hljs-title function_">lazy</span>(<span class="hljs-function">() =&gt;</span> <span class="hljs-keyword">import</span>(<span class="hljs-string">&#x27;rsuite/esm/Nav&#x27;</span>));<span class="hljs-keyword">const</span> <span class="hljs-title class_">NavItem</span> = <span class="hljs-title class_">React</span>.<span class="hljs-title function_">lazy</span>(<span class="hljs-function">() =&gt;</span>  <span class="hljs-keyword">import</span>(<span class="hljs-string">&#x27;rsuite/esm/Nav&#x27;</span>).<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">module</span> =&gt;</span> (&#123;    <span class="hljs-attr">default</span>: <span class="hljs-variable language_">module</span>.<span class="hljs-property">default</span>.<span class="hljs-property">Item</span>,  &#125;)),);<span class="hljs-keyword">const</span> <span class="hljs-title class_">NavMenu</span> = <span class="hljs-title class_">React</span>.<span class="hljs-title function_">lazy</span>(<span class="hljs-function">() =&gt;</span>  <span class="hljs-keyword">import</span>(<span class="hljs-string">&#x27;rsuite/esm/Nav&#x27;</span>).<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">module</span> =&gt;</span> (&#123;    <span class="hljs-attr">default</span>: <span class="hljs-variable language_">module</span>.<span class="hljs-property">default</span>.<span class="hljs-property">Menu</span>,  &#125;)),);<span class="hljs-keyword">const</span> <span class="hljs-title class_">Navbar</span> = <span class="hljs-title class_">React</span>.<span class="hljs-title function_">lazy</span>(<span class="hljs-function">() =&gt;</span> <span class="hljs-keyword">import</span>(<span class="hljs-string">&#x27;rsuite/esm/Navbar&#x27;</span>));<span class="hljs-keyword">const</span> <span class="hljs-title class_">NavbarBrand</span> = <span class="hljs-title class_">React</span>.<span class="hljs-title function_">lazy</span>(<span class="hljs-function">() =&gt;</span>  <span class="hljs-keyword">import</span>(<span class="hljs-string">&#x27;rsuite/esm/Navbar&#x27;</span>).<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">module</span> =&gt;</span> (&#123;    <span class="hljs-attr">default</span>: <span class="hljs-variable language_">module</span>.<span class="hljs-property">default</span>.<span class="hljs-property">Brand</span>,  &#125;)),);</code></pre><h2 id="How-to-lazy-import-SVG-Icon-in-ReactJS">How to lazy import SVG Icon in ReactJS</h2><p>sample codes to import SVG ICON with react lazy using library <strong>React Suite</strong></p><h3 id="Original-imports-SVG-Icon-without-react-lazy">Original imports SVG Icon without react lazy</h3><pre><code class="hljs tsx"><span class="hljs-keyword">import</span> <span class="hljs-title class_">HomeIcon</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@rsuite/icons/legacy/Home&#x27;</span>;<span class="hljs-keyword">import</span> <span class="hljs-title class_">CogIcon</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@rsuite/icons/legacy/Cog&#x27;</span>;</code></pre><h3 id="Import-SVG-Icon-using-react-lazy">Import SVG Icon using react lazy</h3><pre><code class="hljs tsx"><span class="hljs-keyword">const</span> <span class="hljs-title class_">HomeIcon</span> = <span class="hljs-title class_">React</span>.<span class="hljs-title function_">lazy</span>(<span class="hljs-function">() =&gt;</span> <span class="hljs-keyword">import</span>(<span class="hljs-string">&#x27;@rsuite/icons/legacy/Home&#x27;</span>));<span class="hljs-keyword">const</span> <span class="hljs-title class_">CogIcon</span> = <span class="hljs-title class_">React</span>.<span class="hljs-title function_">lazy</span>(<span class="hljs-function">() =&gt;</span> <span class="hljs-keyword">import</span>(<span class="hljs-string">&#x27;@rsuite/icons/legacy/Cog&#x27;</span>));</code></pre><h2 id="Full-Code-Sample">Full Code Sample</h2><p>my full sample code to lazy import <strong>React Suite</strong> components</p><p><strong>filename</strong>: MyNavbar.tsx</p><pre><code class="hljs tsx"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span>;<span class="hljs-comment">//</span><span class="hljs-comment">// import HomeIcon from &#x27;@rsuite/icons/legacy/Home&#x27;;</span><span class="hljs-comment">// import &#123; Nav, Navbar &#125; from &#x27;rsuite&#x27;;</span><span class="hljs-keyword">const</span> <span class="hljs-title class_">Nav</span> = <span class="hljs-title class_">React</span>.<span class="hljs-title function_">lazy</span>(<span class="hljs-function">() =&gt;</span> <span class="hljs-keyword">import</span>(<span class="hljs-string">&#x27;rsuite/esm/Nav&#x27;</span>));<span class="hljs-keyword">const</span> <span class="hljs-title class_">NavItem</span> = <span class="hljs-title class_">React</span>.<span class="hljs-title function_">lazy</span>(<span class="hljs-function">() =&gt;</span>  <span class="hljs-keyword">import</span>(<span class="hljs-string">&#x27;rsuite/esm/Nav&#x27;</span>).<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">module</span> =&gt;</span> (&#123;    <span class="hljs-attr">default</span>: <span class="hljs-variable language_">module</span>.<span class="hljs-property">default</span>.<span class="hljs-property">Item</span>,  &#125;)),);<span class="hljs-keyword">const</span> <span class="hljs-title class_">NavMenu</span> = <span class="hljs-title class_">React</span>.<span class="hljs-title function_">lazy</span>(<span class="hljs-function">() =&gt;</span>  <span class="hljs-keyword">import</span>(<span class="hljs-string">&#x27;rsuite/esm/Nav&#x27;</span>).<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">module</span> =&gt;</span> (&#123;    <span class="hljs-attr">default</span>: <span class="hljs-variable language_">module</span>.<span class="hljs-property">default</span>.<span class="hljs-property">Menu</span>,  &#125;)),);<span class="hljs-keyword">const</span> <span class="hljs-title class_">Navbar</span> = <span class="hljs-title class_">React</span>.<span class="hljs-title function_">lazy</span>(<span class="hljs-function">() =&gt;</span> <span class="hljs-keyword">import</span>(<span class="hljs-string">&#x27;rsuite/esm/Navbar&#x27;</span>));<span class="hljs-keyword">const</span> <span class="hljs-title class_">NavbarBrand</span> = <span class="hljs-title class_">React</span>.<span class="hljs-title function_">lazy</span>(<span class="hljs-function">() =&gt;</span>  <span class="hljs-keyword">import</span>(<span class="hljs-string">&#x27;rsuite/esm/Navbar&#x27;</span>).<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">module</span> =&gt;</span> (&#123;    <span class="hljs-attr">default</span>: <span class="hljs-variable language_">module</span>.<span class="hljs-property">default</span>.<span class="hljs-property">Brand</span>,  &#125;)),);<span class="hljs-keyword">const</span> <span class="hljs-title class_">HomeIcon</span> = <span class="hljs-title class_">React</span>.<span class="hljs-title function_">lazy</span>(<span class="hljs-function">() =&gt;</span> <span class="hljs-keyword">import</span>(<span class="hljs-string">&#x27;@rsuite/icons/legacy/Home&#x27;</span>));<span class="hljs-keyword">const</span> <span class="hljs-title function_">MyNavbar</span> = (<span class="hljs-params">&#123; ...props &#125;</span>) =&gt; &#123;  <span class="hljs-keyword">return</span> (    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Navbar</span> &#123;<span class="hljs-attr">...props</span>&#125;&gt;</span></span><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">NavbarBrand</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>WMI<span class="hljs-tag">&lt;/<span class="hljs-name">NavbarBrand</span>&gt;</span></span><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">Nav</span>&gt;</span></span><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">NavItem</span> <span class="hljs-attr">icon</span>=<span class="hljs-string">&#123;</span>&lt;<span class="hljs-attr">HomeIcon</span> /&gt;</span>&#125; href=&quot;/page&quot;&gt;</span><span class="language-xml">          Home</span><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">NavItem</span>&gt;</span></span><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">NavItem</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;/page/google/login&quot;</span>&gt;</span>Login<span class="hljs-tag">&lt;/<span class="hljs-name">NavItem</span>&gt;</span></span><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">NavMenu</span> <span class="hljs-attr">title</span>=<span class="hljs-string">&quot;Tools&quot;</span>&gt;</span></span><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">NavItem</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;navItemClick&#125;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;/page/bot-detect&quot;</span>&gt;</span></span><span class="language-xml">            Selenium Checker</span><span class="language-xml">          <span class="hljs-tag">&lt;/<span class="hljs-name">NavItem</span>&gt;</span></span><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">NavItem</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;navItemClick&#125;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;/page/moment-timezone&quot;</span>&gt;</span></span><span class="language-xml">            Moment Timezone Playground</span><span class="language-xml">          <span class="hljs-tag">&lt;/<span class="hljs-name">NavItem</span>&gt;</span></span><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">NavItem</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;navItemClick&#125;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;/page/cookies&quot;</span>&gt;</span></span><span class="language-xml">            Cookie Manager</span><span class="language-xml">          <span class="hljs-tag">&lt;/<span class="hljs-name">NavItem</span>&gt;</span></span><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">NavMenu</span>&gt;</span></span><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">Nav</span>&gt;</span></span><span class="language-xml">      &#123;/* <span class="hljs-tag">&lt;<span class="hljs-name">Nav</span> <span class="hljs-attr">pullRight</span>&gt;</span></span><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">NavItem</span> <span class="hljs-attr">icon</span>=<span class="hljs-string">&#123;</span>&lt;<span class="hljs-attr">CogIcon</span> /&gt;</span>&#125;&gt;Settings<span class="hljs-tag">&lt;/<span class="hljs-name">NavItem</span>&gt;</span></span><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">Nav</span>&gt;</span> */&#125;</span><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">Navbar</span>&gt;</span></span>  );&#125;;<span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title class_">MyNavbar</span>;<span class="hljs-keyword">function</span> <span class="hljs-title function_">navItemClick</span>(<span class="hljs-params">e: &#123; target: <span class="hljs-built_in">any</span> &#125;</span>): <span class="hljs-built_in">any</span> &#123;  <span class="hljs-keyword">const</span> el = e.<span class="hljs-property">target</span> <span class="hljs-keyword">as</span> <span class="hljs-title class_">HTMLElement</span>;  <span class="hljs-keyword">if</span> (el.<span class="hljs-title function_">hasAttribute</span>(<span class="hljs-string">&#x27;href&#x27;</span>)) &#123;    <span class="hljs-variable language_">window</span>.<span class="hljs-property">location</span>.<span class="hljs-property">href</span> = el.<span class="hljs-title function_">getAttribute</span>(<span class="hljs-string">&#x27;href&#x27;</span>);  &#125;&#125;</code></pre><p><strong>filename</strong>: MyTheme.tsx</p><pre><code class="hljs tsx"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span>;<span class="hljs-comment">// lazy import react suite custom navbar</span><span class="hljs-keyword">const</span> <span class="hljs-title class_">MyNavbar</span> = <span class="hljs-title class_">React</span>.<span class="hljs-title function_">lazy</span>(<span class="hljs-function">() =&gt;</span> <span class="hljs-keyword">import</span>(<span class="hljs-string">&quot;./Navbar&quot;</span>));<span class="hljs-comment">// lazy import other react suite components</span><span class="hljs-keyword">const</span> <span class="hljs-title class_">Container</span> = <span class="hljs-title class_">React</span>.<span class="hljs-title function_">lazy</span>(<span class="hljs-function">() =&gt;</span> <span class="hljs-keyword">import</span>(<span class="hljs-string">&#x27;rsuite/esm/Container&#x27;</span>));<span class="hljs-keyword">const</span> <span class="hljs-title class_">Sidebar</span> = <span class="hljs-title class_">React</span>.<span class="hljs-title function_">lazy</span>(<span class="hljs-function">() =&gt;</span> <span class="hljs-keyword">import</span>(<span class="hljs-string">&#x27;rsuite/esm/Sidebar&#x27;</span>));<span class="hljs-keyword">const</span> <span class="hljs-title class_">Header</span> = <span class="hljs-title class_">React</span>.<span class="hljs-title function_">lazy</span>(<span class="hljs-function">() =&gt;</span> <span class="hljs-keyword">import</span>(<span class="hljs-string">&#x27;rsuite/esm/Header&#x27;</span>));<span class="hljs-keyword">const</span> <span class="hljs-title class_">Content</span> = <span class="hljs-title class_">React</span>.<span class="hljs-title function_">lazy</span>(<span class="hljs-function">() =&gt;</span> <span class="hljs-keyword">import</span>(<span class="hljs-string">&#x27;rsuite/esm/Content&#x27;</span>));<span class="hljs-keyword">const</span> <span class="hljs-title class_">Footer</span> = <span class="hljs-title class_">React</span>.<span class="hljs-title function_">lazy</span>(<span class="hljs-function">() =&gt;</span> <span class="hljs-keyword">import</span>(<span class="hljs-string">&#x27;rsuite/esm/Footer&#x27;</span>));<span class="hljs-comment">// export the theme</span><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">MyTheme</span>(<span class="hljs-params">props</span>) &#123;  <span class="hljs-keyword">return</span> (    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Container</span>&gt;</span></span><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">Header</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;fixed-top&quot;</span>&gt;</span></span><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">MyNavbar</span> /&gt;</span></span><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">Header</span>&gt;</span></span><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">Container</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;content-wrapper&quot;</span>&gt;</span></span><span class="language-xml">        &#123;/* using children property */&#125;</span><span class="language-xml">        &#123;/* <span class="hljs-tag">&lt;<span class="hljs-name">Content</span>&gt;</span>&#123;this.props.children&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">Content</span>&gt;</span> */&#125;</span><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">Content</span>&gt;</span></span><span class="language-xml">          &#123;/* using react-router-dom */&#125;</span><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">Outlet</span> /&gt;</span></span><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">Content</span>&gt;</span></span><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">Container</span>&gt;</span></span><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">Container</span>&gt;</span></span>  );&#125;</code></pre><h2 id="conclusion">conclusion</h2><p>now you learned How to lazy loading module without default export in reactjs, and this method also works on <code>typescript</code>.</p>]]></content:encoded>
      
      
      <category domain="https://www.webmanajemen.com/categories/programming/">programming</category>
      
      
      <category domain="https://www.webmanajemen.com/tags/typescript/">typescript</category>
      
      <category domain="https://www.webmanajemen.com/tags/javascript/">javascript</category>
      
      <category domain="https://www.webmanajemen.com/tags/react/">react</category>
      
      
      <comments>https://www.webmanajemen.com/2023/09/how-to-react-lazy-load-module-with-dot-notation.html#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Setup VSCode for typescript with css modules</title>
      <link>https://www.webmanajemen.com/NodeJS/setup-vscode-for-typescript-with-scss-modules.html</link>
      <guid>https://www.webmanajemen.com/NodeJS/setup-vscode-for-typescript-with-scss-modules.html</guid>
      <pubDate>Fri, 15 Sep 2023 15:59:55 GMT</pubDate>
      
      <description>Setup VSCode for typescript with css modules import support. You can be able import css,scss,less,stylus file as modular import in typescriptreactwebpack project</description>
      
      
      
      <content:encoded><![CDATA[<p>Setup VSCode for typescript with css modules import support. You can be able import css,scss,less,stylus file as modular import in typescript+react+webpack project.</p><p>This method also has the following functions and advantages:</p><ul><li>fix issues react bundle all things together.<ul><li><a href="https://stackoverflow.com/a/62361595/6404439">style each React route independently</a></li><li><a href="https://stackoverflow.com/questions/62360776/react-js-react-router-dom-applying-css-on-every-routes">React.JS React-Router-Dom applying css on every routes</a></li></ul></li></ul><h2 id="Install-typescript-plugin">Install typescript plugin</h2><pre><code class="hljs bash">yarn add -D typescript-plugin-css-modules</code></pre><p>or</p><pre><code class="hljs bash">npm install -D typescript-plugin-css-modules</code></pre><h2 id="Change-VSCode-USER-SETTINGS-json">Change VSCode USER SETTINGS json</h2><p>add these configuration to your user settings json by <code>CTRL+SHIFT+P</code></p><p><img src="https://github.com/dimaslanjaka/source-posts/assets/12471057/d6c87041-8545-49af-b71a-70f575829cca" alt=""></p><pre><code class="hljs jsonc">&#123;  // prompt using local project typescript version  &quot;typescript.enablePromptUseWorkspaceTsdk&quot;: true,  // add plugin to vscode typescript server language  &quot;typescript.tsserver.pluginPaths&quot;: [    &quot;typescript-plugin-css-modules&quot;  ]&#125;</code></pre><h2 id="Change-VSCode-PROJECT-SETTINGS-json">Change VSCode PROJECT SETTINGS json</h2><p>add these configuration to your project settings json</p><pre><code class="hljs jsonc">&#123;  // tell vscode to using local project typescript version  &quot;typescript.tsdk&quot;: &quot;./node_modules/typescript/lib&quot;&#125;</code></pre><h2 id="Modify-tsconfig-json">Modify tsconfig.json</h2><p>enable css modules plugin in project typescript configuration by editing <code>tsconfig.json</code></p><pre><code class="hljs jsonc">&#123;  &quot;compilerOptions&quot;: &#123;    // enable css modules plugin    &quot;plugins&quot;: [&#123; &quot;name&quot;: &quot;typescript-plugin-css-modules&quot; &#125;],    &quot;lib&quot;: [      &quot;DOM&quot;, // browser DOM support such as (window, document.*, etc)      &quot;ES2020&quot; // enable modern ECMAScript prototype support    ]   &#125;,  &quot;include&quot;: [    &quot;src&quot;, // include all typescript and javascript files    &quot;src/**/*.json&quot;, // json file import support    &quot;src/**/*.css&quot;, // css file import support    &quot;src/**/*.scss&quot;, // scss file import support    &quot;src/**/*.less&quot; // less file import support  ],  &quot;exclude&quot;: [    &quot;**/node_modules/**&quot;, // exclude node_modules folder from compilation    &quot;**/dist/**&quot; // exclude dist folder  ]&#125;</code></pre><h3 id="Full-example-of-tsconfig-json">Full example of <code>tsconfig.json</code></h3><p>Or use my typescript config then modify it according to your project structure</p><pre><code class="hljs jsonc">&#123;  &quot;extends&quot;: &quot;./tsconfig.base.json&quot;,  &quot;compilerOptions&quot;: &#123;    &quot;jsx&quot;: &quot;react&quot;,    &quot;module&quot;: &quot;CommonJS&quot;,    &quot;moduleResolution&quot;: &quot;Node&quot;,    &quot;esModuleInterop&quot;: true,    &quot;outDir&quot;: &quot;tmp/tsc&quot;,    &quot;checkJs&quot;: false,    &quot;composite&quot;: true,    &quot;allowJs&quot;: true,    &quot;resolveJsonModule&quot;: true,    &quot;downlevelIteration&quot;: true,    &quot;allowSyntheticDefaultImports&quot;: true,    &quot;skipDefaultLibCheck&quot;: true,    &quot;skipLibCheck&quot;: true,    &quot;strict&quot;: false,    &quot;lib&quot;: [      &quot;DOM&quot;,      &quot;ES2020&quot;    ],    &quot;typeRoots&quot;: [      &quot;./typings&quot;,      &quot;./node_modules/@types&quot;,      &quot;./node_modules/nodejs-package-types/typings&quot;    ],    &quot;types&quot;: [      &quot;rsuite&quot;    ],    &quot;plugins&quot;: [      &#123;        &quot;name&quot;: &quot;typescript-plugin-css-modules&quot;      &#125;    ]  &#125;,  &quot;include&quot;: [    &quot;src&quot;,    &quot;src/**/*.json&quot;,    &quot;src/**/*.css&quot;,    &quot;src/**/*.scss&quot;,    &quot;src/**/*.less&quot;,    &quot;typings&quot;  ],  &quot;exclude&quot;: [    &quot;**/node_modules/**&quot;,    &quot;./page/**/*&quot;,    &quot;**/dist/**&quot;  ]&#125;</code></pre><h2 id="Create-or-modify-src-global-d-ts">Create or modify <code>src/global.d.ts</code></h2><p>create or modify <code>src/global.d.ts</code> to apply css modules to typescriptreact project, by adding below declarations:</p><pre><code class="hljs jsonc">// typescript css modulesdeclare module &#x27;*.module.css&#x27; &#123;  const classes: &#123; [key: string]: string &#125;;  export default classes;&#125;declare module &#x27;*.module.scss&#x27; &#123;  const classes: &#123; [key: string]: string &#125;;  export default classes;&#125;declare module &#x27;*.module.sass&#x27; &#123;  const classes: &#123; [key: string]: string &#125;;  export default classes;&#125;declare module &#x27;*.module.less&#x27; &#123;  const classes: &#123; [key: string]: string &#125;;  export default classes;&#125;declare module &#x27;*.module.styl&#x27; &#123;  const classes: &#123; [key: string]: string &#125;;  export default classes;&#125;// additional configsdeclare global &#123;  interface Window &#123;    // custom global window properties    [key: string]: any; // enable dynamic object support    dataLayer: Record&lt;string, any&gt;[]; // google analytics    opera: Record&lt;string, any&gt;;    opr: Record&lt;string, any&gt;;    safari: Record&lt;string, any&gt;;    adsbygoogle: any; // google adsense    clipboardData?: any; // safari clipboard    google: import(&#x27;@types/google.accounts&#x27;); // google new API GSI client  &#125;  interface Event &#123;    // custom global event properties    clipboardData?: any; // safari clipboard  &#125;&#125;</code></pre><h2 id="Conclusion">Conclusion</h2><p>Now reload window and your vscode now supported import css modules into typescript or javascript files (react or non-react).<br>To test create new file:</p><p>create the style <code>src/Layout.module.scss</code></p><pre><code class="hljs scss"><span class="hljs-selector-class">.myLayout</span> &#123; <span class="hljs-selector-tag">h1</span> &#123; <span class="hljs-attribute">color</span>: blue; <span class="hljs-attribute">background-color</span>: white; &#125;&#125;</code></pre><p>create the component <code>src/Layout.tsx</code></p><pre><code class="hljs typescript"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span>;<span class="hljs-keyword">import</span> styles <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./Layout.module.scss&#x27;</span>;<span class="hljs-keyword">export</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">Layout</span>(<span class="hljs-params"></span>) &#123;  <span class="hljs-keyword">return</span> (    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&#123;styles.myLayout&#125;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>Hello World<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span>  );&#125;</code></pre>]]></content:encoded>
      
      
      <category domain="https://www.webmanajemen.com/categories/programming/">programming</category>
      
      
      <category domain="https://www.webmanajemen.com/tags/vscode/">vscode</category>
      
      <category domain="https://www.webmanajemen.com/tags/typescript/">typescript</category>
      
      <category domain="https://www.webmanajemen.com/tags/javascript/">javascript</category>
      
      <category domain="https://www.webmanajemen.com/tags/react/">react</category>
      
      
      <comments>https://www.webmanajemen.com/NodeJS/setup-vscode-for-typescript-with-scss-modules.html#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>create interface class and function in typescript d.ts</title>
      <link>https://www.webmanajemen.com/NodeJS/d-ts-create-interface-class-and-function.html</link>
      <guid>https://www.webmanajemen.com/NodeJS/d-ts-create-interface-class-and-function.html</guid>
      <pubDate>Wed, 06 Sep 2023 18:46:43 GMT</pubDate>
      
      <description>create interface class and function in typescript d.ts Summary when you create an library which is can be function or class like below sample import Client from ./client;// The following two lines bot</description>
      
      
      
      <content:encoded><![CDATA[<h2 id="Summary">Summary</h2><p>when you create an library which is can be function or class like below sample</p><pre><code class="hljs ts"><span class="hljs-keyword">import</span> <span class="hljs-title class_">Client</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./client&quot;</span>;<span class="hljs-comment">// The following two lines both achieve the same result.</span><span class="hljs-keyword">const</span> clas = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Client</span>();<span class="hljs-keyword">const</span> fun = <span class="hljs-title class_">Client</span>();</code></pre><p>The <code>client</code> may be constructed via the new keyword or implicitly without as a function call.<br>How you can express this in a types.d.ts file?</p><h2 id="Conclusion">Conclusion</h2><p>The conventional way something like this is done in TypeScript’s own standard library (see <a href="https://github.com/microsoft/TypeScript/blob/ec77bff33226fb01f4e38b20e481f8c1fcd9e6c0/lib/lib.es5.d.ts#L729-L907">the typings for <code>Date</code></a> for example) is to declare two <code>interface</code>s; one for the instance type (with the intended <code>class</code> name) and another for the constructor type (usually the same name with <code>Constructor</code> appended to it).<br>And then you declare the class constructor value as a <code>var</code> or <code>const</code>.<br>If you want to give the constructor added functionality, such as being callable without <code>new</code>, you can do it inside the <code>XXXConstructor</code> interface.<br>Like so: (Making a class and function interchangeable in Typescript types.d.ts library definition)</p><pre><code class="hljs ts"><span class="hljs-comment">// this you class import, were assumed like this</span><span class="hljs-keyword">interface</span> <span class="hljs-title class_">Client</span> &#123;  <span class="hljs-title function_">foo</span>(): <span class="hljs-built_in">void</span>;&#125;<span class="hljs-comment">// create new client constructor</span><span class="hljs-keyword">interface</span> <span class="hljs-title class_">ClientConstructor</span> &#123;  <span class="hljs-title function_">new</span>(): <span class="hljs-title class_">Client</span>;  (): <span class="hljs-title class_">Client</span>;&#125;<span class="hljs-comment">// export them</span><span class="hljs-keyword">declare</span> <span class="hljs-keyword">const</span> <span class="hljs-title class_">Client</span>: <span class="hljs-title class_">ClientConstructor</span>;<span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title class_">Client</span>;</code></pre><p><a href="https://www.typescriptlang.org/play?module=1#code/PTAEGMBsEsFMDsAuA6RBnAUCUiAW01QBPAewFcJIBDNQ6AWwAcSAnRAGlAHdYXZQaaMvVgATUDADW-PAQzQkvAGZVw-AJIBhGAkSgA3hlCglJEgApkVqiwDmaAFwD4RAJROAbiWiiA3BgBfDAwlMnhwRGgSeFBtOCRzWUdQLR0kVwMjCGi0PVMSUABeUHNGPiVoAA8nXJYFWwzCgD4DbPg0EkhYZEgSW1Lyqs4AcnzhjKDjaCUSpIzDY2Mk5HyikzN-Y0nQPkQyFhiFxfysoKCsMHA+KkR+eFguSni9cBzEFjII1nlFFhU1WJpRCaN4fL4sTLGe5cczuFJxXSbEpw1LPfznbCwSrMNg4XCwegYLE4vT6QHPEHtd6fRCsUBBYmsPSiWAqMiQPQIpACQhc4GgmmsfwXUAAGVg6BwsFyoGgiBFDBJ5N0JhYJHooGGyGAUGew2F2CusBu-HoJHAklAaCoTC66whSVAjGoRFsarC4luuQwrypoHoRD5ayDNGVSEptUFLGFvplsepETEa2h-sDQNh-njYNuohWZnMACIAEZEUApvkF1wxt4QKiQLriYoBvnIIsKUTmfQBVwZn11ht5izF0uhcKV3xAA">Sample mock demo typescript playground</a></p>]]></content:encoded>
      
      
      <category domain="https://www.webmanajemen.com/categories/programming/">programming</category>
      
      
      <category domain="https://www.webmanajemen.com/tags/typescript/">typescript</category>
      
      
      <comments>https://www.webmanajemen.com/NodeJS/d-ts-create-interface-class-and-function.html#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Fix rollup eval warning</title>
      <link>https://www.webmanajemen.com/NodeJS/fix-rollup-eval-warning.html</link>
      <guid>https://www.webmanajemen.com/NodeJS/fix-rollup-eval-warning.html</guid>
      <pubDate>Mon, 04 Sep 2023 13:02:20 GMT</pubDate>
      
      <description>Fix rollup eval warning Error summary _freeGlobal appears to be imported at https://github.com/lodash/lodash/blob/master/.internal/nodeUtil.jsL1. It looks like lodash is a dependency of Bluebird https</description>
      
      
      
      <content:encoded><![CDATA[<h2 id="Error-summary">Error summary</h2><p>_freeGlobal appears to be imported at <a href="https://github.com/lodash/lodash/blob/master/.internal/nodeUtil.js#L1">https://github.com/lodash/lodash/blob/master/.internal/nodeUtil.js#L1</a>. It looks like lodash is a dependency of Bluebird (<a href="https://github.com/request/promise-core/blob/master/package.json#L36">https://github.com/request/promise-core/blob/master/package.json#L36</a>).</p><p>If I try to add lodash to the fuzzymatchingjs’s dependencies directly, this require for freeGlobal is resolved and the JavaScript is usable in a browser context.</p><p>some looks error logs</p><pre><code class="hljs log">(!) Use of eval is strongly discouragedhttps://rollupjs.org/troubleshooting/#avoiding-evalnode_modules/bluebird/js/browser/bluebird.js</code></pre><h2 id="How-to-fix">How to fix</h2><ul><li>change orders of plugins</li></ul><blockquote><p>Fixed by putting <code>rollup-commonjs</code> plugin just after <code>rollup-plugin-node-resolve</code> plugin and it is working like a charm! :)</p><p>Or newer version<br>putting <code>@rollup/plugin-commonjs</code> plugin just after <code>@rollup/plugin-node-resolve</code> plugin</p></blockquote><h2 id="Conclusion">Conclusion</h2><p>this warning easily fixed by change orders of plugin</p><p>full <code>rollup.config.js</code> working example:</p><pre><code class="hljs js"><span class="hljs-comment">// bundle for browser and ESM module</span><span class="hljs-keyword">const</span> resolve = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;@rollup/plugin-node-resolve&#x27;</span>);<span class="hljs-keyword">const</span> commonjs = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;@rollup/plugin-commonjs&#x27;</span>);<span class="hljs-keyword">const</span> &#123; terser &#125; = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;rollup-plugin-terser&#x27;</span>);<span class="hljs-keyword">const</span> json = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;@rollup/plugin-json&#x27;</span>);<span class="hljs-comment">//const typescript = require(&#x27;@rollup/plugin-typescript&#x27;);</span><span class="hljs-comment">//const tsconfig = require(&#x27;./tsconfig.build.json&#x27;);</span><span class="hljs-comment">//const tsbase = require(&#x27;./tsconfig.base.json&#x27;);</span><span class="hljs-keyword">const</span> lib = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;./package.json&#x27;</span>);<span class="hljs-keyword">const</span> outputFileName = <span class="hljs-string">&#x27;sbg-utility&#x27;</span>;<span class="hljs-keyword">const</span> name = <span class="hljs-string">&#x27;sbg-utility&#x27;</span>;<span class="hljs-keyword">const</span> input = <span class="hljs-string">&#x27;./dist/index.js&#x27;</span>;<span class="hljs-keyword">const</span> polyfill = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;rollup-plugin-polyfill-node&#x27;</span>);<span class="hljs-comment">/**</span><span class="hljs-comment"> *</span><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> &#123;<span class="hljs-type">import(&#x27;rollup&#x27;).RollupOptions</span>&#125; <span class="hljs-variable">config</span></span><span class="hljs-comment"> * <span class="hljs-doctag">@returns</span></span><span class="hljs-comment"> */</span><span class="hljs-keyword">const</span> <span class="hljs-title function_">buildConfig</span> = (<span class="hljs-params">config</span>) =&gt; &#123;  <span class="hljs-comment">/*const tsOpt = Object.assign(tsbase, tsconfig, &#123;</span><span class="hljs-comment">    compilerOptions: &#123;</span><span class="hljs-comment">      module: &#x27;esnext&#x27;,</span><span class="hljs-comment">      lib: [&#x27;es2020&#x27;, &#x27;dom&#x27;],</span><span class="hljs-comment">      target: &#x27;es5&#x27;,</span><span class="hljs-comment">      allowSyntheticDefaultImports: true,</span><span class="hljs-comment">      skipLibCheck: true</span><span class="hljs-comment">    &#125;</span><span class="hljs-comment">  &#125;);</span><span class="hljs-comment">  if (tsOpt.extends) delete tsOpt.extends;*/</span>  <span class="hljs-comment">// plugins: [typescript(tsOpt)]</span>  <span class="hljs-keyword">const</span> <span class="hljs-title function_">build</span> = (<span class="hljs-params">&#123; minified &#125;</span>) =&gt; (&#123;    input,    ...config,    <span class="hljs-attr">output</span>: &#123;      ...config.<span class="hljs-property">output</span>,      <span class="hljs-attr">file</span>: <span class="hljs-string">`<span class="hljs-subst">$&#123;config.output.file&#125;</span>.<span class="hljs-subst">$&#123;minified ? <span class="hljs-string">&#x27;min.js&#x27;</span> : <span class="hljs-string">&#x27;js&#x27;</span>&#125;</span>`</span>    &#125;,    <span class="hljs-attr">plugins</span>: [      <span class="hljs-title function_">json</span>(),      <span class="hljs-title function_">polyfill</span>(),      <span class="hljs-title function_">commonjs</span>(),      <span class="hljs-title function_">resolve</span>(&#123; <span class="hljs-attr">preferBuiltins</span>: <span class="hljs-literal">true</span>, <span class="hljs-attr">browser</span>: <span class="hljs-literal">true</span> &#125;),      minified &amp;&amp; <span class="hljs-title function_">terser</span>(),      ...(config.<span class="hljs-property">plugins</span> || [])    ]  &#125;);  <span class="hljs-keyword">return</span> [<span class="hljs-title function_">build</span>(&#123; <span class="hljs-attr">minified</span>: <span class="hljs-literal">false</span> &#125;), <span class="hljs-title function_">build</span>(&#123; <span class="hljs-attr">minified</span>: <span class="hljs-literal">true</span> &#125;)];&#125;;<span class="hljs-keyword">const</span> <span class="hljs-title function_">defaults</span> = <span class="hljs-keyword">async</span> (<span class="hljs-params"></span>) =&gt; &#123;  <span class="hljs-keyword">const</span> year = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>().<span class="hljs-title function_">getFullYear</span>();  <span class="hljs-keyword">const</span> banner = <span class="hljs-string">`// <span class="hljs-subst">$&#123;lib.name&#125;</span> v<span class="hljs-subst">$&#123;lib.version&#125;</span> Copyright (c) <span class="hljs-subst">$&#123;year&#125;</span> <span class="hljs-subst">$&#123;lib.author&#125;</span>`</span>;  <span class="hljs-keyword">return</span> [    ...<span class="hljs-title function_">buildConfig</span>(&#123;      <span class="hljs-attr">output</span>: &#123;        <span class="hljs-attr">file</span>: <span class="hljs-string">`dist/browser/<span class="hljs-subst">$&#123;outputFileName&#125;</span>`</span>,        name,        <span class="hljs-attr">format</span>: <span class="hljs-string">&#x27;umd&#x27;</span>,        <span class="hljs-attr">exports</span>: <span class="hljs-string">&#x27;default&#x27;</span>,        banner      &#125;    &#125;),    ...<span class="hljs-title function_">buildConfig</span>(&#123;      <span class="hljs-attr">output</span>: &#123;        <span class="hljs-attr">file</span>: <span class="hljs-string">`dist/esm/<span class="hljs-subst">$&#123;outputFileName&#125;</span>`</span>,        <span class="hljs-attr">format</span>: <span class="hljs-string">&#x27;esm&#x27;</span>,        <span class="hljs-attr">preferConst</span>: <span class="hljs-literal">true</span>,        <span class="hljs-attr">exports</span>: <span class="hljs-string">&#x27;named&#x27;</span>,        banner      &#125;    &#125;)  ];&#125;;<span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = defaults;</code></pre><p>then run this config using <code>rollup -c -m</code></p><ul><li><a href="https://github.com/rollup/rollup-plugin-commonjs/issues/210">issue references</a></li></ul>]]></content:encoded>
      
      
      <category domain="https://www.webmanajemen.com/categories/programming/">programming</category>
      
      
      <category domain="https://www.webmanajemen.com/tags/javascript/">javascript</category>
      
      
      <comments>https://www.webmanajemen.com/NodeJS/fix-rollup-eval-warning.html#disqus_thread</comments>
      
    </item>
    
  </channel>
</rss>
