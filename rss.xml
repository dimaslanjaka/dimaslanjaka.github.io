<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>WMI</title>
    <link>https://www.webmanajemen.com/</link>
    
    <image>
      <url>https://www.webmanajemen.com/logo.png</url>
      <title>WMI</title>
      <link>https://www.webmanajemen.com/</link>
    </image>
    
    <atom:link href="https://www.webmanajemen.com/rss.xml" rel="self" type="application/rss+xml"/>
    
    <description>Website Management Indonesia is a blog about scripts, tips and tricks, games, software. Covering php, javascript, jquery, mysql, seo, e-commerce and others.</description>
    <pubDate>Sat, 16 Mar 2024 19:06:22 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>OkHttp cookie handling on android webview supported</title>
      <link>https://www.webmanajemen.com/2024/03/okhttp-cookie-handling-on-android.html</link>
      <guid>https://www.webmanajemen.com/2024/03/okhttp-cookie-handling-on-android.html</guid>
      <pubDate>Sat, 16 Mar 2024 19:06:22 GMT</pubDate>
      
      <description>OkHttp cookie handling on android webview supported Here how i implement cookie handling for android lollipop - tiramisu and also jvm and non-persistent connection. requires: [versions]webkit = 1.10.0</description>
      
      
      
      <content:encoded><![CDATA[<p>Here how i implement cookie handling for android lollipop - tiramisu and also jvm and non-persistent connection.</p><p>requires:</p><pre><code class="hljs toml"><span class="hljs-section">[versions]</span><span class="hljs-attr">webkit</span> = <span class="hljs-string">&quot;1.10.0&quot;</span><span class="hljs-attr">okhttp</span> = <span class="hljs-string">&quot;4.12.0&quot;</span><span class="hljs-section">[libraries]</span><span class="hljs-attr">webkit</span> = &#123; module = <span class="hljs-string">&quot;androidx.webkit:webkit&quot;</span>, version.ref = <span class="hljs-string">&quot;webkit&quot;</span> &#125;<span class="hljs-attr">okhttp</span> = &#123; module = <span class="hljs-string">&quot;com.squareup.okhttp3:okhttp-bom&quot;</span>, version.ref = <span class="hljs-string">&quot;okhttp&quot;</span> &#125;<span class="hljs-attr">okhttp-lib</span> = &#123; module = <span class="hljs-string">&quot;com.squareup.okhttp3:okhttp&quot;</span> &#125;</code></pre><pre><code class="hljs gradle">implementation libs.webkitimplementation platform(libs.okhttp)implementation libs.okhttp.lib</code></pre><p>create <code>WebkitCookieManager.kt</code></p><pre><code class="hljs kotlin"><span class="hljs-keyword">import</span> android.content.Context<span class="hljs-keyword">import</span> android.webkit.WebView<span class="hljs-keyword">import</span> okhttp3.Cookie<span class="hljs-keyword">import</span> okhttp3.CookieJar<span class="hljs-keyword">import</span> okhttp3.HttpUrl<span class="hljs-keyword">import</span> java.net.CookieHandler<span class="hljs-keyword">import</span> java.net.CookiePolicy<span class="hljs-keyword">import</span> java.net.HttpCookie<span class="hljs-comment">/**</span><span class="hljs-comment"> * android webkit webview cookie manager.</span><span class="hljs-comment"> * [FULL USAGES](https://dimaslanjaka.github.io/2024/03/okhttp-cookie-handling-on-android.html)</span><span class="hljs-comment"> *</span><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> Dimas Lanjaka &lt;a href=&quot;https://www.webmanajemen.com&quot;&gt;https://www.webmanajemen.com&lt;/a&gt;</span><span class="hljs-comment"> */</span><span class="hljs-keyword">open</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">WebkitCookieManager</span> : <span class="hljs-type">CookieJar</span> &#123;    <span class="hljs-comment">/**</span><span class="hljs-comment">     * support for below android 10</span><span class="hljs-comment">     */</span>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">var</span> webkitCookieManager: android.webkit.CookieManager? = <span class="hljs-literal">null</span>    <span class="hljs-comment">/**</span><span class="hljs-comment">     * support for jvm or android 10+</span><span class="hljs-comment">     */</span>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">var</span> javaCookieManager: java.net.CookieManager? = <span class="hljs-literal">null</span>    <span class="hljs-comment">/**</span><span class="hljs-comment">     * support for webview intercept connection cookie handling</span><span class="hljs-comment">     */</span>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">var</span> webview: WebView? = <span class="hljs-literal">null</span>    <span class="hljs-comment">/**</span><span class="hljs-comment">     * the android context for clearing cookies on non-webview instance</span><span class="hljs-comment">     */</span>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">var</span> context: Context? = <span class="hljs-literal">null</span>    <span class="hljs-comment">/**</span><span class="hljs-comment">     * for non-persistent cookies</span><span class="hljs-comment">     */</span>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">val</span> cookieStore = mutableMapOf&lt;HttpUrl, List&lt;Cookie&gt;&gt;()    <span class="hljs-comment">/**</span><span class="hljs-comment">     * construct android cookie manager without webview</span><span class="hljs-comment">     */</span>    <span class="hljs-keyword">constructor</span>(manager: android.webkit.CookieManager, ctx: Context? = <span class="hljs-literal">null</span>) &#123;        webkitCookieManager = manager        setupAndroidCookieManager()        <span class="hljs-keyword">this</span>.context = ctx    &#125;    <span class="hljs-comment">/**</span><span class="hljs-comment">     * construct android cookie manager with webview</span><span class="hljs-comment">     */</span>    <span class="hljs-keyword">constructor</span>(manager: android.webkit.CookieManager, webView: WebView, ctx: Context? = <span class="hljs-literal">null</span>) &#123;        webkitCookieManager = manager        setupAndroidCookieManager(webView)        <span class="hljs-keyword">this</span>.webview = webView        <span class="hljs-keyword">this</span>.context = ctx    &#125;    <span class="hljs-comment">/**</span><span class="hljs-comment">     * construct non-persistent cookie manager</span><span class="hljs-comment">     */</span>    <span class="hljs-keyword">constructor</span>(ctx: Context? = <span class="hljs-literal">null</span>) &#123;        <span class="hljs-keyword">this</span>.context = ctx    &#125;    <span class="hljs-comment">/**</span><span class="hljs-comment">     * construct java cookie manager</span><span class="hljs-comment">     */</span>    <span class="hljs-keyword">constructor</span>(manager: java.net.CookieManager, ctx: Context? = <span class="hljs-literal">null</span>) &#123;        manager.setCookiePolicy(CookiePolicy.ACCEPT_ALL)        javaCookieManager = manager        CookieHandler.setDefault(javaCookieManager)        <span class="hljs-keyword">this</span>.context = ctx    &#125;    <span class="hljs-comment">/**</span><span class="hljs-comment">     * make android webkit cookie manager accept third-party cookies</span><span class="hljs-comment">     */</span>    <span class="hljs-keyword">private</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">setupAndroidCookieManager</span><span class="hljs-params">(webView: <span class="hljs-type">WebView</span>? = <span class="hljs-literal">null</span>)</span></span> &#123;        webkitCookieManager?.setAcceptCookie(<span class="hljs-literal">true</span>);        <span class="hljs-keyword">if</span> (webView != <span class="hljs-literal">null</span>) webkitCookieManager?.setAcceptThirdPartyCookies(webView, <span class="hljs-literal">true</span>);    &#125;    <span class="hljs-comment">/**</span><span class="hljs-comment">     * save cookies after request finished</span><span class="hljs-comment">     */</span>    <span class="hljs-keyword">override</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">saveFromResponse</span><span class="hljs-params">(url: <span class="hljs-type">HttpUrl</span>, cookies: <span class="hljs-type">List</span>&lt;<span class="hljs-type">Cookie</span>&gt;)</span></span> &#123;        cookies.forEach &#123; cookie -&gt;            webkitCookieManager?.setCookie(url.toString(), cookie.toString())            javaCookieManager?.cookieStore?.add(url.toUri(), HttpCookie.parse(cookie.toString())[<span class="hljs-number">0</span>])        &#125;        cookieStore.put(url, cookies);    &#125;    <span class="hljs-comment">/**</span><span class="hljs-comment">     * load cookies before okhttp execute request &#123;<span class="hljs-doctag">@link</span> okhttp3.OkHttpClient#newCall(request)&#125;</span><span class="hljs-comment">     */</span>    <span class="hljs-keyword">override</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">loadForRequest</span><span class="hljs-params">(url: <span class="hljs-type">HttpUrl</span>)</span></span>: List&lt;Cookie&gt; &#123;        <span class="hljs-keyword">return</span> <span class="hljs-keyword">if</span> (webkitCookieManager != <span class="hljs-literal">null</span>) &#123;            <span class="hljs-comment">// get from android webkit cookie manager</span>            <span class="hljs-keyword">when</span> (<span class="hljs-keyword">val</span> cookies = webkitCookieManager?.getCookie(url.toString())) &#123;                <span class="hljs-literal">null</span> -&gt; emptyList()                <span class="hljs-keyword">else</span> -&gt; cookies.split(<span class="hljs-string">&quot;; &quot;</span>).mapNotNull &#123; Cookie.parse(url, it) &#125;            &#125;        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (javaCookieManager != <span class="hljs-literal">null</span>) &#123;            <span class="hljs-comment">// get from java cookie manager</span>            <span class="hljs-keyword">when</span> (<span class="hljs-keyword">val</span> cookies = javaCookieManager?.cookieStore?.cookies) &#123;                <span class="hljs-literal">null</span> -&gt; emptyList()                <span class="hljs-keyword">else</span> -&gt; cookies.toString().split(<span class="hljs-string">&quot;; &quot;</span>).mapNotNull &#123; Cookie.parse(url, it) &#125;            &#125;        &#125; <span class="hljs-keyword">else</span> &#123;            <span class="hljs-comment">// get from non-persisten cookie store</span>            <span class="hljs-keyword">val</span> cookies = cookieStore[url]            <span class="hljs-keyword">return</span> cookies ?: ArrayList()        &#125;    &#125;    <span class="hljs-comment">/**</span><span class="hljs-comment">     * clear all stored cookies everywhere</span><span class="hljs-comment">     */</span>    <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">clearCookies</span><span class="hljs-params">()</span></span> &#123;        <span class="hljs-comment">// remove non-persistent stored cookies</span>        cookieStore.clear()        <span class="hljs-comment">// initialize android webkit cookie manager on null</span>        <span class="hljs-keyword">if</span> (webkitCookieManager == <span class="hljs-literal">null</span>) &#123;            webkitCookieManager = android.webkit.CookieManager.getInstance()            setupAndroidCookieManager()        &#125;        <span class="hljs-comment">// indicator when webview not initialized</span>        <span class="hljs-keyword">var</span> standaloneWebview = <span class="hljs-literal">false</span>        <span class="hljs-comment">// initalize fake webview instance</span>        <span class="hljs-keyword">if</span> (webview == <span class="hljs-literal">null</span> &amp;&amp; context != <span class="hljs-literal">null</span>) &#123;            <span class="hljs-comment">// declare standalone webview</span>            webview = WebView(context!!)            <span class="hljs-comment">// treat as standalone webview</span>            standaloneWebview = <span class="hljs-literal">true</span>        &#125;        <span class="hljs-comment">// remove all stored cookies from android webkit cookie manager</span>        webkitCookieManager?.removeAllCookies(<span class="hljs-literal">null</span>)        webkitCookieManager?.flush()        webkitCookieManager?.removeSessionCookies(<span class="hljs-literal">null</span>);        <span class="hljs-comment">// clear all caches from webview</span>        webview?.clearCache(<span class="hljs-literal">true</span>)        webview?.clearHistory()        webview?.clearFormData();        webview?.clearSslPreferences();        <span class="hljs-keyword">if</span> (standaloneWebview) &#123;            <span class="hljs-comment">// destroy standalone webview</span>            webview?.destroy()            webview = <span class="hljs-literal">null</span>        &#125;        <span class="hljs-comment">// initialize java cookie manager</span>        <span class="hljs-keyword">if</span> (javaCookieManager == <span class="hljs-literal">null</span>) &#123;            javaCookieManager = java.net.CookieManager(<span class="hljs-literal">null</span>, CookiePolicy.ACCEPT_ALL)            java.net.CookieHandler.setDefault(javaCookieManager)        &#125;        <span class="hljs-comment">// remove all stored cookies from java cookie manager</span>        javaCookieManager?.cookieStore?.removeAll()    &#125;&#125;</code></pre><p>my usage within view binding webview + custom webviewclient intercept using okhttp</p><pre><code class="hljs kotlin"><span class="hljs-keyword">val</span> clientBuilder = OkHttpClient.Builder()clientBuilder.cookieJar(WebkitCookieManager(CookieManager.getInstance(), binding!!webview, applicationContext))</code></pre><p><a href="https://i.stack.imgur.com/1AcJt.png"><img src="https://i.stack.imgur.com/1AcJt.png" alt=""></a></p><p><a href="https://i.stack.imgur.com/EgV2P.png"><img src="https://i.stack.imgur.com/EgV2P.png" alt=""></a></p><p>this work and tested, when i clear cookies the value of cookies on website changed, otherwise all same until expiration date of cookie.</p>]]></content:encoded>
      
      
      <category domain="https://www.webmanajemen.com/categories/programming/">programming</category>
      
      
      <category domain="https://www.webmanajemen.com/tags/android/">android</category>
      
      <category domain="https://www.webmanajemen.com/tags/java/">java</category>
      
      <category domain="https://www.webmanajemen.com/tags/kotlin/">kotlin</category>
      
      
      <comments>https://www.webmanajemen.com/2024/03/okhttp-cookie-handling-on-android.html#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Turn git log history into markdown</title>
      <link>https://www.webmanajemen.com/2024/03/turn-git-log-history-to-markdown.html</link>
      <guid>https://www.webmanajemen.com/2024/03/turn-git-log-history-to-markdown.html</guid>
      <pubDate>Fri, 15 Mar 2024 12:18:05 GMT</pubDate>
      
      <description>Turn git log history into markdown /bin/bashecho writing github commit historygit log --pretty=format:adnh snb --date=format:Y-m-d H:M:S while IFS= read -r line; do trimmed_line=lineline[[:space:]] tr</description>
      
      
      
      <content:encoded><![CDATA[<pre><code class="hljs bash"><span class="hljs-meta">#!/bin/bash</span><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;writing github commit history&quot;</span>git <span class="hljs-built_in">log</span> --pretty=format:<span class="hljs-string">&quot;%ad%n%h %s%n%b&quot;</span> --<span class="hljs-built_in">date</span>=format:<span class="hljs-string">&quot;%Y-%m-%d %H:%M:%S&quot;</span> | <span class="hljs-keyword">while</span> IFS= <span class="hljs-built_in">read</span> -r line; <span class="hljs-keyword">do</span>  trimmed_line=<span class="hljs-string">&quot;<span class="hljs-variable">$&#123;line#&quot;<span class="hljs-variable">$&#123;line%%[![:space:]]*&#125;</span>&quot;&#125;</span>&quot;</span>  trimmed_line=<span class="hljs-string">&quot;<span class="hljs-variable">$&#123;trimmed_line%&quot;<span class="hljs-variable">$&#123;trimmed_line##*[![:space:]]&#125;</span>&quot;&#125;</span>&quot;</span>  <span class="hljs-keyword">if</span> [ -n <span class="hljs-string">&quot;<span class="hljs-variable">$trimmed_line</span>&quot;</span> ]; <span class="hljs-keyword">then</span>    <span class="hljs-keyword">if</span> [[ <span class="hljs-string">&quot;<span class="hljs-variable">$trimmed_line</span>&quot;</span> =~ ^[0-9]&#123;4&#125;-[0-9]&#123;2&#125;-[0-9]&#123;2&#125;\ [0-9]&#123;2&#125;:[0-9]&#123;2&#125;:[0-9]&#123;2&#125;$ ]]; <span class="hljs-keyword">then</span>      <span class="hljs-built_in">echo</span> -e <span class="hljs-string">&quot;**<span class="hljs-variable">$trimmed_line</span>**\n&quot;</span>    <span class="hljs-keyword">elif</span> [ <span class="hljs-string">&quot;<span class="hljs-variable">$first_line</span>&quot;</span> = <span class="hljs-literal">true</span> ]; <span class="hljs-keyword">then</span>      first_line=<span class="hljs-literal">false</span>    <span class="hljs-keyword">else</span>      <span class="hljs-built_in">echo</span> -e <span class="hljs-string">&quot;  <span class="hljs-variable">$trimmed_line</span>\n&quot;</span>    <span class="hljs-keyword">fi</span>  <span class="hljs-keyword">fi</span><span class="hljs-keyword">done</span> &gt; release-repo/changelog-commit.md<span class="hljs-comment"># Wait for 3 seconds</span><span class="hljs-built_in">sleep</span> 3</code></pre><p>the format markdown like</p><pre><code class="hljs markdown"><span class="hljs-strong">**2024-03-07 18:41:29**</span><span class="hljs-bullet">-</span> 39d989ee chore: round double value<span class="hljs-strong">**2024-03-07 18:38:32**</span><span class="hljs-bullet">-</span> 0586bd98 chore: improve performance</code></pre><p>above script also works with multiline commits, looks like below:</p><pre><code class="hljs log">**2024-03-07 18:37:53**- 064c3b79 chore: update preparation activity UI  improve performance stability</code></pre>]]></content:encoded>
      
      
      <category domain="https://www.webmanajemen.com/categories/programming/">programming</category>
      
      
      <category domain="https://www.webmanajemen.com/tags/github/">github</category>
      
      <category domain="https://www.webmanajemen.com/tags/bash/">bash</category>
      
      
      <comments>https://www.webmanajemen.com/2024/03/turn-git-log-history-to-markdown.html#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>enable automatic memory heap resizing of android studio</title>
      <link>https://www.webmanajemen.com/2024/03/android-studio-enable-automatic-memory-heap-resizing.html</link>
      <guid>https://www.webmanajemen.com/2024/03/android-studio-enable-automatic-memory-heap-resizing.html</guid>
      <pubDate>Sat, 02 Mar 2024 11:44:44 GMT</pubDate>
      
      <description>enable automatic memory heap resizing of android studio To limit Android Studios memory usage, you can modify the studio.vmoptions file. This file contains configuration settings for Android Studio, i</description>
      
      
      
      <content:encoded><![CDATA[<p>To limit Android Studio’s memory usage, you can modify the <code>studio.vmoptions</code> file. This file contains configuration settings for Android Studio, including memory-related settings. Follow these steps:</p><ol><li><p><strong>Locate the <code>studio.vmoptions</code> file:</strong></p><ul><li>On Windows, it is usually located in the <code>bin</code> directory of the Android Studio installation directory. For example, <code>C:\Program Files\Android\Android Studio\bin\studio64.exe.vmoptions</code>.</li><li>On macOS, it is often found in the <code>Contents/bin</code> directory within the application bundle. For example, <code>/Applications/Android Studio.app/Contents/bin/studio.vmoptions</code>.</li><li>On Linux, it is also typically in the <code>bin</code> directory of the installation. For example, <code>/opt/android-studio/bin/studio64.vmoptions</code>.</li></ul></li><li><p><strong>Open the <code>studio.vmoptions</code> file in a text editor:</strong> Use a text editor like Notepad (on Windows), TextEdit (on macOS), or any code editor of your choice.</p></li><li><p><strong>Modify the memory settings:</strong> Add or modify the following lines to set the maximum heap size (Xmx) and the initial heap size (Xms). Adjust the values according to your system’s available memory.</p></li></ol><pre><code class="hljs plaintext">-Xms256m-Xmx2048m</code></pre><p>Example values are used above (<code>-Xms256m</code> for the initial heap size and <code>-Xmx2048m</code> for the maximum heap size). You can increase or decrease these values based on your system’s configuration.</p><ol start="2"><li><strong>Save the changes and restart Android Studio:</strong> Save the modifications to the <code>studio.vmoptions</code> file and restart Android Studio for the changes to take effect.</li></ol><p>Keep in mind that setting the maximum heap size too high might cause issues if your system doesn’t have enough available memory. Adjust the values based on your system’s specifications to achieve optimal performance.</p><h2 id="Enable-automatic-memory-heap-resizing">Enable automatic memory heap resizing</h2><p>To add garbage collection options and parallelism while limiting the maximum heap size to 1GB in Android Studio, you can modify the <code>studio.vmoptions</code> file. Here’s an example configuration:</p><p>java</p><pre><code class="hljs plaintext"># custom Android Studio VM options# Set the maximum heap size to 1GB-Xmx1g# Set the initial heap size-Xms256m# Enable parallel garbage collection-XX:+UseParallelGC# Enable concurrent garbage collection (for parallel)-XX:+UseConcMarkSweepGC# Set the size of the young generation (you may adjust this based on your needs)-XX:NewSize=512m-XX:MaxNewSize=512m# Enable automatic heap resizing-XX:+UseAdaptiveSizePolicy</code></pre><p>In this configuration:</p><ul><li><code>-XX:+UseParallelGC</code> enables the parallel garbage collector.</li><li><code>-XX:+UseConcMarkSweepGC</code> enables concurrent garbage collection, which works in conjunction with parallel garbage collection.</li><li><code>-XX:NewSize</code> and <code>-XX:MaxNewSize</code> set the size of the young generation, which is part of the heap where new objects are created. Adjust these values based on your requirements.</li><li><code>-XX:+UseAdaptiveSizePolicy</code> enables automatic heap resizing based on the application’s behavior.</li></ul><p>Feel free to adjust these settings based on your system’s specifications and the specific needs of your Android Studio projects. Keep in mind that tuning garbage collection settings can be a trial-and-error process, so monitor the performance and adjust as needed. Save the changes, restart Android Studio, and observe the impact on performance.</p>]]></content:encoded>
      
      
      <category domain="https://www.webmanajemen.com/categories/programming/">programming</category>
      
      
      <category domain="https://www.webmanajemen.com/tags/java/">java</category>
      
      
      <comments>https://www.webmanajemen.com/2024/03/android-studio-enable-automatic-memory-heap-resizing.html#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>is defining screen density on gradle.build can reduce build time ?</title>
      <link>https://www.webmanajemen.com/2024/02/is-defining-screen-density-on-gradlebuild-can-reduce-build-time.html</link>
      <guid>https://www.webmanajemen.com/2024/02/is-defining-screen-density-on-gradlebuild-can-reduce-build-time.html</guid>
      <pubDate>Wed, 28 Feb 2024 06:27:35 GMT</pubDate>
      
      <description>is defining screen density on gradle.build can reduce build time ? Setting screen density in an Android projects build.gradle file usually has no direct impact on build time. Screen density refers to </description>
      
      
      
      <content:encoded><![CDATA[<p>Setting screen density in  an Android project’s “build.gradle” file usually has no direct impact on build time.</p><p>Screen density refers to the resources used in your Android app and  affects how your app runs on different devices with different screen densities.</p><p>This is not configured at build time.</p><p>To clarify, when you set screen density in the ‘build.gradle’ file, you typically specify different versions of the drawable resource for different screen densities.</p><p>For example:</p><p>gradle</p><pre><code class="language-gradle">android &#123;    // ...    splits &#123;        density &#123;            enable true            exclude &quot;ldpi&quot;, &quot;xxxhdpi&quot;            compatibleScreens 'small', 'normal', 'large', 'xlarge'        &#125;    &#125;&#125;</code></pre><p>This configuration is more about generating APKs with different drawables for different screen densities and is not directly related to  build times.</p><p>To improve  your Android project build time, you may want to consider other strategies such as:</p><ol><li><p><strong>Caching:</strong> Utilize Gradle’s built-in caching mechanisms to avoid redundant work in subsequent builds.</p></li><li><p><strong>Parallel Builds:</strong> Configure Gradle to perform parallel builds, allowing it to build multiple modules concurrently.</p></li><li><p><strong>Incremental Builds:</strong> Enable incremental builds to only rebuild the parts of the project that have changed.</p></li><li><p><strong>Dependency Analysis:</strong> Use tools like the Gradle build scans or build dashboard to analyze dependencies and understand which dependencies are impacting build times.</p></li><li><p><strong>Profile Your Build:</strong> Use tools like the Gradle profiler or Android Studio’s built-in profiler to identify bottlenecks in your build process.</p></li></ol><p>Remember that screen density configurations are important for the runtime behavior of your app on different devices, but they aren’t the primary factor influencing build times.</p>]]></content:encoded>
      
      
      <category domain="https://www.webmanajemen.com/categories/programming/">programming</category>
      
      
      <category domain="https://www.webmanajemen.com/tags/android/">android</category>
      
      <category domain="https://www.webmanajemen.com/tags/java/">java</category>
      
      <category domain="https://www.webmanajemen.com/tags/gradle/">gradle</category>
      
      <category domain="https://www.webmanajemen.com/tags/kotlin/">kotlin</category>
      
      <category domain="https://www.webmanajemen.com/tags/groovy/">groovy</category>
      
      
      <comments>https://www.webmanajemen.com/2024/02/is-defining-screen-density-on-gradlebuild-can-reduce-build-time.html#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>setup vmoption intellij idea for 8GB RAM processor intel i3</title>
      <link>https://www.webmanajemen.com/2024/02/setup-vmoption-intellij-idea-for-8gb-ram-processor-intel-i3.html</link>
      <guid>https://www.webmanajemen.com/2024/02/setup-vmoption-intellij-idea-for-8gb-ram-processor-intel-i3.html</guid>
      <pubDate>Tue, 27 Feb 2024 07:39:32 GMT</pubDate>
      
      <description>Here are some suggestions for setting up VM options in IntelliJ IDEA with an 8GB RAM machine and an Intel i3 processor</description>
      
      
      
      <content:encoded><![CDATA[<p>When configuring IntelliJ IDEA’s VM options, we recommend that you  consider the available memory on your computer, in this case 8GB of RAM.<br>With this in mind, you need to configure your Java Virtual Machine (JVM) settings so that IntelliJ IDEA runs properly within the available resources.</p><p>Here are some suggestions for setting  VM options in IntelliJ IDEA with an 8GB RAM machine and an Intel i3 processor:</p><ol><li><p>Heap Memory (Xmx and Xms):</p><ul><li>Set the maximum heap size (<code>-Xmx</code>) to a value that is suitable for your system. With 8GB of RAM, you could allocate a significant portion, but not all, of the memory to IntelliJ. For example, you might use <code>-Xmx4g</code> to allocate 4GB of memory. Adjust this value based on your preferences and the other applications you might be running.</li><li>Set the initial heap size (<code>-Xms</code>) to a reasonable value, perhaps half of the maximum heap size. For example, <code>-Xms2g</code> for 2GB.</li></ul><p>Example:</p></li></ol><pre><code class="hljs bash">-Xms2g -Xmx4g</code></pre><ol start="2"><li><p>Permsize and Metaspace:</p><ul><li>If you are using a Java version before Java 8, consider specifying PermGen size. However, for Java 8 and later, this is replaced by Metaspace. Adjust the Metaspace size based on your needs.</li></ul><p>Example:</p></li></ol><pre><code class="hljs bash">-XX:MaxMetaspaceSize=512m</code></pre><ol start="3"><li><p>Garbage Collection:</p><ul><li>You can use JVM options to configure garbage collection algorithms based on your application’s characteristics. However, for day-to-day development, the default settings are usually sufficient.</li></ul></li><li><p>Additional Configuration:</p><ul><li>Depending on your specific requirements and the plugins you use, you might need additional configurations. For example, if you work with Android projects, you might need to allocate additional memory for Gradle builds.</li></ul><p>Example:</p></li></ol><pre><code class="hljs bash">-XX:MaxPermSize=512m -XX:+UseConcMarkSweepGC</code></pre><p>To set these options in IntelliJ IDEA:</p><ol><li>Open IntelliJ IDEA.</li><li>Navigate to “Help” &gt; “Edit Custom VM Options…”</li><li>Add or modify the VM options according to your preferences.</li></ol><p>Keep in mind to screen your system’s execution whereas utilizing <strong>IntelliJ Idea</strong>, particularly in the event that you run other memory-intensive applications at the same time. Alter the JVM alternatives based on your real needs and accessible assets.</p><p>Here my <strong>optimal setup for low-end device</strong>:</p><pre><code class="hljs text">-Xms128m-Xmx1024m-XX:ReservedCodeCacheSize=100m-XX:+IgnoreUnrecognizedVMOptions-XX:MaxPermSize=512m-XX:+UseConcMarkSweepGC-XX:+UseCodeCacheFlushing-XX:+UseCompressedOops--add-opens=java.base/jdk.internal.org.objectweb.asm=ALL-UNNAMED--add-opens=java.base/jdk.internal.org.objectweb.asm.tree=ALL-UNNAMED-javaagent:D:\ja-netfilter-all\ja-netfilter.jar=jetbrains</code></pre><ul><li><p><code>-Xmx</code>: Sets the maximum heap size, specifying the maximum amount of memory that the Java Virtual Machine (JVM) can use for the heap. For example, <code>-Xmx2000m</code> sets the maximum heap size to 2000 megabytes.</p></li><li><p><code>-Xms</code>: Sets the initial heap size, defining the amount of memory reserved for the heap when the JVM starts. For example, <code>-Xms300m</code> sets the initial heap size to 300 megabytes.</p></li><li><p><code>-XX:MaxMetaspaceSize</code>: Sets the maximum size of the Metaspace, which is the memory area used for class metadata in Java 8 and later versions. For example, <code>-XX:MaxMetaspaceSize=256m</code> sets the maximum Metaspace size to 256 megabytes.</p></li></ul>]]></content:encoded>
      
      
      <category domain="https://www.webmanajemen.com/categories/programming/">programming</category>
      
      
      <category domain="https://www.webmanajemen.com/tags/tips-tricks/">tips &amp; tricks</category>
      
      <category domain="https://www.webmanajemen.com/tags/java/">java</category>
      
      <category domain="https://www.webmanajemen.com/tags/kotlin/">kotlin</category>
      
      
      <comments>https://www.webmanajemen.com/2024/02/setup-vmoption-intellij-idea-for-8gb-ram-processor-intel-i3.html#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>How to use kotlin-bom?</title>
      <link>https://www.webmanajemen.com/2024/02/how-to-use-kotlin-bom.html</link>
      <guid>https://www.webmanajemen.com/2024/02/how-to-use-kotlin-bom.html</guid>
      <pubDate>Sun, 25 Feb 2024 10:00:00 GMT</pubDate>
      
      <description>To use the Kotlin BOM, you typically follow these steps</description>
      
      
      
      <content:encoded><![CDATA[<p>In <strong>Kotlin</strong>, a bill of materials is a more centralized way to manage dependencies. This allows you to specify a set of dependencies and their versions in one place, making it easier to manage and update dependencies across your projects.</p><p>To use <strong>Kotlin BOM</strong>, you typically follow these steps:</p><h2 id="Add-the-BOM-Dependency-to-Your-Build-File">Add the BOM Dependency to Your Build File:</h2><p>You need to add the BOM dependency to your build file. If you’re using Gradle, you can add it like this:</p><pre><code class="hljs gradle">implementation platform(<span class="hljs-string">&quot;org.jetbrains.kotlin:kotlin-bom:1.5.31&quot;</span>)</code></pre><p>Make sure to replace <code>1.5.31</code> with the <strong>kotlin version</strong> you want to use.</p><h2 id="Use-the-BOM-Dependency-in-Your-Dependencies-Section">Use the BOM Dependency in Your Dependencies Section:</h2><p>After adding the BOM dependency, you can declare dependencies without specifying their versions. The BOM will manage the versions for you. For example:</p><pre><code class="hljs gradle">implementation <span class="hljs-string">&quot;org.jetbrains.kotlin:kotlin-stdlib&quot;</span>implementation <span class="hljs-string">&quot;org.jetbrains.kotlin:kotlin-reflect&quot;</span></code></pre><p>You don’t need to specify the version for <code>kotlin-stdlib</code> and <code>kotlin-reflect</code> as it will be inherited from the BOM.</p><h2 id="Sync-Your-Project">Sync Your Project:</h2><p>After making changes to your build file, sync your project with your build tool (e.g., run <code>./gradlew</code> or click “Sync Project with Gradle Files” in Android Studio).</p><p>Here’s an example of how your build.gradle (Kotlin DSL) file might look like:</p><pre><code class="hljs gradle">plugins &#123;    kotlin(<span class="hljs-string">&quot;jvm&quot;</span>) version <span class="hljs-string">&quot;1.5.31&quot;</span>&#125;<span class="hljs-keyword">repositories</span> &#123;    mavenCentral()&#125;<span class="hljs-keyword">dependencies</span> &#123;    implementation platform(<span class="hljs-string">&quot;org.jetbrains.kotlin:kotlin-bom:1.5.31&quot;</span>)    implementation <span class="hljs-string">&quot;org.jetbrains.kotlin:kotlin-stdlib&quot;</span>    implementation <span class="hljs-string">&quot;org.jetbrains.kotlin:kotlin-reflect&quot;</span>&#125;</code></pre><p>This way, you only need to update the version of the Kotlin BOM in one place, and it will automatically update the versions of all Kotlin dependencies in your project.</p><p>Keep in mind that the syntax might vary slightly depending on your build tool (Gradle, Maven, etc.) and the Kotlin plugin version you are using. Always refer to the official documentation for the most accurate and up-to-date information.</p><h2 id="Force-kotlin-using-same-version">Force kotlin using same version</h2><p>Gradle’s <strong>ResolutionStrategy</strong> allows you to force all subprojects to use the same Kotlin version.<br>The following is an example of using the <strong>ResolutionStrategy</strong> block in the root project’s. Here the implementation of both <code>build.gradle.kts</code> and <code>build.gradle</code> file:</p><p><strong>Ensure you set the right kotlin version</strong>.</p><p>For example i will set the kotlin version in variable</p><h4 id="build-gradle-file"><code>build.gradle</code> file:</h4><pre><code class="hljs gradle">ext &#123;    kotlin_version = <span class="hljs-string">&#x27;1.5.31&#x27;</span>&#125;</code></pre><pre><code class="hljs groovy"><span class="hljs-comment">// force kotlin same version</span>configurations.configureEach &#123;    resolutionStrategy.eachDependency &#123; details -&gt;        <span class="hljs-keyword">if</span> (requested.group == <span class="hljs-string">&quot;org.jetbrains.kotlin&quot;</span>) &#123;            useVersion <span class="hljs-string">&quot;$kotlin_version&quot;</span>            because <span class="hljs-string">&quot;To avoid different kotlin version&quot;</span>        &#125;    &#125;&#125;</code></pre><h4 id="build-gradle-kts-file"><code>build.gradle.kts</code> file:</h4><pre><code class="hljs kotlin">ext &#123;    <span class="hljs-keyword">val</span> kotlinVersion = <span class="hljs-string">&quot;1.5.31&quot;</span>&#125;</code></pre><pre><code class="hljs kotlin">configure&lt;DependencyResolutionManagement&gt; &#123;    resolutionStrategy &#123;        eachDependency &#123; details -&gt;            <span class="hljs-keyword">if</span> (details.requested.group == <span class="hljs-string">&quot;org.jetbrains.kotlin&quot;</span>) &#123;                details.useVersion(<span class="hljs-string">&quot;<span class="hljs-variable">$kotlin_version</span>&quot;</span>)            &#125;        &#125;    &#125;&#125;</code></pre>]]></content:encoded>
      
      
      <category domain="https://www.webmanajemen.com/categories/uncategorized/">uncategorized</category>
      
      
      
      <comments>https://www.webmanajemen.com/2024/02/how-to-use-kotlin-bom.html#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Hexo Cannot GET /</title>
      <link>https://www.webmanajemen.com/2024/02/hexo-cannot-get.html</link>
      <guid>https://www.webmanajemen.com/2024/02/hexo-cannot-get.html</guid>
      <pubDate>Sat, 24 Feb 2024 07:58:30 GMT</pubDate>
      
      <description>How to fix Hexo Cannot GET /</description>
      
      
      
      <content:encoded><![CDATA[<h2 id="Check-config-yaml">Check config yaml</h2><p>check your <code>_config.yml</code></p><pre><code class="hljs yaml"><span class="hljs-attr">url:</span> <span class="hljs-string">https://www.webmanajemen.com/</span><span class="hljs-attr">root:</span> <span class="hljs-string">/</span><span class="hljs-comment"># Home page setting</span><span class="hljs-comment"># path: Root path for your blogs index page. (default = &#x27;&#x27;)</span><span class="hljs-comment"># per_page: Posts displayed per page. (0 = disable pagination)</span><span class="hljs-comment"># order_by: Posts order. (Order by date descending by default)</span><span class="hljs-attr">index_generator:</span>  <span class="hljs-attr">path:</span> <span class="hljs-string">&#x27;/&#x27;</span>  <span class="hljs-attr">per_page:</span> <span class="hljs-number">10</span>  <span class="hljs-attr">order_by:</span> <span class="hljs-string">-updated</span> <span class="hljs-comment"># updated | date | -date | -updated</span>  <span class="hljs-attr">pagination_dir:</span> <span class="hljs-string">page</span></code></pre><h2 id="Check-the-URL-and-Paths">Check the URL and Paths:</h2><p>Ensure that you are accessing the correct URL.<br>Hexo may be configured to generate content under different paths.<br>For example, if your site is located in a subdirectory, you might need to access <code>http://localhost:4000/subdirectory/</code></p><h2 id="Reinstall-Dependencies">Reinstall Dependencies:</h2><p>Sometimes, issues can arise from corrupted dependencies.<br>You can try deleting the node_modules directory and reinstalling dependencies:</p><pre><code class="hljs bash"><span class="hljs-built_in">rm</span> -rf node_modulesnpm install</code></pre>]]></content:encoded>
      
      
      <category domain="https://www.webmanajemen.com/categories/programming/">programming</category>
      
      
      <category domain="https://www.webmanajemen.com/tags/typescript/">typescript</category>
      
      <category domain="https://www.webmanajemen.com/tags/javascript/">javascript</category>
      
      
      <comments>https://www.webmanajemen.com/2024/02/hexo-cannot-get.html#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Detect NodeJS if called using import or directly</title>
      <link>https://www.webmanajemen.com/2024/02/detect-if-called-via-request-or-directly-by-command-line.html</link>
      <guid>https://www.webmanajemen.com/2024/02/detect-if-called-via-request-or-directly-by-command-line.html</guid>
      <pubDate>Fri, 23 Feb 2024 04:16:51 GMT</pubDate>
      
      <description>How can I detect if my NodeJS file is called using node file path node path-to-file or requirepath-to-file or import path-to-file ?</description>
      
      
      
      <content:encoded><![CDATA[<h2 id="CommonJS">CommonJS</h2><p>CommonJS modules can use the <code>require.main</code> object to determine whether the module is  executed directly or  imported. The <code>require.main</code> object is the main module that started your Node.js application.</p><pre><code class="hljs js"><span class="hljs-comment">// CommonJS</span><span class="hljs-comment">// main.js</span><span class="hljs-keyword">if</span> (<span class="hljs-built_in">require</span>.<span class="hljs-property">main</span> === <span class="hljs-variable language_">module</span>) &#123;  <span class="hljs-comment">// This script is being run directly</span>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;This script is the main module.&#x27;</span>);&#125; <span class="hljs-keyword">else</span> &#123;  <span class="hljs-comment">// This script is being imported as a module</span>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;This script is being imported as a module.&#x27;</span>);&#125;</code></pre><p>In this example, if you run <code>main.js</code> directly using the <code>main.js</code> node, you will see the output <strong>This script is the main module.</strong> When I import <code>main.js</code> into another script or module using <code>require('./main')</code> I get the output <strong>This script will be imported as a module</strong>.</p><p>Note that this approach works with Node.js versions that support ES Module (ESM) syntax.</p><p>If you are using <code>CommonJS</code> syntax, you may want to use the <code>require.main === module</code> check.</p><h2 id="ESM">ESM</h2><p>In the ECMAScript Module (ESM), you can use the “import.meta” object  to determine whether a module is  executed directly or  imported. In particular, you can check the <code>import.meta.url</code> property.</p><pre><code class="hljs ts"><span class="hljs-comment">// main.mjs</span><span class="hljs-keyword">if</span> (<span class="hljs-keyword">import</span>.<span class="hljs-property">meta</span>.<span class="hljs-property">url</span> === <span class="hljs-string">`file://<span class="hljs-subst">$&#123;process.argv[<span class="hljs-number">1</span>]&#125;</span>`</span>) &#123;  <span class="hljs-comment">// This module is being run directly</span>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;This module is the main module.&#x27;</span>);&#125; <span class="hljs-keyword">else</span> &#123;  <span class="hljs-comment">// This module is being imported as a module</span>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;This module is being imported as a module.&#x27;</span>);&#125;</code></pre><p>or you can using module <a href="http://npmjs.com/es-main">es-main</a>:</p><pre><code class="hljs ts"><span class="hljs-comment">// ESM</span><span class="hljs-keyword">import</span> esMain <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;es-main&#x27;</span>;<span class="hljs-keyword">if</span> (<span class="hljs-title function_">esMain</span>(<span class="hljs-keyword">import</span>.<span class="hljs-property">meta</span>)) &#123;    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;called directly&#x27;</span>);&#125; <span class="hljs-keyword">else</span> &#123;    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;required as a module&#x27;</span>);&#125;</code></pre><p>In this example, if you run <code>main.mjs</code> directly using the <code>main.mjs</code> node, you will see the output: &quot;This module is the main module.<br>&quot; If you import <code>main.mjs</code> into another ESM module using <code>import './main.mjs';</code>, you will see the output <strong>This module will be imported as a module.</strong> Note  the ESM file extension.</p><p>Modules are usually <code>.mjs</code>. If you want to use CommonJS syntax, you can use the approach described in the previous answer <code>(&quot;require.main === module&quot;)</code>.</p>]]></content:encoded>
      
      
      <category domain="https://www.webmanajemen.com/categories/programming/">programming</category>
      
      
      <category domain="https://www.webmanajemen.com/tags/typescript/">typescript</category>
      
      <category domain="https://www.webmanajemen.com/tags/javascript/">javascript</category>
      
      
      <comments>https://www.webmanajemen.com/2024/02/detect-if-called-via-request-or-directly-by-command-line.html#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>How to disable WebRTC in Chrome, Firefox, Safari, Opera  Edge</title>
      <link>https://www.webmanajemen.com/2024/02/how-to-disable-webrtc-in-chrome-firefox-safari-opera-edge.html</link>
      <guid>https://www.webmanajemen.com/2024/02/how-to-disable-webrtc-in-chrome-firefox-safari-opera-edge.html</guid>
      <pubDate>Thu, 22 Feb 2024 08:56:24 GMT</pubDate>
      
      <description>How to disable WebRTC in Chrome, Firefox, Safari, Opera Edge NFO: WebRTC is often talked about on VPN Websites. WebRTC is a Technology that allows your Browser to have Video and Voice Communication Ab</description>
      
      
      
      <content:encoded><![CDATA[<p align="center"><img src="https://github.com/K3V1991/How-to-disable-WebRTC-in-Chrome-Firefox-Safari-Opera-and-Edge/blob/main/Disable-WebRTC.png" width="200"></a><br /><p align="center"><a href="https://liberapay.com/K3V1991" alt="LiberaPay"><img src="https://img.shields.io/badge/Liberapay-F6C915?style=for-the-badge&logo=liberapay&logoColor=black" /></a><a href="https://ko-fi.com/k3v1991" alt="Ko-fi"><img src="https://img.shields.io/badge/Ko--fi-F16061?style=for-the-badge&logo=ko-fi&logoColor=white" /></a><a href="https://www.paypal.com/cgi-bin/webscr?cmd=_s-xclick&hosted_button_id=HW8B98TVDLKWA" alt="PayPal"><img src="https://img.shields.io/badge/PayPal-00457C?style=for-the-badge&logo=paypal&logoColor=white" /></a><a href="https://github.com/K3V1991/Donate-Crypto/blob/main/README.md" alt="Crypto"><img src="https://img.shields.io/badge/Bitcoin-000?style=for-the-badge&logo=bitcoin&logoColor=white" /></a></p><hr /><br /><h2 id="NFO">NFO:</h2><blockquote><p>WebRTC is often talked about on VPN Websites. <br /><br>WebRTC is a Technology that allows your Browser to have Video and Voice Communication Abilities. <br /><br>When you use Google Meet to hold a Video Conference, you’re using WebRTC. <br /><br>The same is with the Facebook Messenger Video Call. <br /><br>There are other Applications that make use of WebRTC. For Example, if you’re on Discord. <br /><br>It enables live Communications in real Time.<br><br /></p></blockquote><h2 id="What-is-WebRTC-Leak">What is WebRTC Leak?</h2><blockquote><p>WebRTC works by sending Audio/Video Feeds between two Entities. <br /><br>This means your Browser will share some of your Information with the Website, which will include your IP Address. <br /><br>And these Channels can bypass the encrypted Tunnel you have Setup. <br /><br>So basically, a WebRTC Leak can reveal your real IP Address even if you are using a VPN.<br><br /></p></blockquote><h2 id="How-to-know-about-a-WebRTC-Leak">How to know about a WebRTC Leak?</h2><blockquote><p>To see if your IP is leaked go to <a href="https://ipleak.net/">IPLEAK.NET</a>. <br /><br>If you see your real IP on the Website, your IP is being leaked. <br /><br>If you can see the IP Address of the VPN Server, you’re safe and your browsing is secure.<br><br /></p></blockquote><h2 id="WebRTC-Leaks-can-be-blocked">WebRTC Leaks can be blocked</h2><blockquote><p>One Way is by getting a VPN that doesn’t allow these Leaks. <br /><br>Another Option is to block the WebRTC Requests directly from the Browser. <br /><br>You can also use browser Extensions if you cannot disable WebRTC.<br><br /></p></blockquote><h2 id="Note">Note:</h2><blockquote><p>Keep in Mind that if you disable WebRTC, you won’t be able to enjoy the Functionalities that come with it.<br><br /><br><br /></p></blockquote><h2 id="Disabling-WebRTC-in-Chrome">Disabling WebRTC in Chrome:</h2><blockquote><p>You cannot disable WebRTC in Chrome. The only thing you can do is use Add-ons. A good Chrome Add-on is <a href="https://chrome.google.com/webstore/detail/webrtc-leak-prevent/eiadekoaikejlgdbkbdfeijglgfdalml?hl=en">WebRTC Leak Prevent</a>. <br /><br>It controls the hidden WebRTC Settings and protects you against the Leaks.</p></blockquote><h2 id="Disabling-WebRTC-in-Chrome-Mobile">Disabling WebRTC in Chrome Mobile</h2><ol><li>Type this URL: <code>chrome://flags/#disable-webrtc</code> in your Android Chrome Address Bar. It will open a Settings Page</li><li>Scroll down and you’ll find WebRTC STUN Origin Header. You can disable it here</li><li>You can even disable WebRTC Hardware Video Encoding and decoding Options if you want<br><br /></li></ol><h2 id="Disabling-WebRTC-in-Mozilla-Firefox">Disabling WebRTC in Mozilla Firefox:</h2><ol><li>Go to the URL Bar, type <code>about:config</code> and press Enter</li><li>Firefox will display a Warning Message. Click on <code>Accept the Risk and Continue</code></li><li>It will take you to another Page. In the Search Bar, type: <code>media.peerconnection.enabled</code></li><li>Double click on the Row and change its Value to “false”. Now WebRTC will be disabled.<br><br /></li></ol><h2 id="Disabling-WebRTC-on-Safari-Browser">Disabling WebRTC on Safari Browser:</h2><ol><li>On Safari, visit <code>Preferences</code></li><li>Check <code>Show Develop menu in menu bar</code></li><li>In the Develop Section, go to <code>Experimental Features</code></li><li>Click on <code>Remove Legacy WebRTC API</code><br><br /></li></ol><h2 id="Disabling-WebRTC-in-Opera">Disabling WebRTC in Opera:</h2><blockquote><p>Opera doesn’t have a Way to disable WebRTC. You can use third-party Addons like <code>WebRTC Leak Prevent</code> just like you did with Chrome. <br /><br>Keep in mind that these Extensions do not fix the Leak. Instead, they block the Attempts the Websites make to collect IP Addresses.<br><br /></p></blockquote><h2 id="Disabling-WebRTC-on-Microsoft-Edge">Disabling WebRTC on Microsoft Edge:</h2><ol><li>Open Edge and type: <code>about:flags</code> in the Address Bar &amp; press Enter</li><li>You’ll see WebRTC here. Under that, there’s an Option to hide your real IP Address. Check the Box: <code>Hide my local IP address over WebRTC connections</code> to activate.<br><br /></li></ol><h2 id="How-to-stay-secure">How to stay secure:</h2><blockquote><p>Make sure you use a VPN. The VPN should be able to bypass the WebRTC Leak. <br /><br>With a VPN, you can use a Secure Browsers like LibreWolf that does not keep any of your Details.</p></blockquote>]]></content:encoded>
      
      
      <category domain="https://www.webmanajemen.com/categories/programming/">programming</category>
      
      
      <category domain="https://www.webmanajemen.com/tags/software/">software</category>
      
      
      <comments>https://www.webmanajemen.com/2024/02/how-to-disable-webrtc-in-chrome-firefox-safari-opera-edge.html#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>How to exclude anoying tags in intellij idea or android studio</title>
      <link>https://www.webmanajemen.com/2024/02/how-to-exclude-anoying-tags-from-logcat-intellij-android-studio.html</link>
      <guid>https://www.webmanajemen.com/2024/02/how-to-exclude-anoying-tags-from-logcat-intellij-android-studio.html</guid>
      <pubDate>Thu, 22 Feb 2024 00:12:51 GMT</pubDate>
      
      <description>In IntelliJ IDEA and Android Studio, you can exclude specific log tags in the Logcat view</description>
      
      
      
      <content:encoded><![CDATA[<p><img src="https://github.com/dimaslanjaka/source-posts/assets/12471057/5241507b-bdf2-48b4-8712-5d1dc0761690" alt=""></p><p>In IntelliJ IDEA and Android Studio, you can exclude specific log tags in the Logcat view. Here’s how you can do it:</p><ul><li>Open Android Studio or Intellij IDEA.</li><li>Go to Tools &gt; Android &gt; Logcat.</li><li>In Logcat, seek for options related to “Ignore Tags” or “Ignored Log Tags”.</li><li>Add a list of tags that you want to ignore, by separating it using spaces or commas.</li></ul><pre><code class="hljs text">HardwareCodecCapability AudioCapabilities OpenGLRenderer ViewRoot ForceDarkHelper Looper PlayCore AudioTrack SurfaceUtils cr_ChildProcessConn FA ActivityThread DynamiteModule Perf DynamitePackage EgretLoader cr_LibraryLoader BpBinder chatty FeatureParser MediaCodec ExtendedACodec MapperHal OMXClient VideoCapabilities Gralloc3 MetadataUtil AdrenoGLES chromium DpmTcmClient WebViewFactory cr_CachingUmaRecorder AdrenoUtils cr_media AudioManager cr_SpareChildConn Chrome_InProcGp Choreographer AdInternalSettings Keep-Alive Vary pool-15-thread- WifiMulticast WifiHW MtpService PushClient EGL_emulation OpenGl* InputReader art dalvik Environment DataRouter AlarmManager WindowManager PhoneStatusBar ActivityManager ResourceType PackageManager gralloc Gnss NetRec ResolverController GAv4 AsyncOperation AppOps WificondControl aofp wifi netmgr ctxmgr BestClock FirebaseInstanceId android.os.Debug memtrack netd system_server StrictMode bluetooth NetworkMonitor BroadcastQueue ConnextivityService WakeLock HttpClientWrapper RAWR Tenor BgTask WifiService BluetoothAdapter UpdateStatsService AppIdleHistory Connectivity VelvetNetworkClient WorkerManager ActivityTaskManager UsageStatsService ocess.gservice DropBoxManagerService EventLogChimeraService PContextMetricsRunner MemoryController MultiDex AutofillManager libMEOW</code></pre><h2 id="Setting-result-looks-like-below-screenshoot">Setting result looks like below screenshoot</h2><p><img src="https://github.com/dimaslanjaka/source-posts/assets/12471057/1061e3cb-b57f-44de-96b8-78aab3cebeba" alt=""></p><h2 id="Additional-for-GeckoView">Additional for GeckoView</h2><p>Put below pattern to logcat filter column</p><pre><code class="hljs text">-tag~:GeckoConsole|SurfaceComposerClient|BufferQueueConsumer|GeckoSession|GeckoThread|Web\sContent|GeckoEventDispatcher|BLASTBufferQueue|GeckoNetworkManager|linker</code></pre><p><img src="https://github.com/dimaslanjaka/source-posts/assets/12471057/78a27118-5eae-43e1-abba-0a6a3ad81270" alt=""></p><h2 id="Conclusion">Conclusion</h2><p>Done, now all common anoying tags should not be displayed on logcat logs. Looks like below screenshot, no more annoying tags shown :)</p><p><img src="https://github.com/dimaslanjaka/source-posts/assets/12471057/6a72637d-6ee7-410d-bed5-a6d666663201" alt=""></p>]]></content:encoded>
      
      
      <category domain="https://www.webmanajemen.com/categories/uncategorized/">uncategorized</category>
      
      
      
      <comments>https://www.webmanajemen.com/2024/02/how-to-exclude-anoying-tags-from-logcat-intellij-android-studio.html#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Fix The inferred type of X cannot be named without a reference</title>
      <link>https://www.webmanajemen.com/2024/02/the-inferred-type-of-x-cannot-be-named-without-a-reference-to.html</link>
      <guid>https://www.webmanajemen.com/2024/02/the-inferred-type-of-x-cannot-be-named-without-a-reference-to.html</guid>
      <pubDate>Fri, 16 Feb 2024 20:03:26 GMT</pubDate>
      
      <description>How to fix The inferred type of X cannot be named without a reference to path. This is likely not portable. A type annotation is necessary.</description>
      
      
      
      <content:encoded><![CDATA[<p>If you’re experiencing a TypeScript mistake related to module determination or sort induction.<br><em>The blunder message recommends that the sort of ‘X’ cannot be named without a reference to ‘path/from/node_modules’, and it may not be convenient.</em></p><p>To resolve this issue, you’ll have to be give a type annotation for ‘X’ or adjust your module determination settings.<br>Here are a few of methods you’ll be able take:</p><h2 id="Sample-problem">Sample problem</h2><p>For example I will resolve these error</p><pre><code class="hljs log">The inferred type of &#x27;loadSavedCredentialsIfExist&#x27; cannot be named without a reference to &#x27;googleapis-common/node_modules/google-auth-library/build/src/auth/googleauth&#x27;. This is likely not portable. A type annotation is necessary.ts(2742)</code></pre><p><img src="https://github.com/dimaslanjaka/source-posts/assets/12471057/01783fa3-de3d-4b37-9ed1-c51238b10164" alt=""></p><p>with the problem codes is</p><pre><code class="hljs typescript"><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">Auth</span>, google &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;googleapis&#x27;</span>;<span class="hljs-comment">/**</span><span class="hljs-comment"> * Reads previously authorized credentials from the save file.</span><span class="hljs-comment"> *</span><span class="hljs-comment"> * <span class="hljs-doctag">@return</span></span><span class="hljs-comment"> */</span><span class="hljs-keyword">export</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">loadSavedCredentialsIfExist</span>(<span class="hljs-params"></span>) &#123;  <span class="hljs-keyword">try</span> &#123;    <span class="hljs-keyword">const</span> content = fs.<span class="hljs-title function_">readFileSync</span>(<span class="hljs-variable constant_">TOKEN_PATH</span>).<span class="hljs-title function_">toString</span>();    <span class="hljs-keyword">const</span> credentials = <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">parse</span>(content);    <span class="hljs-comment">// const uri = &#x27;https://www.googleapis.com/oauth2/v3/tokeninfo?access_token=&#x27; + credentials.accestoken;</span>    <span class="hljs-keyword">return</span> google.<span class="hljs-property">auth</span>.<span class="hljs-title function_">fromJSON</span>(credentials);  &#125; <span class="hljs-keyword">catch</span> (err) &#123;    <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;  &#125;&#125;</code></pre><h2 id="Clean-install">Clean install</h2><details>  <summary>Performing a clean introduce of Yarn can offer a few benefits</summary><ol><li><p><strong>Guarantees a New Begin:</strong> Expelling any existing establishments and arrangements guarantees simply begin with a clean slate. This will be accommodating on the off chance that you’ve experienced issues or irregularities along with your past Yarn setup.</p></li><li><p><strong>Settle Dependency Conflicts:</strong> A clean introduce makes a difference in settling potential reliance clashes or issues with obsolete bundles. It guarantees merely bring the most recent forms of Yarn and its dependencies.</p></li><li><p><strong>Dodges Versioning Issues:</strong> Over time, you might have different forms of Yarn introduced on your framework. A clean introduce guarantees merely are working with the most recent steady form, diminishing the chance of versioning issues.</p></li><li><p><strong>Makes strides Framework Soundness:</strong> Evacuating any leftovers of past establishments can contribute to a more steady and unsurprising environment. It makes a difference in avoiding unforeseen behavior caused by obsolete or clashing setups.</p></li><li><p><strong>Improves Security:</strong> Remaining up-to-date with the most recent forms of bundle directors is vital for security. A clean introduce guarantees simply have the foremost later form of Yarn, which may incorporate security patches and advancements.</p></li><li><p><strong>Tackles Establishment Issues:</strong> In the event that you’ve experienced troubles amid the establishment of Yarn or have issues related to lost conditions, a clean introduce can offer assistance resolve these issues.</p></li><li><p><strong>Simplifies Troubleshooting:</strong> When looking for offer assistance or investigating issues with Yarn, beginning with a clean establishment gives a steady standard. It makes it simpler for others to help you, as they won’t got to consider potential complications from past configurations.</p></li><li><p><strong>Advances Best Practices:</strong> Intermittently performing clean installs could be a great hone to preserve a solid improvement environment. It guarantees that you’re working with an optimized setup and diminishes the probability of experiencing unforeseen issues.</p></li></ol></details><p>On Unix-based systems (Linux or macOS):</p><pre><code class="hljs bash"><span class="hljs-built_in">rm</span> -rf node_modules<span class="hljs-built_in">rm</span> yarn.lock<span class="hljs-built_in">rm</span> package-lock.jsonyarn cache cleannpm cache clean --force</code></pre><p>On Windows (using Command Prompt):</p><pre><code class="hljs batch">rmdir /s /q node_modulesdel yarn.lockdel package-lock.jsonyarn cache cleannpm cache clean --force</code></pre><p>then <code>yarn install</code> or <code>npm install</code> again</p><h2 id="Type-Annotation">Type Annotation</h2><p>Provide a type annotation for ‘loadSavedCredentialsIfExist’. For example:</p><pre><code class="hljs ts"><span class="hljs-keyword">const</span> <span class="hljs-attr">loadSavedCredentialsIfExist</span>: <span class="hljs-keyword">import</span>(<span class="hljs-string">&#x27;googleapis-common/node_modules/google-auth-library/build/src/auth/googleauth&#x27;</span>).<span class="hljs-property">JSONClient</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;  <span class="hljs-keyword">try</span> &#123;    <span class="hljs-keyword">const</span> content = fs.<span class="hljs-title function_">readFileSync</span>(<span class="hljs-variable constant_">TOKEN_PATH</span>).<span class="hljs-title function_">toString</span>();    <span class="hljs-keyword">const</span> credentials = <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">parse</span>(content);    <span class="hljs-comment">// const uri = &#x27;https://www.googleapis.com/oauth2/v3/tokeninfo?access_token=&#x27; + credentials.accestoken;</span>    <span class="hljs-keyword">return</span> google.<span class="hljs-property">auth</span>.<span class="hljs-title function_">fromJSON</span>(credentials);  &#125; <span class="hljs-keyword">catch</span> (err) &#123;    <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;  &#125;&#125;</code></pre><h2 id="Boundary-return-type">Boundary return type</h2><p>Provide a boundary return type for ‘loadSavedCredentialsIfExist’. For example:</p><pre><code class="hljs ts"><span class="hljs-comment">/**</span><span class="hljs-comment"> * Reads previously authorized credentials from the save file.</span><span class="hljs-comment"> *</span><span class="hljs-comment"> * <span class="hljs-doctag">@return</span></span><span class="hljs-comment"> */</span><span class="hljs-keyword">export</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">loadSavedCredentialsIfExist</span>(<span class="hljs-params"></span>): <span class="hljs-keyword">import</span>(<span class="hljs-string">&#x27;googleapis-common/node_modules/google-auth-library/build/src/auth/googleauth&#x27;</span>).<span class="hljs-property">JSONClient</span> &#123;  <span class="hljs-keyword">try</span> &#123;    <span class="hljs-keyword">const</span> content = fs.<span class="hljs-title function_">readFileSync</span>(<span class="hljs-variable constant_">TOKEN_PATH</span>).<span class="hljs-title function_">toString</span>();    <span class="hljs-keyword">const</span> credentials = <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">parse</span>(content);    <span class="hljs-comment">// const uri = &#x27;https://www.googleapis.com/oauth2/v3/tokeninfo?access_token=&#x27; + credentials.accestoken;</span>    <span class="hljs-keyword">return</span> google.<span class="hljs-property">auth</span>.<span class="hljs-title function_">fromJSON</span>(credentials);  &#125; <span class="hljs-keyword">catch</span> (err) &#123;    <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;  &#125;&#125;</code></pre>]]></content:encoded>
      
      
      <category domain="https://www.webmanajemen.com/categories/programming/">programming</category>
      
      
      <category domain="https://www.webmanajemen.com/tags/typescript/">typescript</category>
      
      
      <comments>https://www.webmanajemen.com/2024/02/the-inferred-type-of-x-cannot-be-named-without-a-reference-to.html#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>List loaded posts in HexoJS</title>
      <link>https://www.webmanajemen.com/2024/02/hexo-list-loaded-posts.html</link>
      <guid>https://www.webmanajemen.com/2024/02/hexo-list-loaded-posts.html</guid>
      <pubDate>Mon, 12 Feb 2024 06:50:16 GMT</pubDate>
      
      <description>List loaded posts in HexoJS Basic codes to list loaded hexo posts by default to list all posts you can using below codes: Fix missing description by default hexo not provide property description, you </description>
      
      
      
      <content:encoded><![CDATA[<h2 id="Basic-codes-to-list-loaded-hexo-posts">Basic codes to list loaded hexo posts</h2><p>by default to list all posts you can using below codes:</p><pre><div class="caption">javascript</div><code class="hljs javascript"><span class="hljs-keyword">const</span> posts = hexo.<span class="hljs-property">locals</span>.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;posts&#x27;</span>).<span class="hljs-property">data</span>.<span class="hljs-title function_">map</span>(<span class="hljs-function">(<span class="hljs-params">&#123; title, keywords, description, raw, tags, categories, path &#125;</span>) =&gt;</span> (&#123;    title,    keywords,    description,    raw,    path,    <span class="hljs-attr">tags</span>: tags.<span class="hljs-property">data</span>.<span class="hljs-title function_">map</span>(<span class="hljs-function">(<span class="hljs-params">tag</span>) =&gt;</span> tag.<span class="hljs-property">name</span>),    <span class="hljs-attr">categories</span>: categories.<span class="hljs-property">data</span>.<span class="hljs-title function_">map</span>(<span class="hljs-function">(<span class="hljs-params">category</span>) =&gt;</span> category.<span class="hljs-property">name</span>)&#125;));</code></pre><h2 id="Fix-missing-description">Fix missing description</h2><p>by default hexo not provide property <code>description</code>, you have to add it manually to all your Hexo Markdown posts. Or you provide the <code>post excerpt</code> to assign with missing <code>description</code></p><pre><code class="hljs js"><span class="hljs-keyword">const</span> posts = hexo.<span class="hljs-property">locals</span>.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;posts&#x27;</span>).<span class="hljs-property">data</span>.<span class="hljs-title function_">map</span>(<span class="hljs-function">(<span class="hljs-params">&#123; description, excerpt &#125;</span>) =&gt;</span> (&#123;  <span class="hljs-attr">description</span>: description || excerpt&#125;));</code></pre><h2 id="List-loaded-hexo-posts-in-typescript">List loaded hexo posts in typescript</h2><p>in typescript you should declare custom type</p><pre><code class="hljs ts"><span class="hljs-keyword">interface</span> <span class="hljs-title class_">PostList</span> &#123;  <span class="hljs-attr">title</span>: <span class="hljs-built_in">string</span>;  <span class="hljs-attr">description</span>: <span class="hljs-built_in">string</span>;  <span class="hljs-attr">keywords</span>: <span class="hljs-built_in">string</span>[];  <span class="hljs-attr">tags</span>: <span class="hljs-built_in">string</span>[];  <span class="hljs-attr">categories</span>: <span class="hljs-built_in">string</span>[];  <span class="hljs-attr">permalink</span>: <span class="hljs-built_in">string</span>;&#125;<span class="hljs-keyword">const</span> posts = hexo.<span class="hljs-property">locals</span>  .<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;posts&#x27;</span>)  .<span class="hljs-property">data</span>.<span class="hljs-title function_">map</span>(    <span class="hljs-function">(<span class="hljs-params">&#123;</span></span><span class="hljs-params"><span class="hljs-function">      title,</span></span><span class="hljs-params"><span class="hljs-function">      keywords,</span></span><span class="hljs-params"><span class="hljs-function">      description,</span></span><span class="hljs-params"><span class="hljs-function">      excerpt,</span></span><span class="hljs-params"><span class="hljs-function">      raw,</span></span><span class="hljs-params"><span class="hljs-function">      tags,</span></span><span class="hljs-params"><span class="hljs-function">      categories,</span></span><span class="hljs-params"><span class="hljs-function">      path</span></span><span class="hljs-params"><span class="hljs-function">    &#125;</span>) =&gt;</span> (&#123;      title,      <span class="hljs-comment">// fix non-array keywords</span>      <span class="hljs-attr">keywords</span>: <span class="hljs-title class_">Array</span>.<span class="hljs-title function_">isArray</span>(keywords) ? keywords : [keywords],      <span class="hljs-comment">// fix missing description</span>      <span class="hljs-attr">description</span>: description || excerpt,      raw,      <span class="hljs-attr">permalink</span>: path,      <span class="hljs-attr">tags</span>: tags.<span class="hljs-property">data</span>.<span class="hljs-title function_">map</span>(<span class="hljs-function">(<span class="hljs-params">tag</span>) =&gt;</span> tag.<span class="hljs-property">name</span>),      <span class="hljs-attr">categories</span>: categories.<span class="hljs-property">data</span>.<span class="hljs-title function_">map</span>(<span class="hljs-function">(<span class="hljs-params">category</span>) =&gt;</span> category.<span class="hljs-property">name</span>)    &#125;)  ) <span class="hljs-keyword">as</span> <span class="hljs-title class_">PostList</span>;</code></pre>]]></content:encoded>
      
      
      <category domain="https://www.webmanajemen.com/categories/programming/">programming</category>
      
      
      <category domain="https://www.webmanajemen.com/tags/typescript/">typescript</category>
      
      <category domain="https://www.webmanajemen.com/tags/javascript/">javascript</category>
      
      
      <comments>https://www.webmanajemen.com/2024/02/hexo-list-loaded-posts.html#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Toggle enable/disable github hooks event</title>
      <link>https://www.webmanajemen.com/GitHub/toggle-enable-disable-github-hooks-event.html</link>
      <guid>https://www.webmanajemen.com/GitHub/toggle-enable-disable-github-hooks-event.html</guid>
      <pubDate>Sun, 11 Feb 2024 06:31:05 GMT</pubDate>
      
      <description>How to toggle enable/disable github hooks event</description>
      
      
      
      <content:encoded><![CDATA[<p>Pre-commit hooks are scripts that run locally before a commit is made.<br>They are not specific to GitHub but can be part of your local development environment.<br>Tools like <code>pre-commit</code> allow you to configure and run hooks before each commit.</p><h2 id="enable-git-hooks">enable git hooks</h2><p>To toggle enable git hooks you can do following:</p><pre><code class="hljs bash">git config core.hooksPath ./git-hooks</code></pre><h2 id="disable-git-hooks">disable git hooks</h2><p>To toggle disable git hooks you can do following:</p><pre><code class="hljs bash">git config --<span class="hljs-built_in">unset</span> core.hookspath</code></pre>]]></content:encoded>
      
      
      <category domain="https://www.webmanajemen.com/categories/programming/">programming</category>
      
      
      <category domain="https://www.webmanajemen.com/tags/github/">github</category>
      
      <category domain="https://www.webmanajemen.com/tags/bash/">bash</category>
      
      
      <comments>https://www.webmanajemen.com/GitHub/toggle-enable-disable-github-hooks-event.html#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Visual Studio Code Run task on save</title>
      <link>https://www.webmanajemen.com/2024/02/vscode-run-task-on-save.html</link>
      <guid>https://www.webmanajemen.com/2024/02/vscode-run-task-on-save.html</guid>
      <pubDate>Fri, 09 Feb 2024 16:46:28 GMT</pubDate>
      
      <description>How to run task on save using VSCode</description>
      
      
      
      <content:encoded><![CDATA[<p>In Visual Studio Code, you can configure tasks to run automatically when you save a file using the tasks.json file.<br>Here is a step-by-step guide for configuring tasks to run on save:</p><h2 id="Method-1-Using-plugin-Trigger-Task-on-Save">Method 1: Using plugin Trigger Task on Save</h2><p>You can use the <a href="https://marketplace.visualstudio.com/items?itemName=Gruntfuggly.triggertaskonsave">Trigger Task on Save</a> extension.</p><h3 id="Configure-plugin-settings">Configure plugin settings</h3><p>To set it up, add the following to your <code>.vscode/settings.json</code>:</p><pre><code class="hljs jsonc">&#123;  &quot;task.saveBeforeRun&quot;:&quot;always&quot;,  // task name to run on save action  &quot;triggerTaskOnSave.selectedTask&quot;:&quot;bootRun&quot;,  // enable plugin  &quot;triggerTaskOnSave.on&quot;:true,  // restart task when running  &quot;triggerTaskOnSave.restart&quot;:true,  // run in background  &quot;triggerTaskOnSave.showNotifications&quot;:false,  // run in background  &quot;triggerTaskOnSave.showStatusBarToggle&quot;:false,  &quot;triggerTaskOnSave.tasks&quot;:&#123;    &quot;build&quot;:[      // watch file patterns      &quot;server/**/*.html&quot;,      &quot;jvm/**/*.java&quot;,      &quot;server/**/*.java&quot;    ]  &#125;&#125;</code></pre><h3 id="Configure-tasks-json">Configure tasks.json</h3><pre><code class="hljs jsonc">&#123;  &quot;version&quot;: &quot;2.0.0&quot;,  &quot;tasks&quot;: [    &#123;      // run in background      &quot;isBackground&quot;: true,      // task name      &quot;label&quot;: &quot;bootRun&quot;,      &quot;type&quot;: &quot;shell&quot;,      // command shell to run      &quot;command&quot;: &quot;gradlew bootRun&quot;,      &quot;args&quot;: [],      &quot;group&quot;: &#123;        &quot;kind&quot;: &quot;build&quot;,        &quot;isDefault&quot;: true      &#125;,      // task description      &quot;detail&quot;: &quot;run gradle bootRun&quot;,      &quot;presentation&quot;: &#123;        // run in background        &quot;reveal&quot;: &quot;silent&quot;,        &quot;panel&quot;: &quot;shared&quot;      &#125;,      &quot;problemMatcher&quot;: [],      &quot;options&quot;: &#123;        // working directory        &quot;cwd&quot;: &quot;$&#123;workspaceFolder&#125;&quot;      &#125;,      &quot;runOptions&quot;: &#123;        &quot;runOn&quot;: &quot;default&quot;      &#125;    &#125;  ]&#125;</code></pre><h2 id="Method-2-Using-default-tasks-json">Method 2: Using default tasks.json</h2><ol><li><p>Open your project in Visual Studio Code.</p></li><li><p>Press <code>Ctrl + Shift + B</code> (Windows/Linux) or <code>Cmd + Shift + B</code> (Mac) to open the <strong>“Run Build Task”</strong> menu.</p></li><li><p>Select <strong>“Configure Build Task”</strong> and then choose the type of task you want to create (e.g., “Create tasks.json file from template”).</p></li><li><p>Choose the appropriate template based on your project (e.g., “Others”).</p></li><li><p>Modify the generated “tasks.json” file to include a task that runs on save. For example:</p></li></ol><pre><code class="hljs jsonc">&#123;  &quot;version&quot;: &quot;2.0.0&quot;,  &quot;tasks&quot;: [    &#123;      &quot;label&quot;: &quot;Run On Save&quot;,      &quot;type&quot;: &quot;shell&quot;,      &quot;command&quot;: &quot;your_command_here&quot;,      &quot;group&quot;: &#123;        &quot;kind&quot;: &quot;build&quot;,        &quot;isDefault&quot;: true      &#125;,      &quot;presentation&quot;: &#123;        &quot;reveal&quot;: &quot;always&quot;,        &quot;panel&quot;: &quot;new&quot;      &#125;,      &quot;runOptions&quot;: &#123;        &quot;runOn&quot;: &quot;save&quot;      &#125;    &#125;  ]&#125;</code></pre><p>Replace <strong>“your_command_here”</strong> with the actual command you want to run. Make sure the command is something that can be executed from the command line.</p><blockquote><p>Note: option <strong>“runOn”: “save”</strong> triggers the execution of the task when the file is saved.<br>Make sure the task is properly configured  for your project and that the necessary tools are installed.</p></blockquote><pre><code class="hljs jsonc">&quot;runOptions&quot;: &#123;  &quot;runOn&quot;: &quot;save&quot;&#125;</code></pre><ol start="6"><li>Save the “tasks.json” file.</li></ol><h2 id="Conclusion">Conclusion</h2><p>Now, when you save a file in your project, the specified task will be executed automatically.</p><p>The two tricks above worked when I tested previously. That’s the article about <strong>Run task on save using VSCode (Visual Studio Code)</strong></p>]]></content:encoded>
      
      
      <category domain="https://www.webmanajemen.com/categories/programming/">programming</category>
      
      
      
      <comments>https://www.webmanajemen.com/2024/02/vscode-run-task-on-save.html#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Boostrap 5 Color Theme Switcher</title>
      <link>https://www.webmanajemen.com/2024/02/boostrap-5-color-theme-switcher.html</link>
      <guid>https://www.webmanajemen.com/2024/02/boostrap-5-color-theme-switcher.html</guid>
      <pubDate>Fri, 09 Feb 2024 08:04:25 GMT</pubDate>
      
      <description>Color mode toggler for Bootstrap 5.3.0</description>
      
      
      
      <content:encoded><![CDATA[<p>How to create <strong>Color Mode Switch for Bootstrap 5</strong></p><p>Bootstrap 5 does not come with a built-in theme switcher but you can easily implement one using Use JavaScript and CSS.<br>Here’s a simple example of how you can create a Bootstrap 5 color theme selector:</p><ol><li>Includes Bootstrap CSS from CDN.</li><li>Add an empty <code>&lt;style/&gt;</code> tag with attribute <code>data-bs-theme=&quot;light|dark&quot;</code> where you will automatically insert the CSS of the selected theme.</li><li>Create a toggle switch using the Bootstrap form toggle component.</li></ol><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn btn-sm btn-secondary&quot;</span> <span class="hljs-attr">data-bs-theme-value</span>=<span class="hljs-string">&quot;dark&quot;</span>&gt;</span>Dark<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn btn-sm btn-primary&quot;</span> <span class="hljs-attr">data-bs-theme-value</span>=<span class="hljs-string">&quot;light&quot;</span>&gt;</span>Light<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></code></pre><ol start="4"><li>Use JavaScript to track changes on the switch and update the CSS accordingly.</li></ol><p>main of this trick is</p><pre><code class="hljs plaintext">&lt;div data-bs-theme=&quot;light|dark&quot;&gt;&lt;!-- your html code here --&gt;&lt;/div&gt;</code></pre><p>and you should add <code>bg-[dark|light]</code> or <code>text-[light|dark]</code> on wrapper to get switcher works</p><h3 id="HTML">HTML</h3><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">data-bs-theme</span>=<span class="hljs-string">&quot;light&quot;</span>&gt;</span><span class="hljs-comment">&lt;!-- here the indicator --&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;container mt-3&quot;</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;mb-2&quot;</span>&gt;</span>      switcher      <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn btn-sm btn-secondary&quot;</span> <span class="hljs-attr">data-bs-theme-value</span>=<span class="hljs-string">&quot;dark&quot;</span>&gt;</span>Dark<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span>      <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn btn-sm btn-primary&quot;</span> <span class="hljs-attr">data-bs-theme-value</span>=<span class="hljs-string">&quot;light&quot;</span>&gt;</span>Light<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span>      <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn btn-sm btn-danger&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&quot;refreshPage()&quot;</span>&gt;</span>Refresh<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;text-light bg-dark p-4&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;description&quot;</span>&gt;</span>      <span class="hljs-tag">&lt;<span class="hljs-name">h1</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;text-center&quot;</span>&gt;</span>Boostrap 5.3 Color Theme Switcher<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span>      main of this trick is      <span class="hljs-tag">&lt;<span class="hljs-name">pre</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;m-2&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">code</span>&gt;</span><span class="hljs-symbol">&amp;lt;</span>div data-bs-theme=<span class="hljs-symbol">&amp;quot;</span>light|dark<span class="hljs-symbol">&amp;quot;</span><span class="hljs-symbol">&amp;gt;</span><span class="hljs-symbol">&amp;lt;</span>!-- your html code here --<span class="hljs-symbol">&amp;gt;</span><span class="hljs-symbol">&amp;lt;</span>/div<span class="hljs-symbol">&amp;gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">code</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">pre</span>&gt;</span>      and you should add <span class="hljs-tag">&lt;<span class="hljs-name">kbd</span>&gt;</span>bg-[dark|light]<span class="hljs-tag">&lt;/<span class="hljs-name">kbd</span>&gt;</span> or <span class="hljs-tag">&lt;<span class="hljs-name">kbd</span>&gt;</span>text-[light|dark]<span class="hljs-tag">&lt;/<span class="hljs-name">kbd</span>&gt;</span> on wrapper to get switcher works    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>Override class <span class="hljs-tag">&lt;<span class="hljs-name">kbd</span>&gt;</span>*-light<span class="hljs-tag">&lt;/<span class="hljs-name">kbd</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">table</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;table table-light&quot;</span>&gt;</span>      <span class="hljs-tag">&lt;<span class="hljs-name">thead</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span>          <span class="hljs-tag">&lt;<span class="hljs-name">th</span> <span class="hljs-attr">scope</span>=<span class="hljs-string">&quot;col&quot;</span>&gt;</span>#<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span>          <span class="hljs-tag">&lt;<span class="hljs-name">th</span> <span class="hljs-attr">scope</span>=<span class="hljs-string">&quot;col&quot;</span>&gt;</span>First<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span>          <span class="hljs-tag">&lt;<span class="hljs-name">th</span> <span class="hljs-attr">scope</span>=<span class="hljs-string">&quot;col&quot;</span>&gt;</span>Last<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span>          <span class="hljs-tag">&lt;<span class="hljs-name">th</span> <span class="hljs-attr">scope</span>=<span class="hljs-string">&quot;col&quot;</span>&gt;</span>Handle<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span>      <span class="hljs-tag">&lt;/<span class="hljs-name">thead</span>&gt;</span>      <span class="hljs-tag">&lt;<span class="hljs-name">tbody</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span>          <span class="hljs-tag">&lt;<span class="hljs-name">th</span> <span class="hljs-attr">scope</span>=<span class="hljs-string">&quot;row&quot;</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span>          <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>Mark<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span>          <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>Otto<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span>          <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>@mdo<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span>          <span class="hljs-tag">&lt;<span class="hljs-name">th</span> <span class="hljs-attr">scope</span>=<span class="hljs-string">&quot;row&quot;</span>&gt;</span>2<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span>          <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>Jacob<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span>          <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>Thornton<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span>          <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>@fat<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span>          <span class="hljs-tag">&lt;<span class="hljs-name">th</span> <span class="hljs-attr">scope</span>=<span class="hljs-string">&quot;row&quot;</span>&gt;</span>3<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span>          <span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">colspan</span>=<span class="hljs-string">&quot;2&quot;</span>&gt;</span>Larry the Bird<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span>          <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>@twitter<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span>      <span class="hljs-tag">&lt;/<span class="hljs-name">tbody</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;card&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;width: 18rem;&quot;</span>&gt;</span>      <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://getbootstrap.com/docs/5.3/assets/brand/bootstrap-social.png&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;card-img-top&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;...&quot;</span>&gt;</span>      <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;card-body&quot;</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">h5</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;card-title&quot;</span>&gt;</span>Card title<span class="hljs-tag">&lt;/<span class="hljs-name">h5</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;card-text&quot;</span>&gt;</span>Some quick example text to build on the card title and make up the bulk of the card&#x27;s content.<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn btn-primary&quot;</span>&gt;</span>Go somewhere<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span>      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></code></pre><h3 id="Javascript">Javascript</h3><pre><code class="hljs js"><span class="hljs-meta">&quot;use strict&quot;</span>;<span class="hljs-comment">/*!</span><span class="hljs-comment"> * Color mode toggler for Bootstrap&#x27;s</span><span class="hljs-comment"> * Copyright 2011-2023 The Bootstrap Authors</span><span class="hljs-comment"> * Licensed under the Creative Commons Attribution 3.0 Unported License.</span><span class="hljs-comment"> * Modified by L3n4r0x</span><span class="hljs-comment"> */</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;  <span class="hljs-keyword">const</span> <span class="hljs-title function_">getPreferredTheme</span> = (<span class="hljs-params"></span>) =&gt; &#123;    <span class="hljs-keyword">const</span> storedTheme = <span class="hljs-variable language_">localStorage</span>.<span class="hljs-title function_">getItem</span>(<span class="hljs-string">&quot;theme&quot;</span>);    <span class="hljs-keyword">if</span> (storedTheme) &#123;      <span class="hljs-keyword">return</span> storedTheme;    &#125;    <span class="hljs-keyword">return</span> <span class="hljs-variable language_">window</span>.<span class="hljs-title function_">matchMedia</span>(<span class="hljs-string">&quot;(prefers-color-scheme: dark)&quot;</span>).<span class="hljs-property">matches</span>      ? <span class="hljs-string">&quot;dark&quot;</span>      : <span class="hljs-string">&quot;light&quot;</span>;  &#125;;  <span class="hljs-keyword">function</span> <span class="hljs-title function_">setTheme</span>(<span class="hljs-params">theme</span>) &#123;    <span class="hljs-keyword">let</span> value = <span class="hljs-string">&quot;light&quot;</span>;    <span class="hljs-keyword">if</span> (      theme === <span class="hljs-string">&quot;auto&quot;</span> &amp;&amp;      <span class="hljs-variable language_">window</span>.<span class="hljs-title function_">matchMedia</span>(<span class="hljs-string">&quot;(prefers-color-scheme: dark)&quot;</span>).<span class="hljs-property">matches</span>    ) &#123;      value = <span class="hljs-string">&quot;dark&quot;</span>;    &#125; <span class="hljs-keyword">else</span> &#123;      value = theme;    &#125;    <span class="hljs-comment">// hide button switcher</span>    <span class="hljs-keyword">if</span> (value == <span class="hljs-string">&quot;dark&quot;</span>) &#123;      <span class="hljs-comment">// show light button</span>      <span class="hljs-variable language_">document</span>        .<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&quot;[data-bs-theme-value=dark]&quot;</span>)        .<span class="hljs-property">classList</span>.<span class="hljs-title function_">add</span>(<span class="hljs-string">&quot;d-none&quot;</span>);      <span class="hljs-variable language_">document</span>        .<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&quot;[data-bs-theme-value=light]&quot;</span>)        .<span class="hljs-property">classList</span>.<span class="hljs-title function_">remove</span>(<span class="hljs-string">&quot;d-none&quot;</span>);    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (value == <span class="hljs-string">&quot;light&quot;</span>) &#123;      <span class="hljs-variable language_">document</span>        .<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&quot;[data-bs-theme-value=light]&quot;</span>)        .<span class="hljs-property">classList</span>.<span class="hljs-title function_">add</span>(<span class="hljs-string">&quot;d-none&quot;</span>);      <span class="hljs-variable language_">document</span>        .<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&quot;[data-bs-theme-value=dark]&quot;</span>)        .<span class="hljs-property">classList</span>.<span class="hljs-title function_">remove</span>(<span class="hljs-string">&quot;d-none&quot;</span>);    &#125;    <span class="hljs-keyword">const</span> wrapper = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelectorAll</span>(<span class="hljs-string">&quot;[data-bs-theme]&quot;</span>);    <span class="hljs-comment">// change value data-bs-theme</span>    wrapper.<span class="hljs-title function_">forEach</span>(<span class="hljs-function">(<span class="hljs-params">el</span>) =&gt;</span> &#123;      el.<span class="hljs-title function_">setAttribute</span>(<span class="hljs-string">&quot;data-bs-theme&quot;</span>, value);    &#125;);    <span class="hljs-keyword">const</span> isDark = value === <span class="hljs-string">&quot;dark&quot;</span>;    <span class="hljs-keyword">const</span> elements = <span class="hljs-title class_">Array</span>.<span class="hljs-title function_">from</span>(<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelectorAll</span>(<span class="hljs-string">&quot;[class*=-light]&quot;</span>))      .<span class="hljs-title function_">concat</span>(<span class="hljs-title class_">Array</span>.<span class="hljs-title function_">from</span>(<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelectorAll</span>(<span class="hljs-string">&quot;[class*=-white]&quot;</span>)))      .<span class="hljs-title function_">concat</span>(<span class="hljs-title class_">Array</span>.<span class="hljs-title function_">from</span>(<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelectorAll</span>(<span class="hljs-string">&quot;[class*=-dark]&quot;</span>)));    <span class="hljs-keyword">const</span> regex = <span class="hljs-regexp">/(-(light|white|dark)$)/g</span>;    elements.<span class="hljs-title function_">forEach</span>(<span class="hljs-function">(<span class="hljs-params">el</span>) =&gt;</span> &#123;      <span class="hljs-keyword">const</span> className = el.<span class="hljs-property">className</span>.<span class="hljs-title function_">replace</span>(        regex,        isDark ? <span class="hljs-string">&quot;-dark&quot;</span> : <span class="hljs-string">&quot;-light&quot;</span>      );      el.<span class="hljs-title function_">setAttribute</span>(<span class="hljs-string">&quot;class&quot;</span>, className);    &#125;);  &#125;  <span class="hljs-comment">// auto switch theme (uncomment)</span>  <span class="hljs-title function_">setTheme</span>(<span class="hljs-title function_">getPreferredTheme</span>());  <span class="hljs-comment">// listen click</span>  <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelectorAll</span>(<span class="hljs-string">&quot;[data-bs-theme-value]&quot;</span>).<span class="hljs-title function_">forEach</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params">toggle</span>) &#123;    toggle.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&quot;click&quot;</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;      <span class="hljs-keyword">const</span> theme = toggle.<span class="hljs-title function_">getAttribute</span>(<span class="hljs-string">&quot;data-bs-theme-value&quot;</span>);      <span class="hljs-variable language_">localStorage</span>.<span class="hljs-title function_">setItem</span>(<span class="hljs-string">&quot;theme&quot;</span>, theme);      <span class="hljs-title function_">setTheme</span>(theme);    &#125;);  &#125;);&#125;)();<span class="hljs-keyword">function</span> <span class="hljs-title function_">refreshPage</span>(<span class="hljs-params"></span>) &#123;  <span class="hljs-keyword">const</span> a = <span class="hljs-string">&quot;reload&quot;</span>,    b = <span class="hljs-string">&quot;location&quot;</span>;  <span class="hljs-variable language_">window</span>[b][a]();&#125;</code></pre><h2 id="Conclusion">Conclusion</h2><p>You can customize styles in the JavaScript code to match your desired color theme for light and dark modes.<br>Adjust background color, text color, and other styles as needed.</p><h3 id="Live-result-Boostrap-5-Color-Theme-Switcher">Live result Boostrap 5 Color Theme Switcher</h3><p class="codepen" embed_version="2" height="300" preview="false" theme_id="11473" default_tab="result" data-user="dimaslanjaka" data-slug-hash="eYPXvOL" theme="light" version="2.0">See the <a href="https://codepen.io/dimaslanjaka/pen/eYPXvOL">pen</a> on <a href="//codepen.io" rel="nofollow noopener">CodePen</a>.</p><script async src="https://production-assets.codepen.io/assets/embed/ei.js"></script><p><img src="https://github.com/dimaslanjaka/source-posts/assets/12471057/7da67737-0c30-45b8-ad13-b162e43ee37c" alt=""></p>]]></content:encoded>
      
      
      <category domain="https://www.webmanajemen.com/categories/programming/">programming</category>
      
      
      <category domain="https://www.webmanajemen.com/tags/javascript/">javascript</category>
      
      <category domain="https://www.webmanajemen.com/tags/html/">html</category>
      
      <category domain="https://www.webmanajemen.com/tags/css/">css</category>
      
      
      <comments>https://www.webmanajemen.com/2024/02/boostrap-5-color-theme-switcher.html#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Include livereload in spring boot web</title>
      <link>https://www.webmanajemen.com/2024/02/spring-livereload-javascript.html</link>
      <guid>https://www.webmanajemen.com/2024/02/spring-livereload-javascript.html</guid>
      <pubDate>Thu, 08 Feb 2024 19:32:14 GMT</pubDate>
      
      <description>Include livereload in spring boot web LiveReload is a tool that automatically reloads your web application whenever you alter the source code or static resources. To integrate LiveReload into a Spring</description>
      
      
      
      <content:encoded><![CDATA[<p>LiveReload is a tool that automatically reloads your web application whenever you alter the source code or static resources. To integrate LiveReload into a Spring Boot web application, follow these steps:</p><h2 id="Add-LiveReload-Server-as-a-Dependency">Add LiveReload Server as a Dependency</h2><p>Add the LiveReload server as a dependency to your project. If you use Maven, you can include the following dependencies in your <code>pom.xml</code> file:</p><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-devtools<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">optional</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">optional</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></code></pre><p>If you’re using Gradle, include the following in your build.gradle file:</p><pre><code class="hljs groovy">dependencies &#123;    implementation <span class="hljs-string">&#x27;org.springframework.boot:spring-boot-devtools&#x27;</span>&#125;</code></pre><h2 id="Enable-LiveReload">Enable LiveReload</h2><p>Enable LiveReload in either <code>application.properties</code> or <code>application.yml</code>.<br>Open the <code>src/main/resources/application.properties</code> or <code>src/main/resources/application.yml</code> file and add the following property:</p><h3 id="PROPERTIES">PROPERTIES</h3><pre><code class="hljs properties"><span class="hljs-attr">spring.devtools.livereload.enabled</span>=<span class="hljs-string">true</span><span class="hljs-attr">spring.devtools.livereload.livereload</span>=<span class="hljs-string">true</span></code></pre><h3 id="YAML">YAML</h3><pre><code class="hljs yml"><span class="hljs-attr">spring:</span>    <span class="hljs-attr">devtools:</span>        <span class="hljs-attr">restart:</span>            <span class="hljs-attr">enabled:</span> <span class="hljs-literal">true</span>        <span class="hljs-attr">livereload:</span>            <span class="hljs-attr">enabled:</span> <span class="hljs-literal">true</span></code></pre><h2 id="Install-livereload-into-your-html">Install livereload into your html</h2><p>Call the livereload javascript into your html template. For example using <code>thymeleaf</code>:</p><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">th:inline</span>=<span class="hljs-string">&quot;javascript&quot;</span>&gt;</span><span class="language-javascript"></span><span class="language-javascript">  (<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;</span><span class="language-javascript">    <span class="hljs-keyword">const</span> port = <span class="hljs-comment">/*[($&#123;@environment.getProperty(&#x27;server.port&#x27;)&#125;)]*/</span> <span class="hljs-string">&#x27;8080&#x27;</span>;</span><span class="language-javascript">    <span class="hljs-keyword">if</span> (location.<span class="hljs-property">port</span> == port &amp;&amp; location.<span class="hljs-property">hostname</span> == <span class="hljs-string">&#x27;localhost&#x27;</span>) &#123;</span><span class="language-javascript">      <span class="hljs-keyword">const</span> script = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">createElement</span>(<span class="hljs-string">&#x27;script&#x27;</span>);</span><span class="language-javascript">      script.<span class="hljs-property">src</span> = <span class="hljs-string">&#x27;http://localhost:35729/livereload.js&#x27;</span>;</span><span class="language-javascript">      script.<span class="hljs-property">async</span> = <span class="hljs-literal">true</span>;</span><span class="language-javascript">      <span class="hljs-variable language_">document</span>.<span class="hljs-property">body</span>.<span class="hljs-title function_">appendChild</span>(script);</span><span class="language-javascript">    &#125;</span><span class="language-javascript">  &#125;)();</span><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></code></pre><h2 id="Open-the-Application-in-the-Browser">Open the Application in the Browser:</h2><p>Launch your program in the browser.</p><p>Now, whenever you make changes to your code or resources, the LiveReload server will detect them and reload the browser to reflect the changes.</p><p>Keep in mind that <code>spring-boot-devtools</code> is only advised for development and should not be used in production. Also, keep in mind that LiveReload may not operate completely in all cases, particularly if you’re utilizing sophisticated frameworks or setups.</p>]]></content:encoded>
      
      
      <category domain="https://www.webmanajemen.com/categories/programming/">programming</category>
      
      
      <category domain="https://www.webmanajemen.com/tags/java/">java</category>
      
      <category domain="https://www.webmanajemen.com/tags/kotlin/">kotlin</category>
      
      
      <comments>https://www.webmanajemen.com/2024/02/spring-livereload-javascript.html#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>spring Content-Type application/x-www-form-urlencoded;charset=UTF-8 is not supported</title>
      <link>https://www.webmanajemen.com/2024/02/spring-content-type-applicationx-www-form-urlencodedcharsetutf-8-is-not-supported.html</link>
      <guid>https://www.webmanajemen.com/2024/02/spring-content-type-applicationx-www-form-urlencodedcharsetutf-8-is-not-supported.html</guid>
      <pubDate>Wed, 07 Feb 2024 11:02:20 GMT</pubDate>
      
      <description>spring Content-Type application/x-www-form-urlencoded;charset=UTF-8 is not supported Usually, the message Content-Type application/x-www-form-urlencoded;charset=UTF-8 is not supported suggests that th</description>
      
      
      
      <content:encoded><![CDATA[<p>Usually, the message “Content-Type ‘application/x-www-form-urlencoded;charset=UTF-8’ is not supported” suggests that there is a problem with the content type that was given in the request header. This issue frequently happens while using an API or web application. The errors log like sample below:</p><pre><code class="hljs log">21-06-10 15:32:10.363 ERROR [-nio-8080-exec-8] c.e.pay.common.ResponseErrorHandler :50 - Base Exception caughtorg.springframework.web.HttpMediaTypeNotSupportedException: Content type &#x27;application/x-not supported at org.springframework.web.servlet.mvc.method.annotation.AbstractMessageConverterMethodArgumentResolver.readWithMessageConverters(AbstractMessageConverterMethodArgumentResolver.java:235) at org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyMethodProcessor.readWithMessageConverters(RequestResponseBodyMethodProcessor.java:147) at org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyMethodProcessor.resolveArgument(RequestResponseBodyMethodProcessor.java:125) at org.springframework.web.method.support.HandlerMethodArgumentResolverComposite.resolveArgument(HandlerMethodArgumentResolverComposite.java:99) at org.springframework.web.method.support.InvocableHandlerMethod.getMethodArgumentValues(InvocableHandlerMethod.java:161) at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:128) at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:110) at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:832) at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:743) at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:85) at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:961) at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:895) at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:967) at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:869) at javax.servlet. at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:843) at javax.servlet. at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:292) at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:207) at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:52) at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:240) at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:207) at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:121) at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:240) at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:207) at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:212) at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:106) at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:502) at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:141) at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:79) at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:88) at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:528) at org.apache.coyote. at org.apache.coyote.AbstractProtocol$AbstractConnectionHandler.process(AbstractProtocol.java:687) at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1520) at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.run(NioEndpoint.java:1476) at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128) at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628) at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61) at java.base/java.lang.Thread.run(Thread.java:835)</code></pre><p>The following actions can be taken to troubleshoot and fix this problem:</p><h2 id="Post-data-model-type">Post data model type</h2><p>Modify your post data model type, for example <code>ProxyAddModel.java</code></p><pre><code class="hljs java"><span class="hljs-keyword">package</span> web.models;<span class="hljs-keyword">import</span> jakarta.validation.constraints.NotNull;<span class="hljs-keyword">import</span> lombok.AllArgsConstructor;<span class="hljs-keyword">import</span> lombok.Getter;<span class="hljs-keyword">import</span> lombok.NoArgsConstructor;<span class="hljs-keyword">import</span> lombok.Setter;<span class="hljs-meta">@Getter</span><span class="hljs-meta">@Setter</span><span class="hljs-meta">@NoArgsConstructor</span><span class="hljs-meta">@AllArgsConstructor</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ProxyAddModel</span> &#123;    <span class="hljs-meta">@NotNull(message = &quot;Proxies should not be empty&quot;)</span>    <span class="hljs-keyword">public</span> String proxies;&#125;</code></pre><h2 id="Controller-method">Controller method</h2><p>Modify your controller method to accept <code>Content-Type: application/x-www-form-urlencoded;</code> using <code>consumes = &#123; MediaType.APPLICATION_FORM_URLENCODED_VALUE &#125;</code>, and add jakarta validation <code>@Valid</code> before Post data model type.</p><p>Below here working code:</p><pre><code class="hljs java"><span class="hljs-keyword">package</span> web.proxy;<span class="hljs-keyword">import</span> java.util.List;<span class="hljs-keyword">import</span> org.springframework.http.MediaType;<span class="hljs-keyword">import</span> org.springframework.http.ResponseEntity;<span class="hljs-keyword">import</span> org.springframework.security.access.prepost.PreAuthorize;<span class="hljs-keyword">import</span> org.springframework.stereotype.Controller;<span class="hljs-keyword">import</span> org.springframework.ui.Model;<span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.GetMapping;<span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.PostMapping;<span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RequestParam;<span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.ResponseBody;<span class="hljs-keyword">import</span> com.fasterxml.jackson.databind.JsonNode;<span class="hljs-keyword">import</span> jakarta.validation.Valid;<span class="hljs-keyword">import</span> utility.proxy.ProxyModel;<span class="hljs-keyword">import</span> utility.proxy.ProxyUtils;<span class="hljs-keyword">import</span> web.models.AjaxResponse;<span class="hljs-keyword">import</span> web.models.ProxyAddModel;<span class="hljs-meta">@Controller</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ProxyList</span> &#123;    <span class="hljs-meta">@PostMapping(value = &#123; &quot;/proxy/add&quot; &#125;,</span><span class="hljs-meta">            consumes = &#123; MediaType.APPLICATION_FORM_URLENCODED_VALUE &#125;)</span>    <span class="hljs-meta">@ResponseBody</span>    <span class="hljs-keyword">public</span> ResponseEntity&lt;JsonNode&gt; <span class="hljs-title function_">addReceiver</span><span class="hljs-params">(<span class="hljs-meta">@Valid</span> ProxyAddModel postBody)</span> &#123;        <span class="hljs-keyword">if</span> (postBody != <span class="hljs-literal">null</span> &amp;&amp; postBody.proxies != <span class="hljs-literal">null</span>) &#123;            <span class="hljs-comment">// process post body</span>            <span class="hljs-type">ProxyUtils</span> <span class="hljs-variable">proxyUtils</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ProxyUtils</span>();            proxyUtils.fromLocal(postBody.proxies);        &#125;        <span class="hljs-comment">// return &quot;redirect:/proxy?success=add&quot;;</span>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AjaxResponse</span>(<span class="hljs-literal">false</span>, <span class="hljs-string">&quot;proxies added&quot;</span>).toHttpResponse();    &#125;&#125;</code></pre><p>If you want redirect user after post body received, you can using below codes:</p><pre><code class="hljs java"><span class="hljs-meta">@PostMapping(value = &#123; &quot;/proxy/add&quot; &#125;,</span><span class="hljs-meta">        consumes = &#123; MediaType.APPLICATION_FORM_URLENCODED_VALUE &#125;)</span><span class="hljs-comment">// @ResponseBody</span><span class="hljs-keyword">public</span> String <span class="hljs-title function_">addReceiver</span><span class="hljs-params">(<span class="hljs-meta">@Valid</span> ProxyAddModel postBody)</span> &#123;    <span class="hljs-keyword">if</span> (postBody != <span class="hljs-literal">null</span> &amp;&amp; postBody.proxies != <span class="hljs-literal">null</span>) &#123;        <span class="hljs-comment">// process post body</span>        <span class="hljs-type">ProxyUtils</span> <span class="hljs-variable">proxyUtils</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ProxyUtils</span>();        proxyUtils.fromLocal(postBody.proxies);    &#125;    <span class="hljs-comment">// return new AjaxResponse(false, &quot;proxies added&quot;).toHttpResponse();</span>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;redirect:/proxy?success=add&quot;</span>;&#125;</code></pre><h2 id="Conclusion">Conclusion</h2><p>now test send form post to your endpoint.</p><p><img src="https://github.com/dimaslanjaka/source-posts/assets/12471057/3fb94ad5-f947-408e-a180-31bc2d286a8c" alt=""></p>]]></content:encoded>
      
      
      <category domain="https://www.webmanajemen.com/categories/programming/">programming</category>
      
      
      <category domain="https://www.webmanajemen.com/tags/java/">java</category>
      
      <category domain="https://www.webmanajemen.com/tags/kotlin/">kotlin</category>
      
      
      <comments>https://www.webmanajemen.com/2024/02/spring-content-type-applicationx-www-form-urlencodedcharsetutf-8-is-not-supported.html#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>How to create dynamic toast with flowbite-react</title>
      <link>https://www.webmanajemen.com/2024/02/flowbite-react-dynamic-toast.html</link>
      <guid>https://www.webmanajemen.com/2024/02/flowbite-react-dynamic-toast.html</guid>
      <pubDate>Sun, 04 Feb 2024 07:16:11 GMT</pubDate>
      
      <description>How to create dynamic toast with flowbite-react In this article you will learn of How to create toast with flowbite-react dynamically, see below screenshoots. Below is an example of how you can create</description>
      
      
      
      <content:encoded><![CDATA[<p>In this article you will learn of How to create toast with flowbite-react dynamically, see below screenshoots.</p><p><img src="https://github.com/dimaslanjaka/source-posts/assets/12471057/ff040935-f69b-420b-b3c7-35f0ba6cc6ba" alt=""><br><img src="https://github.com/dimaslanjaka/source-posts/assets/12471057/884b397e-dbda-4b54-8a0c-af2e386dc447" alt=""></p><p>Below is an example of how you can create a dynamic toast component in React using <code>flowbite-react</code>.</p><h2 id="Create-flowbite-toast-element">Create flowbite toast element</h2><p>save below codes with filename <code>FlowbiteToast.tsx</code> in folder <code>src/component</code></p><pre><code class="hljs tsx"><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">Toast</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;flowbite-react&#x27;</span>;<span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span>;<span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">HiFire</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react-icons/hi&#x27;</span>;<span class="hljs-keyword">interface</span> <span class="hljs-title class_">FlowbiteToastProps</span> &#123;  [<span class="hljs-attr">key</span>: <span class="hljs-built_in">string</span>]: <span class="hljs-built_in">any</span>;  <span class="hljs-comment">/** show toast indicator */</span>  <span class="hljs-attr">showToast</span>: <span class="hljs-built_in">boolean</span>;  <span class="hljs-comment">/** parent state handler to set `showToast` useful for dismissable toast */</span>  <span class="hljs-attr">handler</span>: <span class="hljs-function">(<span class="hljs-params">showToast: <span class="hljs-built_in">boolean</span></span>) =&gt;</span> <span class="hljs-built_in">any</span>;&#125;<span class="hljs-keyword">const</span> <span class="hljs-title class_">FlowbiteToast</span>: <span class="hljs-title class_">React</span>.<span class="hljs-property">FC</span>&lt;<span class="hljs-title class_">FlowbiteToastProps</span>&gt; = <span class="hljs-function">(<span class="hljs-params">&#123; showToast, handler &#125;</span>) =&gt;</span> &#123;  <span class="hljs-comment">// show toast when indicator=true</span>  <span class="hljs-keyword">return</span> (    showToast &amp;&amp; (      <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Toast</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;absolute top-5 end-5 z-50 shadow&quot;</span>&gt;</span></span><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;inline-flex h-8 w-8 shrink-0 items-center justify-center rounded-lg bg-cyan-100 text-cyan-500 dark:bg-cyan-800 dark:text-cyan-200&quot;</span>&gt;</span></span><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">HiFire</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;h-5 w-5&quot;</span> /&gt;</span></span><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;ml-3 text-sm font-normal&quot;</span>&gt;</span></span><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;mb-1 text-sm font-semibold text-gray-900 dark:text-white&quot;</span>&gt;</span>Update available<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;mb-2 text-sm font-normal&quot;</span>&gt;</span>A new software version is available for download.<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">Toast.Toggle</span></span></span><span class="hljs-tag"><span class="language-xml">          <span class="hljs-attr">onDismiss</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> &#123;</span><span class="language-xml">            // hide toast when X button clicked</span><span class="language-xml">            handler(false);</span><span class="language-xml">          &#125;&#125;</span><span class="language-xml">        /&gt;</span><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">Toast</span>&gt;</span></span>    )  );&#125;;<span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title class_">FlowbiteToast</span>;</code></pre><h2 id="Insert-FlowbiteToast-in-parent-react-element">Insert <code>&lt;FlowbiteToast/&gt;</code> in parent react element</h2><p>for example we create <code>Login.tsx</code> and showing flowbite toast after executing <code>fetch</code> ajax.</p><pre><code class="hljs tsx"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span>;<span class="hljs-keyword">import</span> <span class="hljs-title class_">FlowbiteToast</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./component/FlowbiteToast&#x27;</span>;<span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">Login</span>(<span class="hljs-params"></span>) &#123;  <span class="hljs-comment">// declare parent toast state</span>  <span class="hljs-keyword">const</span> [showToast, setShowToast] = <span class="hljs-title class_">React</span>.<span class="hljs-title function_">useState</span>(<span class="hljs-literal">false</span>);  <span class="hljs-title function_">useEffect</span>(<span class="hljs-function">() =&gt;</span> &#123;    <span class="hljs-comment">// execute fetch ajax</span>    <span class="hljs-title function_">fetch</span>(<span class="hljs-string">&#x27;https://httpbin.org/post&#x27;</span>, &#123;        <span class="hljs-attr">method</span>: <span class="hljs-string">&#x27;POST&#x27;</span>,        <span class="hljs-attr">headers</span>: &#123;        <span class="hljs-string">&#x27;Accept&#x27;</span>: <span class="hljs-string">&#x27;application/json, text/plain, */*&#x27;</span>,        <span class="hljs-string">&#x27;Content-Type&#x27;</span>: <span class="hljs-string">&#x27;application/json&#x27;</span>        &#125;,        <span class="hljs-attr">body</span>: <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">stringify</span>(&#123;<span class="hljs-attr">a</span>: <span class="hljs-number">7</span>, <span class="hljs-attr">str</span>: <span class="hljs-string">&#x27;Some string: &amp;=&amp;&#x27;</span>&#125;)      &#125;).<span class="hljs-title function_">then</span>(<span class="hljs-function">() =&gt;</span> &#123;        <span class="hljs-comment">// show toast</span>        <span class="hljs-title function_">setShowToast</span>(<span class="hljs-literal">true</span>);      &#125;);  &#125;, []);  <span class="hljs-keyword">return</span> (<span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">main</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">FlowbiteToast</span> <span class="hljs-attr">showToast</span>=<span class="hljs-string">&#123;showToast&#125;</span> <span class="hljs-attr">handler</span>=<span class="hljs-string">&#123;setShowToast&#125;</span> /&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">main</span>&gt;</span></span>);&#125;</code></pre><h2 id="Conclusion">Conclusion</h2><p>Now your dynamic flowbite-react toast ready to modify. Here <a href="https://github.com/dimaslanjaka/webpack-boilerplate/commit/d220c84525d3538186790d72a53df275d6472384">My Own FLowbite React Dynamic Toast</a></p><p>Thanks for reading my article of:</p><ul><li>flowbite-react toast dynamic</li></ul>]]></content:encoded>
      
      
      <category domain="https://www.webmanajemen.com/categories/programming/">programming</category>
      
      
      <category domain="https://www.webmanajemen.com/tags/typescript/">typescript</category>
      
      <category domain="https://www.webmanajemen.com/tags/javascript/">javascript</category>
      
      
      <comments>https://www.webmanajemen.com/2024/02/flowbite-react-dynamic-toast.html#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Exported variable has or is using name from external module</title>
      <link>https://www.webmanajemen.com/2024/02/typescript-error-private-name.html</link>
      <guid>https://www.webmanajemen.com/2024/02/typescript-error-private-name.html</guid>
      <pubDate>Sat, 03 Feb 2024 12:04:52 GMT</pubDate>
      
      <description>How to fix exported variable using private type from external module</description>
      
      
      
      <content:encoded><![CDATA[<p>In TypeScript, when you have an exported variable that uses a private type from an external module, you may run into issues because private types are not accessible outside of their module.</p><p>answers for exported variable that uses a private type from an external module:</p><ul><li><a href="https://stackoverflow.com/questions/61456979/solve-react-typescript-error-export-variable-is-using-name-from-external-modul/77933352#77933352">Exported variable ‘yourVariable’ has or is using name ‘TypeName’ from external module “module/path” but cannot be named. ts(4023)</a></li><li><a href="https://stackoverflow.com/questions/43900035/ts4023-exported-variable-x-has-or-is-using-name-y-from-external-module-but">TS4023: Exported Variable <x> has or is using name <y> from external module but cannot be named</a></li><li><a href="https://stackoverflow.com/questions/62538330/exported-variable-x-has-or-is-using-name-y-from-external-module-z-but-cannot-be">Exported variable X has or is using name Y from external module Z but cannot be named</a></li><li><a href="https://www.google.com/search?q=Exported+variable+%27projectConfig%27+has+or+is+using+name+%27Config%27+from+external+module+site:stackoverflow.com&amp;client=firefox-b-d&amp;sca_esv=5c40852b81bce253&amp;sxsrf=ACQVn0_cbfoN2nZaFBculzZNSiBrQy0xKw:1706986272038&amp;sa=X&amp;ved=2ahUKEwig_oWz64-EAxXH4jgGHU4tD10QrQIoBHoECBMQBQ&amp;biw=1366&amp;bih=615&amp;dpr=1">Exported variable ‘projectConfig’ has or is using name ‘Config’ from external module site:stackoverflow.com</a></li></ul><p>To fix exported variable using private type from external module, you can consider a few approaches:</p><h2 id="Fix-steps">Fix steps</h2><p>just declare the type, for example:</p><p>in external lib has code like below:</p><pre><code class="hljs ts"><span class="hljs-keyword">interface</span> privateProperty &#123;  <span class="hljs-attr">name</span>: <span class="hljs-built_in">string</span>;&#125;<span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> config = &#123;  <span class="hljs-attr">propName</span>: &#123;&#125; <span class="hljs-keyword">as</span> privateProperty&#125;</code></pre><p>in your code</p><pre><code class="hljs ts"><span class="hljs-comment">// this config[&#x27;propName&#x27;] contains non-exported type/interface</span><span class="hljs-keyword">import</span> &#123; config &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;external-lib&#x27;</span>;<span class="hljs-comment">// declare new type from private property</span><span class="hljs-keyword">type</span> Y = config[<span class="hljs-string">&#x27;propName&#x27;</span>]; <span class="hljs-comment">// or typeof config[&#x27;propName&#x27;]</span><span class="hljs-comment">// declare new type that extends Y</span><span class="hljs-keyword">export</span> <span class="hljs-keyword">interface</span> X <span class="hljs-keyword">extends</span> Y &#123;&#125;<span class="hljs-comment">// apply interface X which contains Private Type Name</span><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> yourVariable = &#123;&#125; <span class="hljs-keyword">as</span> X;</code></pre><h2 id="Conclusion">Conclusion</h2><p>done. now the problem fixed</p><p>result</p><p>before<br><a href="https://i.stack.imgur.com/6zwQS.png"><img src="https://i.stack.imgur.com/6zwQS.png" alt=""></a></p><p>after<br><a href="https://i.stack.imgur.com/uVeAs.png"><img src="https://i.stack.imgur.com/uVeAs.png" alt=""></a></p>]]></content:encoded>
      
      
      <category domain="https://www.webmanajemen.com/categories/programming/">programming</category>
      
      
      <category domain="https://www.webmanajemen.com/tags/typescript/">typescript</category>
      
      
      <comments>https://www.webmanajemen.com/2024/02/typescript-error-private-name.html#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Enable CORS globally in spring boot</title>
      <link>https://www.webmanajemen.com/2024/02/spring-boot-enable-cors-globally.html</link>
      <guid>https://www.webmanajemen.com/2024/02/spring-boot-enable-cors-globally.html</guid>
      <pubDate>Fri, 02 Feb 2024 22:29:15 GMT</pubDate>
      
      <description>How spring boot enable CORS globally</description>
      
      
      
      <content:encoded><![CDATA[<p>To enable Cross-Origin Resource Sharing (CORS) globally in a Spring Boot application with Spring Security,<br>you can configure CORS in your security configuration class.<br>Here’s an example of codes how you can do this:</p><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.List;<span class="hljs-keyword">import</span> javax.sql.DataSource;<span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<span class="hljs-keyword">import</span> org.springframework.context.annotation.Bean;<span class="hljs-keyword">import</span> org.springframework.context.annotation.Configuration;<span class="hljs-keyword">import</span> org.springframework.security.authentication.AuthenticationManager;<span class="hljs-keyword">import</span> org.springframework.security.config.Customizer;<span class="hljs-keyword">import</span> org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;<span class="hljs-keyword">import</span> org.springframework.security.config.annotation.web.builders.HttpSecurity;<span class="hljs-keyword">import</span> org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;<span class="hljs-keyword">import</span> org.springframework.security.config.annotation.web.configurers.AbstractHttpConfigurer;<span class="hljs-keyword">import</span> org.springframework.security.core.userdetails.UserDetailsService;<span class="hljs-keyword">import</span> org.springframework.security.web.SecurityFilterChain;<span class="hljs-keyword">import</span> org.springframework.security.web.util.matcher.AntPathRequestMatcher;<span class="hljs-keyword">import</span> org.springframework.web.cors.CorsConfiguration;<span class="hljs-keyword">import</span> org.springframework.web.cors.CorsConfigurationSource;<span class="hljs-keyword">import</span> org.springframework.web.cors.UrlBasedCorsConfigurationSource;<span class="hljs-meta">@Configuration</span><span class="hljs-meta">@EnableWebSecurity</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SecurityConfig</span> &#123;    <span class="hljs-meta">@Bean</span>    <span class="hljs-keyword">public</span> SecurityFilterChain <span class="hljs-title function_">filterChain</span><span class="hljs-params">(HttpSecurity http)</span> <span class="hljs-keyword">throws</span> Exception &#123;        <span class="hljs-comment">// disable CSRF (optional)</span>        http.csrf(AbstractHttpConfigurer::disable);        <span class="hljs-comment">// enable CORS globally</span>        <span class="hljs-comment">// by default uses a Bean by the name of corsConfigurationSource</span>        http.cors(Customizer.withDefaults());        <span class="hljs-comment">// your others http configuration here</span>        <span class="hljs-comment">// build the http configurations</span>        <span class="hljs-keyword">return</span> http.build();    &#125;    <span class="hljs-meta">@Bean</span>    CorsConfigurationSource <span class="hljs-title function_">corsConfigurationSource</span><span class="hljs-params">()</span> &#123;        <span class="hljs-type">CorsConfiguration</span> <span class="hljs-variable">configuration</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CorsConfiguration</span>();        configuration.setAllowedHeaders(List.of(<span class="hljs-string">&quot;*&quot;</span>));        configuration.setAllowedOrigins(List.of(<span class="hljs-string">&quot;*&quot;</span>));        configuration.setAllowedMethods(List.of(<span class="hljs-string">&quot;*&quot;</span>));        <span class="hljs-type">UrlBasedCorsConfigurationSource</span> <span class="hljs-variable">source</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UrlBasedCorsConfigurationSource</span>();        source.registerCorsConfiguration(<span class="hljs-string">&quot;/**&quot;</span>, configuration);        <span class="hljs-keyword">return</span> source;    &#125;&#125;</code></pre><p><a href="https://stackoverflow.com/a/76319932/6404439">reference</a></p><p><strong>Description of <code>CorsConfiguration</code> methods</strong></p><ul><li><p><strong>setAllowedHeaders</strong>-&gt; you have to specify which parameters are allowed to be sent to the backend services through the front-end app, for example, if you are using Bearer/Basic Token Authorization methods, you need to pass your JWT-Token through the “Authorization” header. So you need to make sure that backed would accept this data accordingly and for this purpose, you must put “Authorization” in the list of Allowed-Headers.</p></li><li><p><strong>setAllowedMethods</strong>-&gt; Do not forget to put “OPTIONS” method in the list for Pre-flight process. Don’t worry, <a href="https://developer.mozilla.org/en-US/docs/Glossary/Preflight_request">read more here!</a></p></li><li><p><strong>setAllowCredentials</strong>-&gt; If you are using Authorization header, set it True.</p></li><li><p><strong>setExposedHeaders</strong>-&gt; If you are returning data through Response Headers, you need to specify them here. for example, some APIs are designed to return Authorization token after success /authentication through Response Headers. Thus, the related header needs to be exposed accordingly.</p></li><li><p><strong>setAllowedOrigins</strong>-&gt; You must specify the domains that are eligible to send requests to your backend applications. for example, if your application is hosted on <a href="https://penguin.com">https://penguin.com</a> and your APIs are on <a href="https://api.penguin.com">https://api.penguin.com</a>, you need to allow “<a href="https://penguing.com">https://penguing.com</a>” to send requests to your backend. Also, you are able to pass wildcard (*) to allow any domains to send requests to your backend. But it’s recommended to not use “any” unless you are providing public APIs or you are deploying in the non-production environments.</p></li></ul><h2 id="Customize">Customize</h2><p>You can customize header allowed like <code>Authorization</code>, request methods, etc. Below is example of codes:</p><pre><code class="hljs java"><span class="hljs-type">CorsConfiguration</span> <span class="hljs-variable">corsConfiguration</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CorsConfiguration</span>();<span class="hljs-comment">// allow cors when these headers sent</span>corsConfiguration.setAllowedHeaders(List.of(<span class="hljs-string">&quot;Authorization&quot;</span>, <span class="hljs-string">&quot;Cache-Control&quot;</span>, <span class="hljs-string">&quot;Content-Type&quot;</span>));<span class="hljs-comment">// allow for all hostname of CORS came from,</span><span class="hljs-comment">// or you can specify hostnames List.of(&quot;example.com&quot;, &quot;sub.example.com&quot;)</span>corsConfiguration.setAllowedOrigins(List.of(<span class="hljs-string">&quot;*&quot;</span>));<span class="hljs-comment">// allow only these request method</span>corsConfiguration.setAllowedMethods(List.of(<span class="hljs-string">&quot;GET&quot;</span>, <span class="hljs-string">&quot;POST&quot;</span>, <span class="hljs-string">&quot;PUT&quot;</span>, <span class="hljs-string">&quot;DELETE&quot;</span>, <span class="hljs-string">&quot;PUT&quot;</span>,<span class="hljs-string">&quot;OPTIONS&quot;</span>,<span class="hljs-string">&quot;PATCH&quot;</span>, <span class="hljs-string">&quot;DELETE&quot;</span>));<span class="hljs-comment">// allow credentials</span>corsConfiguration.setAllowCredentials(<span class="hljs-literal">true</span>);<span class="hljs-comment">// expose Authorization header</span>corsConfiguration.setExposedHeaders(List.of(<span class="hljs-string">&quot;Authorization&quot;</span>));</code></pre><p><a href="https://stackoverflow.com/a/66590699/6404439">reference</a></p><h2 id="Conclusion">Conclusion</h2><p>Now you need to customize the CORS configuration based on your need. Adjust the configuration according to your specific needs. Ensure that your Spring Boot application has the necessary dependencies, such as spring-boot-starter-security and spring-boot-starter-web.</p><p><img src="https://github.com/dimaslanjaka/source-posts/assets/12471057/c5f5e304-9e64-4cc0-b763-8df4020fc83d" alt=""></p>]]></content:encoded>
      
      
      <category domain="https://www.webmanajemen.com/categories/programming/">programming</category>
      
      
      <category domain="https://www.webmanajemen.com/tags/java/">java</category>
      
      <category domain="https://www.webmanajemen.com/tags/kotlin/">kotlin</category>
      
      
      <comments>https://www.webmanajemen.com/2024/02/spring-boot-enable-cors-globally.html#disqus_thread</comments>
      
    </item>
    
  </channel>
</rss>
