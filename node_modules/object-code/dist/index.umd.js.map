{"version":3,"file":"index.umd.js","sources":["../src/serialize.ts","../src/hash.ts"],"sourcesContent":["/**\n * Serializes any give value into a string. Used internally by the `hash` function.\n *\n * @example\n *\n * ```ts\n * class B {}\n *\n * serialize(B); // functionclass B{}\n * ```\n *\n * **Note**: Symbols uniqueness are not guaranteed, as they are transformed to strings.\n *\n * @param property The property to Serialize\n * @returns A unique string representation of the property\n * @see https://tinylibs.js.org/packages/object-code/\n */\nexport function serialize<T>(value?: T, seen = new WeakMap()): string {\n  const type = typeof value;\n\n  if (value && type === 'object' && !(value instanceof Date || value instanceof RegExp)) {\n    const copy = (Array.isArray(value) ? [] : {}) as Record<keyof T, string>;\n\n    const keys = Object.keys(value).sort((a, b) => (a > b ? 1 : -1));\n    let i = keys.length;\n\n    while (i--) {\n      /* eslint-disable @typescript-eslint/no-non-null-assertion */\n      const key = keys[i]! as keyof T;\n      const val = value[key]!;\n\n      // Uses an internal WeakMap to keep track of previous seen values\n      // and avoid circular references serializations which would cause\n      // an infinite loop.\n      if (\n        typeof val === 'object' &&\n        val !== null &&\n        !(val instanceof Date || val instanceof RegExp)\n      ) {\n        if (seen.has(val)) {\n          continue;\n        }\n\n        // Only add the value to the seen list if it's an object\n        seen.set(val, true);\n      }\n\n      copy[key] = serialize(val, seen);\n    }\n\n    return String(value.constructor) + JSON.stringify(copy, keys);\n  }\n\n  return type + String(value);\n}\n","import { serialize } from './serialize';\n\n/**\n * Hashes a given value into a unique number.\n *\n * This function accepts **ANY** kind of value, like `functions`, `classes`, `objects` and\n * so on.\n *\n * **Note**: Symbols uniqueness are not guaranteed, as they are transformed to strings.\n *\n * @example\n *\n * ```ts\n * class B {}\n *\n * const bHash = hash(B);\n * const bInstanceHash = hash(new B());\n * const bArrayHash = hash([B, new B(), new B(), { b: new B() }]);\n * const bBuilderHash = hash(() => B);\n * const bFactoryHash = hash(() => new B());\n * ```\n *\n * @param val The value to be hashed\n * @returns The signed integer result from the provided value\n * @see https://tinylibs.js.org/packages/object-code/\n */\nexport function hash(val?: unknown): number {\n  val = serialize(val);\n\n  let hash = 5381;\n  let index = 0;\n\n  while (index < (val as string).length) {\n    hash = (hash * 33) ^ (val as string).charCodeAt(index++);\n  }\n\n  return hash;\n}\n"],"names":["serialize","value","seen","WeakMap","type","Date","RegExp","copy","Array","isArray","keys","Object","sort","a","b","i","length","key","val","has","set","String","constructor","JSON","stringify","hash","index","charCodeAt"],"mappings":"oOAiBM,SAAUA,EAAaC,EAAWC,YAAAA,IAAAA,EAAO,IAAIC,SACjD,IAAMC,SAAcH,EAEpB,GAAIA,GAAkB,WAATG,KAAuBH,aAAiBI,MAAQJ,aAAiBK,QAAS,CAMrF,IALA,IAAMC,EAAQC,MAAMC,QAAQR,GAAS,GAAK,GAEpCS,EAAOC,OAAOD,KAAKT,GAAOW,KAAK,SAACC,EAAGC,UAAOD,EAAIC,EAAI,GAAK,CAAC,GAC1DC,EAAIL,EAAKM,OAEND,KAAK,CAEV,IAAME,EAAMP,EAAKK,GACXG,EAAMjB,EAAMgB,GAKlB,GACiB,iBAARC,GACC,OAARA,KACEA,aAAeb,MAAQa,aAAeZ,QACxC,CACA,GAAIJ,EAAKiB,IAAID,GACX,SAIFhB,EAAKkB,IAAIF,GAAK,EACf,CAEDX,EAAKU,GAAOjB,EAAUkB,EAAKhB,EAC5B,CAED,OAAOmB,OAAOpB,EAAMqB,aAAeC,KAAKC,UAAUjB,EAAMG,EACzD,CAED,OAAON,EAAOiB,OAAOpB,EACvB,iBC5BqBiB,GACnBA,EAAMlB,EAAUkB,GAKhB,IAHA,IAAIO,EAAO,KACPC,EAAQ,EAELA,EAASR,EAAeF,QAC7BS,EAAe,GAAPA,EAAcP,EAAeS,WAAWD,KAGlD,OAAOD,CACT"}