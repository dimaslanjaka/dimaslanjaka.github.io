import Promise from 'bluebird';
interface StoreSyncFunction {
    (data: {
        path?: string;
        text: string;
    }, options: object): any;
    output?: string;
    compile?: (local: object) => string;
}
interface StoreFunction {
    (data: {
        path?: string;
        text: string;
    }, options: object): Promise<any>;
    (data: {
        path?: string;
        text: string;
    }, options: object, callback: (err: Error, value: string) => any): void;
    output?: string;
    compile?: (local: object) => string;
    disableNunjucks?: boolean;
}
interface SyncStore {
    [key: string]: StoreSyncFunction;
}
interface Store {
    [key: string]: StoreFunction;
}
declare class Renderer {
    store: Store;
    storeSync: SyncStore;
    constructor();
    list(sync: boolean): SyncStore;
    get(name: string, sync?: boolean): StoreSyncFunction;
    isRenderable(path: string): boolean;
    isRenderableSync(path: string): boolean;
    getOutput(path: string): string;
    register(name: string, output: string, fn: StoreFunction): void;
    register(name: string, output: string, fn: StoreFunction, sync: false): void;
    register(name: string, output: string, fn: StoreSyncFunction, sync: true): void;
    register(name: string, output: string, fn: StoreFunction | StoreSyncFunction, sync: boolean): void;
}
export = Renderer;
