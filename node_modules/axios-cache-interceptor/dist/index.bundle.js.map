{"version":3,"file":"index.bundle.js","sources":["../src/header/headers.ts","../src/header/interpreter.ts","../src/interceptors/util.ts","../src/interceptors/request.ts","../src/util/cache-predicate.ts","../src/util/update-cache.ts","../src/interceptors/response.ts","../src/storage/build.ts","../src/storage/memory.ts","../src/util/key-generator.ts","../src/storage/web-api.ts","../src/cache/create.ts"],"sourcesContent":["export const Header = Object.freeze({\n  /**\n   * ```txt\n   * If-Modified-Since: <day-name>, <day> <month> <year> <hour>:<minute>:<second> GMT\n   * ```\n   *\n   * @link https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/If-Modified-Since\n   */\n  IfModifiedSince: 'if-modified-since',\n\n  /**\n   * ```txt\n   * Last-Modified: <day-name>, <day> <month> <year> <hour>:<minute>:<second> GMT\n   * ```\n   *\n   * @link https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Last-Modified\n   */\n  LastModified: 'last-modified',\n\n  /**\n   * ```txt\n   * If-None-Match: \"<etag_value>\"\n   * If-None-Match: \"<etag_value>\", \"<etag_value>\", â€¦\n   * If-None-Match: *\n   * ```\n   *\n   * @link https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/If-None-Match\n   */\n  IfNoneMatch: 'if-none-match',\n\n  /**\n   * ```txt\n   * Cache-Control: max-age=604800\n   * ```\n   *\n   * @link https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Cache-Control\n   */\n  CacheControl: 'cache-control',\n\n  /**\n   * ```txt\n   * Pragma: no - cache;\n   * ```\n   *\n   * @link https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Pragma\n   */\n  Pragma: 'pragma',\n\n  /**\n   * ```txt\n   * ETag: W / '<etag_value>';\n   * ETag: '<etag_value>';\n   * ```\n   *\n   * @link https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/ETag\n   */\n  ETag: 'etag',\n\n  /**\n   * ```txt\n   * Expires: <http-date>\n   * ```\n   *\n   * @link https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Expires\n   */\n  Expires: 'expires',\n\n  /**\n   * ```txt\n   * Age: <delta-seconds>\n   * ```\n   *\n   * @link https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Age\n   */\n  Age: 'age',\n\n  /**\n   * Used internally as metadata to mark the cache item as revalidatable and enabling\n   * stale cache state Contains a string of ASCII characters that can be used as ETag for\n   * `If-Match` header Provided by user using `cache.etag` value.\n   *\n   * ```txt\n   * X-Axios-Cache-Etag: \"<etag_value>\"\n   * ```\n   */\n  XAxiosCacheEtag: 'x-axios-cache-etag',\n\n  /**\n   * Used internally as metadata to mark the cache item as revalidatable and enabling\n   * stale cache state may contain `'use-cache-timestamp'` if `cache.modifiedSince` is\n   * `true`, otherwise will contain a date from `cache.modifiedSince`. If a date is\n   * provided, it can be used for `If-Modified-Since` header, otherwise the cache\n   * timestamp can be used for `If-Modified-Since` header.\n   *\n   * ```txt\n   * X-Axios-Cache-Last-Modified: <day-name>, <day> <month> <year> <hour>:<minute>:<second> GMT\n   * X-Axios-Cache-Last-Modified: use-cache-timestamp\n   * ```\n   */\n  XAxiosCacheLastModified: 'x-axios-cache-last-modified',\n\n  /**\n   * Used internally as metadata to mark the cache item able to be used if the server\n   * returns an error. The stale-if-error response directive indicates that the cache can\n   * reuse a stale response when any error occurs.\n   *\n   * ```txt\n   * XAxiosCacheStaleIfError: <seconds>\n   * ```\n   */\n  XAxiosCacheStaleIfError: 'x-axios-cache-stale-if-error'\n});\n","import { parse } from 'cache-parser';\nimport { Header } from './headers.js';\nimport type { HeaderInterpreter } from './types.js';\n\nexport const defaultHeaderInterpreter: HeaderInterpreter = (headers, location) => {\n  if (!headers) return 'not enough headers';\n\n  const cacheControl: unknown = headers[Header.CacheControl];\n\n  if (cacheControl) {\n    const cc = parse(String(cacheControl));\n\n    if (\n      // Header told that this response should not be cached.\n      cc.noCache ||\n      cc.noStore ||\n      // Server side handling private data\n      (location === 'server' && cc.private)\n    ) {\n      return 'dont cache';\n    }\n\n    if (cc.immutable) {\n      // 1 year is sufficient, as Infinity may cause problems with certain storages.\n      // It might not be the best way, but a year is better than none. Facebook shows\n      // that a browser session stays at the most 1 month.\n      return {\n        cache: 1000 * 60 * 60 * 24 * 365\n      };\n    }\n\n    if (cc.maxAge !== undefined) {\n      const age: unknown = headers[Header.Age];\n\n      return {\n        cache: age\n          ? // If age is present, we must subtract it from maxAge\n            (cc.maxAge - Number(age)) * 1000\n          : cc.maxAge * 1000,\n        // Already out of date, must be requested again\n        stale:\n          // I couldn't find any documentation about who should be used, as they\n          // are not meant to overlap each other. But, as we cannot request in the\n          // background, as the stale-while-revalidate says, and we just increase\n          // its staleTtl when its present, max-stale is being preferred over\n          // stale-while-revalidate.\n          cc.maxStale !== undefined\n            ? cc.maxStale * 1000\n            : cc.staleWhileRevalidate !== undefined\n              ? cc.staleWhileRevalidate * 1000\n              : undefined\n      };\n    }\n  }\n\n  const expires: unknown = headers[Header.Expires];\n\n  if (expires) {\n    const milliseconds = Date.parse(String(expires)) - Date.now();\n    return milliseconds >= 0 ? { cache: milliseconds } : 'dont cache';\n  }\n\n  return 'not enough headers';\n};\n","import type { Method } from 'axios';\nimport type { CacheAxiosResponse, CacheRequestConfig } from '../cache/axios.js';\nimport type { CacheProperties } from '../cache/cache.js';\nimport { Header } from '../header/headers.js';\nimport type {\n  CachedResponse,\n  MustRevalidateStorageValue,\n  StaleStorageValue\n} from '../storage/types.js';\n\n/**\n * Creates a new validateStatus function that will use the one already used and also\n * accept status code 304.\n */\nexport function createValidateStatus(\n  oldValidate?: CacheRequestConfig['validateStatus']\n): (status: number) => boolean {\n  return oldValidate\n    ? (status) => oldValidate(status) || status === 304\n    : (status) => (status >= 200 && status < 300) || status === 304;\n}\n\n/** Checks if the given method is in the methods array */\nexport function isMethodIn(\n  requestMethod: Method | string = 'get',\n  methodList: Method[] = []\n): boolean {\n  requestMethod = requestMethod.toLowerCase() as Lowercase<Method>;\n  return methodList.some((method) => method === requestMethod);\n}\n\nexport interface ConfigWithCache<D> extends CacheRequestConfig<unknown, D> {\n  cache: Partial<CacheProperties<unknown, D>>;\n}\n\n/**\n * This function updates the cache when the request is stale. So, the next request to the\n * server will be made with proper header / settings.\n */\nexport function updateStaleRequest<D>(\n  cache: StaleStorageValue | MustRevalidateStorageValue,\n  config: ConfigWithCache<D>\n): void {\n  config.headers ||= {};\n\n  const { etag, modifiedSince } = config.cache;\n\n  if (etag) {\n    const etagValue = etag === true ? (cache.data?.headers[Header.ETag] as unknown) : etag;\n\n    if (etagValue) {\n      config.headers[Header.IfNoneMatch] = etagValue;\n    }\n  }\n\n  if (modifiedSince) {\n    config.headers[Header.IfModifiedSince] =\n      modifiedSince === true\n        ? // If last-modified is not present, use the createdAt timestamp\n          (cache.data.headers[Header.LastModified] as unknown) ||\n          new Date(cache.createdAt).toUTCString()\n        : modifiedSince.toUTCString();\n  }\n}\n\n/**\n * Creates the new date to the cache by the provided response. Also handles possible 304\n * Not Modified by updating response properties.\n */\nexport function createCacheResponse<R, D>(\n  response: CacheAxiosResponse<R, D>,\n  previousCache?: CachedResponse\n): CachedResponse {\n  if (response.status === 304 && previousCache) {\n    // Set the cache information into the response object\n    response.cached = true;\n    response.data = previousCache.data as R;\n    response.status = previousCache.status;\n    response.statusText = previousCache.statusText;\n\n    // Update possible new headers\n    response.headers = {\n      ...previousCache.headers,\n      ...response.headers\n    };\n\n    // return the old cache\n    return previousCache;\n  }\n\n  // New Response\n  return {\n    data: response.data,\n    status: response.status,\n    statusText: response.statusText,\n    headers: response.headers\n  };\n}\n","import { deferred } from 'fast-defer';\nimport type { AxiosCacheInstance, CacheAxiosResponse } from '../cache/axios.js';\nimport { Header } from '../header/headers.js';\nimport type { CachedResponse, CachedStorageValue, LoadingStorageValue } from '../storage/types.js';\nimport type { RequestInterceptor } from './build.js';\nimport {\n  type ConfigWithCache,\n  createValidateStatus,\n  isMethodIn,\n  updateStaleRequest\n} from './util.js';\n\nexport function defaultRequestInterceptor(axios: AxiosCacheInstance): RequestInterceptor {\n  const onFulfilled: RequestInterceptor['onFulfilled'] = async (config) => {\n    config.id = axios.generateKey(config);\n\n    if (config.cache === false) {\n      if (__ACI_DEV__) {\n        axios.debug({\n          id: config.id,\n          msg: 'Ignoring cache because config.cache === false',\n          data: config\n        });\n      }\n\n      return config;\n    }\n\n    // merge defaults with per request configuration\n    config.cache = { ...axios.defaults.cache, ...config.cache };\n\n    if (\n      typeof config.cache.cachePredicate === 'object' &&\n      config.cache.cachePredicate.ignoreUrls &&\n      config.url\n    ) {\n      for (const url of config.cache.cachePredicate.ignoreUrls) {\n        if (\n          url instanceof RegExp\n            ? // Handles stateful regexes\n              // biome-ignore lint: reduces the number of checks\n              ((url.lastIndex = 0), url.test(config.url))\n            : config.url.includes(url)\n        ) {\n          if (__ACI_DEV__) {\n            axios.debug({\n              id: config.id,\n              msg: `Ignored because url (${config.url}) matches ignoreUrls (${config.cache.cachePredicate.ignoreUrls})`,\n              data: {\n                url: config.url,\n                cachePredicate: config.cache.cachePredicate\n              }\n            });\n          }\n\n          return config;\n        }\n      }\n    }\n\n    // Applies sufficient headers to prevent other cache systems to work along with this one\n    //\n    // Its currently used before isMethodIn because if the isMethodIn returns false, the request\n    // shouldn't be cached an therefore neither in the browser.\n    if (config.cache.cacheTakeover) {\n      config.headers[Header.CacheControl] ??= 'no-cache';\n      config.headers[Header.Pragma] ??= 'no-cache';\n      config.headers[Header.Expires] ??= '0';\n    }\n\n    if (!isMethodIn(config.method, config.cache.methods)) {\n      if (__ACI_DEV__) {\n        axios.debug({\n          id: config.id,\n          msg: `Ignored because method (${config.method}) is not in cache.methods (${config.cache.methods})`\n        });\n      }\n\n      return config;\n    }\n\n    // Assumes that the storage handled staled responses\n    let cache = await axios.storage.get(config.id, config);\n    const overrideCache = config.cache.override;\n\n    // Not cached, continue the request, and mark it as fetching\n    // biome-ignore lint/suspicious/noConfusingLabels: required to break condition in simultaneous accesses\n    ignoreAndRequest: if (\n      cache.state === 'empty' ||\n      cache.state === 'stale' ||\n      cache.state === 'must-revalidate' ||\n      overrideCache\n    ) {\n      // This checks for simultaneous access to a new key. The js event loop jumps on the\n      // first await statement, so the second (asynchronous call) request may have already\n      // started executing.\n      if (axios.waiting.has(config.id) && !overrideCache) {\n        cache = (await axios.storage.get(config.id, config)) as\n          | CachedStorageValue\n          | LoadingStorageValue;\n\n        // @ts-expect-error This check is required when a request has it own cache deleted manually, lets\n        // say by a `axios.storage.delete(key)` and has a concurrent loading request.\n        // Because in this case, the cache will be empty and may still has a pending key\n        // on waiting map.\n        if (cache.state !== 'empty' && cache.state !== 'must-revalidate') {\n          if (__ACI_DEV__) {\n            axios.debug({\n              id: config.id,\n              msg: 'Waiting list had an deferred for this key, waiting for it to finish'\n            });\n          }\n\n          break ignoreAndRequest;\n        }\n      }\n\n      // Create a deferred to resolve other requests for the same key when it's completed\n      const def = deferred<void>();\n      axios.waiting.set(config.id, def);\n\n      // Adds a default reject handler to catch when the request gets aborted without\n      // others waiting for it.\n      def.catch(() => undefined);\n\n      await axios.storage.set(\n        config.id,\n        {\n          state: 'loading',\n          previous: overrideCache\n            ? // Simply determine if the request is stale or not\n              // based if it had previous data or not\n              cache.data\n              ? 'stale'\n              : 'empty'\n            : // Typescript doesn't know that cache.state here can only be 'empty' or 'stale'\n              (cache.state as 'stale' | 'must-revalidate'),\n\n          data: cache.data as any,\n\n          // If the cache is empty and asked to override it, use the current timestamp\n          createdAt: overrideCache && !cache.createdAt ? Date.now() : (cache.createdAt as any)\n        },\n        config\n      );\n\n      if (cache.state === 'stale' || cache.state === 'must-revalidate') {\n        updateStaleRequest(cache, config as ConfigWithCache<unknown>);\n\n        if (__ACI_DEV__) {\n          axios.debug({\n            id: config.id,\n            msg: 'Updated stale request'\n          });\n        }\n      }\n\n      config.validateStatus = createValidateStatus(config.validateStatus);\n\n      if (__ACI_DEV__) {\n        axios.debug({\n          id: config.id,\n          msg: 'Sending request, waiting for response',\n          data: {\n            overrideCache,\n            state: cache.state\n          }\n        });\n      }\n\n      // Hydrates any UI temporarily, if cache is available\n      if (cache.state === 'stale' || (cache.data && cache.state !== 'must-revalidate')) {\n        await config.cache.hydrate?.(cache);\n      }\n\n      return config;\n    }\n\n    let cachedResponse: CachedResponse;\n\n    if (cache.state === 'loading') {\n      const deferred = axios.waiting.get(config.id);\n\n      // The deferred may not exists when the process is using a persistent\n      // storage and cancelled  in the middle of a request, this would result in\n      // a pending loading state in the storage but no current promises to resolve\n      if (!deferred) {\n        // Hydrates any UI temporarily, if cache is available\n        if (cache.data) {\n          await config.cache.hydrate?.(cache);\n        }\n\n        return config;\n      }\n\n      if (__ACI_DEV__) {\n        axios.debug({\n          id: config.id,\n          msg: 'Detected concurrent request, waiting for it to finish'\n        });\n      }\n\n      try {\n        // Deferred can't reuse the value because the user's storage might clone\n        // or mutate the value, so we need to ask it again.\n        // For example with memoryStorage + cloneData\n        await deferred;\n        const state = await axios.storage.get(config.id, config);\n\n        // This is a cache mismatch and should never happen, but in case it does,\n        // we need to redo the request all over again.\n        /* c8 ignore start */\n        if (!state.data) {\n          if (__ACI_DEV__) {\n            axios.debug({\n              id: config.id,\n              msg: 'Deferred resolved, but no data was found, requesting again'\n            });\n          }\n\n          return onFulfilled!(config);\n        }\n        /* c8 ignore end */\n\n        cachedResponse = state.data;\n      } catch (err) {\n        if (__ACI_DEV__) {\n          axios.debug({\n            id: config.id,\n            msg: 'Deferred rejected, requesting again',\n            data: err\n          });\n        }\n\n        // Hydrates any UI temporarily, if cache is available\n        /* c8 ignore start */\n        if (cache.data) {\n          await config.cache.hydrate?.(cache);\n        }\n        /* c8 ignore end */\n\n        // The deferred is rejected when the request that we are waiting rejects its cache.\n        // In this case, we need to redo the request all over again.\n        return onFulfilled!(config);\n      }\n    } else {\n      cachedResponse = cache.data;\n    }\n\n    // The cached data is already transformed after receiving the response from the server.\n    // Reapplying the transformation on the transformed data will have an unintended effect.\n    // Since the cached data is already in the desired format, there is no need to apply the transformation function again.\n    config.transformResponse = undefined;\n\n    // Even though the response interceptor receives this one from here,\n    // it has been configured to ignore cached responses = true\n    config.adapter = function cachedAdapter(): Promise<CacheAxiosResponse> {\n      return Promise.resolve({\n        config,\n        data: cachedResponse.data,\n        headers: cachedResponse.headers,\n        status: cachedResponse.status,\n        statusText: cachedResponse.statusText,\n        cached: true,\n        stale: (cache as LoadingStorageValue).previous === 'stale',\n\n        id: config.id!\n      });\n    };\n\n    if (__ACI_DEV__) {\n      axios.debug({\n        id: config.id,\n        msg: 'Returning cached response'\n      });\n    }\n\n    return config;\n  };\n\n  return {\n    onFulfilled\n  };\n}\n","import type { CacheAxiosResponse } from '../cache/axios.js';\n\nimport type { CachePredicate, CachePredicateObject } from './types.js';\n\n/** Tests an response against a {@link CachePredicateObject}. */\nexport async function testCachePredicate<R = unknown, D = unknown>(\n  response: CacheAxiosResponse<R, D>,\n  predicate: CachePredicate<R, D>\n): Promise<boolean> {\n  if (typeof predicate === 'function') {\n    return predicate(response);\n  }\n\n  const { statusCheck, responseMatch, containsHeaders } = predicate;\n\n  if (\n    (statusCheck && !(await statusCheck(response.status))) ||\n    (responseMatch && !(await responseMatch(response)))\n  ) {\n    return false;\n  }\n\n  if (containsHeaders) {\n    for (const [header, predicate] of Object.entries(containsHeaders)) {\n      if (\n        !(await predicate(\n          // Avoid bugs in case the header is not in lower case\n          response.headers[header.toLowerCase()] ?? response.headers[header]\n        ))\n      ) {\n        return false;\n      }\n    }\n  }\n\n  return true;\n}\n","import type { CacheAxiosResponse } from '../cache/axios.js';\nimport type { AxiosStorage } from '../storage/types.js';\nimport type { CacheUpdater } from './types.js';\n\n/** Function to update all caches, from CacheProperties.update, with the new data. */\nexport async function updateCache<R, D>(\n  storage: AxiosStorage,\n  data: CacheAxiosResponse<R, D>,\n  cacheUpdater: CacheUpdater<R, D>\n): Promise<void> {\n  // Global cache update function.\n  if (typeof cacheUpdater === 'function') {\n    return cacheUpdater(data);\n  }\n\n  for (const [cacheKey, updater] of Object.entries(cacheUpdater)) {\n    if (updater === 'delete') {\n      await storage.remove(cacheKey, data.config);\n      continue;\n    }\n\n    const value = await storage.get(cacheKey, data.config);\n\n    if (value.state === 'loading') {\n      continue;\n    }\n\n    const newValue = await updater(value, data);\n\n    if (newValue === 'delete') {\n      await storage.remove(cacheKey, data.config);\n      continue;\n    }\n\n    if (newValue !== 'ignore') {\n      await storage.set(cacheKey, newValue, data.config);\n    }\n  }\n}\n","import type { AxiosResponseHeaders } from 'axios';\nimport { parse } from 'cache-parser';\nimport type { AxiosCacheInstance, CacheAxiosResponse, CacheRequestConfig } from '../cache/axios.js';\nimport type { CacheProperties } from '../cache/cache.js';\nimport { Header } from '../header/headers.js';\nimport type { CachedStorageValue } from '../storage/types.js';\nimport { testCachePredicate } from '../util/cache-predicate.js';\nimport { updateCache } from '../util/update-cache.js';\nimport type { ResponseInterceptor } from './build.js';\nimport { createCacheResponse, isMethodIn } from './util.js';\n\nexport function defaultResponseInterceptor(axios: AxiosCacheInstance): ResponseInterceptor {\n  /**\n   * Rejects cache for an response response.\n   *\n   * Also update the waiting list for this key by rejecting it.\n   */\n  const rejectResponse = async (\n    responseId: string,\n    config: CacheRequestConfig,\n    clearCache: boolean\n  ) => {\n    // Updates the cache to empty to prevent infinite loading state\n    if (clearCache) {\n      await axios.storage.remove(responseId, config);\n    }\n\n    // Rejects the deferred, if present\n    const deferred = axios.waiting.get(responseId);\n\n    if (deferred) {\n      deferred.reject();\n      axios.waiting.delete(responseId);\n    }\n  };\n\n  const onFulfilled: ResponseInterceptor['onFulfilled'] = async (response) => {\n    // When response.config is not present, the response is indeed a error.\n    if (!response?.config) {\n      if (__ACI_DEV__) {\n        axios.debug({\n          msg: 'Response interceptor received an unknown response.',\n          data: response\n        });\n      }\n\n      // Re-throws the error\n      throw response;\n    }\n\n    response.id = response.config.id!;\n    response.cached ??= false;\n\n    const config = response.config;\n    // Request interceptor merges defaults with per request configuration\n    const cacheConfig = config.cache as CacheProperties;\n\n    // Response is already cached\n    if (response.cached) {\n      if (__ACI_DEV__) {\n        axios.debug({\n          id: response.id,\n          msg: 'Returned cached response'\n        });\n      }\n\n      return response;\n    }\n\n    // Skip cache: either false or weird behavior\n    // config.cache should always exists, at least from global config merge.\n    if (!cacheConfig) {\n      if (__ACI_DEV__) {\n        axios.debug({\n          id: response.id,\n          msg: 'Response with config.cache falsy',\n          data: response\n        });\n      }\n\n      response.cached = false;\n      return response;\n    }\n\n    // Update other entries before updating himself\n    if (cacheConfig.update) {\n      await updateCache(axios.storage, response, cacheConfig.update);\n    }\n\n    if (!isMethodIn(config.method, cacheConfig.methods)) {\n      if (__ACI_DEV__) {\n        axios.debug({\n          id: response.id,\n          msg: `Ignored because method (${config.method}) is not in cache.methods (${cacheConfig.methods})`,\n          data: { config, cacheConfig }\n        });\n      }\n\n      return response;\n    }\n\n    const cache = await axios.storage.get(response.id, config);\n\n    if (\n      // If the request interceptor had a problem or it wasn't cached\n      cache.state !== 'loading'\n    ) {\n      if (__ACI_DEV__) {\n        axios.debug({\n          id: response.id,\n          msg: \"Response not cached and storage isn't loading\",\n          data: { cache, response }\n        });\n      }\n\n      return response;\n    }\n\n    // Config told that this response should be cached.\n    if (\n      // For 'loading' values (previous: stale), this check already ran in the past.\n      !cache.data &&\n      !(await testCachePredicate(response, cacheConfig.cachePredicate))\n    ) {\n      await rejectResponse(response.id, config, true);\n\n      if (__ACI_DEV__) {\n        axios.debug({\n          id: response.id,\n          msg: 'Cache predicate rejected this response'\n        });\n      }\n\n      return response;\n    }\n\n    // Avoid remnant headers from remote server to break implementation\n    for (const header of Object.keys(response.headers)) {\n      if (header.startsWith('x-axios-cache')) {\n        delete response.headers[header];\n      }\n    }\n\n    if (cacheConfig.etag && cacheConfig.etag !== true) {\n      response.headers[Header.XAxiosCacheEtag] = cacheConfig.etag;\n    }\n\n    if (cacheConfig.modifiedSince) {\n      response.headers[Header.XAxiosCacheLastModified] =\n        cacheConfig.modifiedSince === true\n          ? 'use-cache-timestamp'\n          : cacheConfig.modifiedSince.toUTCString();\n    }\n\n    let ttl = cacheConfig.ttl || -1; // always set from global config\n    let staleTtl: number | undefined;\n\n    if (cacheConfig.interpretHeader) {\n      const expirationTime = axios.headerInterpreter(response.headers, axios.location);\n\n      // Cache should not be used\n      if (expirationTime === 'dont cache') {\n        await rejectResponse(response.id, config, true);\n\n        if (__ACI_DEV__) {\n          axios.debug({\n            id: response.id,\n            msg: `Cache header interpreted as 'dont cache'`,\n            data: { cache, response, expirationTime }\n          });\n        }\n\n        return response;\n      }\n\n      if (expirationTime !== 'not enough headers') {\n        if (typeof expirationTime === 'number') {\n          ttl = expirationTime;\n        } else {\n          ttl = expirationTime.cache;\n          staleTtl = expirationTime.stale;\n        }\n      }\n    }\n\n    const data = createCacheResponse(response, cache.data);\n\n    if (typeof ttl === 'function') {\n      ttl = await ttl(response);\n    }\n\n    if (cacheConfig.staleIfError) {\n      response.headers[Header.XAxiosCacheStaleIfError] = String(ttl);\n    }\n\n    if (__ACI_DEV__) {\n      axios.debug({\n        id: response.id,\n        msg: 'Useful response configuration found',\n        data: { cacheConfig, cacheResponse: data }\n      });\n    }\n\n    const newCache: CachedStorageValue = {\n      state: 'cached',\n      ttl,\n      staleTtl,\n      createdAt: Date.now(),\n      data\n    };\n\n    // Define this key as cache on the storage\n    await axios.storage.set(response.id, newCache, config);\n\n    // Resolve all other requests waiting for this response\n    const waiting = axios.waiting.get(response.id);\n\n    if (waiting) {\n      waiting.resolve();\n      axios.waiting.delete(response.id);\n\n      if (__ACI_DEV__) {\n        axios.debug({\n          id: response.id,\n          msg: 'Found waiting deferred(s) and resolved them'\n        });\n      }\n    }\n\n    if (__ACI_DEV__) {\n      axios.debug({\n        id: response.id,\n        msg: 'Response cached',\n        data: { cache: newCache, response }\n      });\n    }\n\n    // Return the response with cached as false, because it was not cached at all\n    return response;\n  };\n\n  const onRejected: ResponseInterceptor['onRejected'] = async (error) => {\n    // When response.config is not present, the response is indeed a error.\n    if (!error.isAxiosError || !error.config) {\n      if (__ACI_DEV__) {\n        axios.debug({\n          msg: 'FATAL: Received an non axios error in the rejected response interceptor, ignoring.',\n          data: error\n        });\n      }\n\n      // We should probably re-request the response to avoid an infinite loading state here\n      // but, since this is an unknown error, we cannot figure out what request ID to use.\n      // And the only solution is to let the storage actively reject the current loading state.\n      throw error;\n    }\n\n    const config = error.config as CacheRequestConfig & { headers: AxiosResponseHeaders };\n    const id = config.id;\n    const cacheConfig = config.cache as CacheProperties;\n    const response = error.response as CacheAxiosResponse | undefined;\n\n    // config.cache should always exist, at least from global config merge.\n    if (!cacheConfig || !id) {\n      if (__ACI_DEV__) {\n        axios.debug({\n          msg: 'Web request returned an error but cache handling is not enabled',\n          data: { error }\n        });\n      }\n\n      throw error;\n    }\n\n    if (!isMethodIn(config.method, cacheConfig.methods)) {\n      if (__ACI_DEV__) {\n        axios.debug({\n          id,\n          msg: `Ignored because method (${config.method}) is not in cache.methods (${cacheConfig.methods})`,\n          data: { config, cacheConfig }\n        });\n      }\n\n      // Rejects all other requests waiting for this response\n      await rejectResponse(id, config, true);\n\n      throw error;\n    }\n\n    const cache = await axios.storage.get(id, config);\n\n    if (\n      // This will only not be loading if the interceptor broke\n      cache.state !== 'loading' ||\n      cache.previous !== 'stale'\n    ) {\n      if (__ACI_DEV__) {\n        axios.debug({\n          id,\n          msg: 'Caught an error in the request interceptor',\n          data: { cache, error, config }\n        });\n      }\n\n      // Rejects all other requests waiting for this response\n      await rejectResponse(\n        id,\n        config,\n        // Do not clear cache if this request is cached, but the request was cancelled before returning the cached response\n        error.code !== 'ERR_CANCELED' || (error.code === 'ERR_CANCELED' && cache.state !== 'cached')\n      );\n\n      throw error;\n    }\n\n    if (cacheConfig.staleIfError) {\n      const cacheControl = String(response?.headers[Header.CacheControl]);\n      const staleHeader = cacheControl && parse(cacheControl).staleIfError;\n\n      const staleIfError =\n        typeof cacheConfig.staleIfError === 'function'\n          ? await cacheConfig.staleIfError(response, cache, error)\n          : cacheConfig.staleIfError === true && staleHeader\n            ? staleHeader * 1000 //staleIfError is in seconds\n            : cacheConfig.staleIfError;\n\n      if (__ACI_DEV__) {\n        axios.debug({\n          id,\n          msg: 'Found cache if stale config for rejected response',\n          data: { error, config, staleIfError }\n        });\n      }\n\n      if (\n        staleIfError === true ||\n        // staleIfError is the number of seconds that stale is allowed to be used\n        (typeof staleIfError === 'number' && cache.createdAt + staleIfError > Date.now())\n      ) {\n        // re-mark the cache as stale\n        await axios.storage.set(\n          id,\n          {\n            state: 'stale',\n            createdAt: Date.now(),\n            data: cache.data\n          },\n          config\n        );\n        // Resolve all other requests waiting for this response\n        const waiting = axios.waiting.get(id);\n\n        if (waiting) {\n          waiting.resolve();\n          axios.waiting.delete(id);\n\n          if (__ACI_DEV__) {\n            axios.debug({\n              id,\n              msg: 'Found waiting deferred(s) and resolved them'\n            });\n          }\n        }\n\n        if (__ACI_DEV__) {\n          axios.debug({\n            id,\n            msg: 'staleIfError resolved this response with cached data',\n            data: { error, config, cache }\n          });\n        }\n\n        return {\n          cached: true,\n          stale: true,\n          config,\n          id,\n          data: cache.data.data,\n          headers: cache.data.headers,\n          status: cache.data.status,\n          statusText: cache.data.statusText\n        };\n      }\n    }\n\n    if (__ACI_DEV__) {\n      axios.debug({\n        id,\n        msg: 'Received an unknown error that could not be handled',\n        data: { error, config }\n      });\n    }\n\n    // Rejects all other requests waiting for this response\n    await rejectResponse(id, config, true);\n\n    throw error;\n  };\n\n  return {\n    onFulfilled,\n    onRejected\n  };\n}\n","import type { CacheRequestConfig } from '../cache/axios.js';\nimport { Header } from '../header/headers.js';\nimport type { MaybePromise } from '../util/types.js';\nimport type { AxiosStorage, CachedStorageValue, StaleStorageValue, StorageValue } from './types.js';\n\n/** Returns true if the provided object was created from {@link buildStorage} function. */\nexport const isStorage = (obj: unknown): obj is AxiosStorage =>\n  !!obj && !!(obj as Record<string, boolean>)['is-storage'];\n\nfunction hasUniqueIdentifierHeader(value: CachedStorageValue | StaleStorageValue): boolean {\n  const headers = value.data.headers;\n\n  return (\n    Header.ETag in headers ||\n    Header.LastModified in headers ||\n    Header.XAxiosCacheEtag in headers ||\n    Header.XAxiosCacheLastModified in headers\n  );\n}\n\n/** Returns true if value must be revalidated */\nexport function mustRevalidate(value: CachedStorageValue | StaleStorageValue): boolean {\n  // Must revalidate is a special case and should not serve stale values\n  // We could use cache-control's parse function, but this is way faster and simpler\n  return String(value.data.headers[Header.CacheControl]).includes('must-revalidate');\n}\n\n/** Returns true if this has sufficient properties to stale instead of expire. */\nexport function canStale(value: CachedStorageValue): boolean {\n  if (hasUniqueIdentifierHeader(value)) {\n    return true;\n  }\n\n  return (\n    value.state === 'cached' &&\n    value.staleTtl !== undefined &&\n    // Only allow stale values after the ttl is already in the past and the staleTtl is in the future.\n    // In cases that just createdAt + ttl > Date.now(), isn't enough because the staleTtl could be <= 0.\n    // This logic only returns true when Date.now() is between the (createdAt + ttl) and (createdAt + ttl + staleTtl).\n    // Following the example below:\n    // |--createdAt--:--ttl--:---staleTtl--->\n    // [        past        ][now is in here]\n    Math.abs(Date.now() - (value.createdAt + value.ttl)) <= value.staleTtl\n  );\n}\n\n/**\n * Checks if the provided cache is expired. You should also check if the cache\n * {@link canStale} and {@link mayUseStale}\n */\nexport function isExpired(value: CachedStorageValue | StaleStorageValue): boolean {\n  return value.ttl !== undefined && value.createdAt + value.ttl <= Date.now();\n}\n\nexport interface BuildStorage extends Omit<AxiosStorage, 'get'> {\n  /**\n   * Returns the value for the given key. This method does not have to make checks for\n   * cache invalidation or anything. It just returns what was previous saved, if present.\n   *\n   * @param key The key to look for\n   * @param currentRequest The current {@link CacheRequestConfig}, if any\n   * @see https://axios-cache-interceptor.js.org/guide/storages#buildstorage\n   */\n  find: (\n    key: string,\n    currentRequest?: CacheRequestConfig\n  ) => MaybePromise<StorageValue | undefined>;\n}\n\n/**\n * All integrated storages are wrappers around the `buildStorage` function. External\n * libraries use it and if you want to build your own, `buildStorage` is the way to go!\n *\n * The exported `buildStorage` function abstracts the storage interface and requires a\n * super simple object to build the storage.\n *\n * **Note**: You can only create an custom storage with this function.\n *\n * @example\n *\n * ```js\n * const myStorage = buildStorage({\n *   find: () => {...},\n *   set: () => {...},\n *   remove: () => {...},\n *   clear: () => {...}\n * });\n *\n * const axios = setupCache(axios, { storage: myStorage });\n * ```\n *\n * @see https://axios-cache-interceptor.js.org/guide/storages#buildstorage\n */\nexport function buildStorage({ set, find, remove, clear }: BuildStorage): AxiosStorage {\n  return {\n    //@ts-expect-error - we don't want to expose this\n    'is-storage': 1,\n    set,\n    remove,\n    clear,\n    get: async (key, config) => {\n      let value = await find(key, config);\n\n      if (!value) {\n        return { state: 'empty' };\n      }\n\n      if (\n        value.state === 'empty' ||\n        value.state === 'loading' ||\n        value.state === 'must-revalidate'\n      ) {\n        return value;\n      }\n\n      // Handle cached values\n      if (value.state === 'cached') {\n        if (!isExpired(value)) {\n          return value;\n        }\n\n        // Tries to stale expired value\n        if (!canStale(value)) {\n          await remove(key, config);\n          return { state: 'empty' };\n        }\n\n        value = {\n          state: 'stale',\n          createdAt: value.createdAt,\n          data: value.data,\n          ttl: value.staleTtl !== undefined ? value.staleTtl + value.ttl : undefined\n        };\n\n        await set(key, value, config);\n\n        // Must revalidate is a special case and should not serve stale values\n        if (mustRevalidate(value)) {\n          return { ...value, state: 'must-revalidate' };\n        }\n      }\n\n      // A second check in case the new stale value was created already expired.\n      if (!isExpired(value)) {\n        return value;\n      }\n\n      if (hasUniqueIdentifierHeader(value)) {\n        return value;\n      }\n\n      await remove(key, config);\n      return { state: 'empty' };\n    }\n  };\n}\n","import { buildStorage, canStale, isExpired } from './build.js';\nimport type { AxiosStorage, StorageValue } from './types.js';\n\n/* c8 ignore start */\n/**\n * Clones an object using the structured clone algorithm if available, otherwise\n * it uses JSON.parse(JSON.stringify(value)).\n */\nconst clone: <T>(value: T) => T =\n  // https://caniuse.com/mdn-api_structuredclone (10/18/2023 92.51%)\n  typeof structuredClone === 'function'\n    ? structuredClone\n    : (value) => JSON.parse(JSON.stringify(value));\n/* c8 ignore stop */\n\n/**\n * Creates a simple in-memory storage. This means that if you need to persist data between\n * page or server reloads, this will not help.\n *\n * This is the storage used by default.\n *\n * If you need to modify it's data, you can do by the `data` property.\n *\n * @example\n *\n * ```js\n * const memoryStorage = buildMemoryStorage();\n *\n * setupCache(axios, { storage: memoryStorage });\n *\n * // Simple example to force delete the request cache\n *\n * const { id } = axios.get('url');\n *\n * delete memoryStorage.data[id];\n * ```\n *\n * @param {boolean | 'double'} cloneData Use `true` if the data returned by `find()`\n *   should be cloned to avoid mutating the original data outside the `set()` method. Use\n *   `'double'` to also clone before saving value in storage using `set()`. Disabled is\n *   default\n * @param {number | false} cleanupInterval The interval in milliseconds to run a\n *   setInterval job of cleaning old entries. If false, the job will not be created.\n *   Disabled is default\n * @param {number | false} maxEntries The maximum number of entries to keep in the\n *   storage. Its hard to determine the size of the entries, so a smart FIFO order is used\n *   to determine eviction. If false, no check will be done and you may grow up memory\n *   usage. Disabled is default\n */\nexport function buildMemoryStorage(\n  cloneData: boolean | 'double' = false,\n  cleanupInterval: number | false = false,\n  maxEntries: number | false = false\n) {\n  const storage = buildStorage({\n    set: (key, value) => {\n      if (maxEntries) {\n        let keys = Object.keys(storage.data);\n\n        // Tries to cleanup first\n        if (keys.length >= maxEntries) {\n          storage.cleanup();\n\n          // Recalculates the keys\n          keys = Object.keys(storage.data);\n\n          // Keeps deleting until there's space\n          while (keys.length >= maxEntries) {\n            // There's always at least one key here, otherwise it would not be\n            // in the loop.\n\n            delete storage.data[keys.shift()!];\n          }\n        }\n      }\n\n      // Clone the value before storing to prevent future mutations\n      // from affecting cached data.\n      storage.data[key] = cloneData === 'double' ? clone(value) : value;\n    },\n\n    remove: (key) => {\n      delete storage.data[key];\n    },\n\n    find: (key) => {\n      const value = storage.data[key];\n\n      return cloneData && value !== undefined ? clone(value) : value;\n    },\n\n    clear: () => {\n      storage.data = Object.create(null);\n    }\n  }) as MemoryStorage;\n\n  storage.data = Object.create(null) as Record<string, StorageValue>;\n\n  // When this program gets running for more than the specified interval, there's a good\n  // chance of it being a long-running process or at least have a lot of entries. Therefore,\n  // \"faster\" loop is more important than code readability.\n  storage.cleanup = () => {\n    const keys = Object.keys(storage.data);\n\n    let i = -1;\n    let value: StorageValue;\n    let key: string;\n\n    // Looping forward, as older entries are more likely to be expired\n    // than newer ones.\n    while (++i < keys.length) {\n      key = keys[i]!;\n      value = storage.data[key]!;\n\n      if (value.state === 'empty') {\n        storage.remove(key);\n        continue;\n      }\n\n      // If the value is expired and can't be stale, remove it\n      if (value.state === 'cached' && isExpired(value) && !canStale(value)) {\n        // this storage returns void.\n\n        storage.remove(key);\n      }\n    }\n  };\n\n  if (cleanupInterval) {\n    storage.cleaner = setInterval(storage.cleanup, cleanupInterval);\n  }\n\n  return storage;\n}\n\nexport interface MemoryStorage extends AxiosStorage {\n  data: Record<string, StorageValue>;\n  /** The job responsible to cleaning old entries */\n  cleaner: ReturnType<typeof setInterval>;\n  /** Tries to remove any invalid entry from the memory */\n  cleanup: () => void;\n}\n","import type { Method } from 'axios';\nimport { hash } from 'object-code';\nimport type { CacheRequestConfig } from '../cache/axios.js';\nimport type { KeyGenerator } from './types.js';\n\n// Remove first and last '/' char, if present\nconst SLASHES_REGEX = /^\\/|\\/$/g;\n\n/**\n * Builds an generator that receives a {@link CacheRequestConfig} and returns a value\n * hashed by {@link hash}.\n *\n * The value is hashed into a signed integer when the returned value from the provided\n * generator is not a `string` or a `number`.\n *\n * You can return any type of data structure.\n *\n * @example\n *\n * ```js\n * // This generator will return a hash code.\n * // The code will only be the same if url, method and data are the same.\n * const generator = buildKeyGenerator(({ url, method, data }) => ({\n *   url,\n *   method,\n *   data\n * }));\n * ```\n */\nexport function buildKeyGenerator<R = unknown, D = unknown>(\n  generator: (request: CacheRequestConfig<R, D>) => unknown\n): KeyGenerator<R, D> {\n  return (request) => {\n    if (request.id) {\n      return request.id;\n    }\n\n    const key = generator(request);\n\n    if (typeof key === 'string' || typeof key === 'number') {\n      return `${key}`;\n    }\n\n    return `${hash(key)}`;\n  };\n}\n\nexport const defaultKeyGenerator = buildKeyGenerator(({ baseURL, url, method, params, data }) => {\n  // Remove trailing slashes to avoid generating different keys for the \"same\" final url.\n  if (baseURL !== undefined) {\n    baseURL = baseURL.replace(SLASHES_REGEX, '');\n  } else {\n    // just to have a consistent hash\n    baseURL = '';\n  }\n\n  if (url !== undefined) {\n    url = url.replace(SLASHES_REGEX, '');\n  } else {\n    // just to have a consistent hash\n    url = '';\n  }\n\n  if (method !== undefined) {\n    method = method.toLowerCase() as Method;\n  } else {\n    // just to have a consistent hash\n    method = 'get';\n  }\n\n  return {\n    url: baseURL + (baseURL && url ? '/' : '') + url,\n    params: params,\n    method: method,\n    data: data\n  };\n});\n","import { buildStorage, canStale, isExpired } from './build.js';\nimport type { StorageValue } from './types.js';\n\n/**\n * Creates a simple storage. You can persist his data by using `sessionStorage` or\n * `localStorage` with it.\n *\n * **ImplNote**: Without polyfill, this storage only works on browser environments.\n *\n * @example\n *\n * ```js\n * const fromLocalStorage = buildWebStorage(localStorage);\n * const fromSessionStorage = buildWebStorage(sessionStorage);\n *\n * const myStorage = new Storage();\n * const fromMyStorage = buildWebStorage(myStorage);\n * ```\n *\n * @param storage The type of web storage to use. localStorage or sessionStorage.\n * @param prefix The prefix to index the storage. Useful to prevent collision between\n *   multiple places using the same storage.\n */\nexport function buildWebStorage(storage: Storage, prefix = 'axios-cache-') {\n  return buildStorage({\n    clear: () => {\n      for (const key in storage) {\n        if (key.startsWith(prefix)) {\n          storage.removeItem(key);\n        }\n      }\n    },\n\n    find: (key) => {\n      const json = storage.getItem(prefix + key);\n      return json ? (JSON.parse(json) as StorageValue) : undefined;\n    },\n\n    remove: (key) => {\n      storage.removeItem(prefix + key);\n    },\n\n    set: (key, value) => {\n      const save = () => storage.setItem(prefix + key, JSON.stringify(value));\n\n      try {\n        return save();\n      } catch (error) {\n        const allValues: [string, StorageValue][] = Object.entries(\n          storage as Record<string, string>\n        )\n          .filter((item) => item[0].startsWith(prefix))\n          .map((item) => [item[0], JSON.parse(item[1]) as StorageValue]);\n\n        // Remove all expired values\n        for (const value of allValues) {\n          if (value[1].state === 'cached' && isExpired(value[1]) && !canStale(value[1])) {\n            storage.removeItem(value[0]);\n          }\n        }\n\n        // Try save again after removing expired values\n        try {\n          return save();\n        } catch {\n          // Storage still full, try removing the oldest value until it can be saved\n\n          // Descending sort by createdAt\n          const sortedItems = allValues.sort(\n            (a, b) => (a[1].createdAt || 0) - (b[1].createdAt || 0)\n          );\n\n          for (const item of sortedItems) {\n            storage.removeItem(item[0]);\n\n            try {\n              return save();\n            } catch {\n              // This key didn't free all the required space\n            }\n          }\n        }\n\n        // Clear the cache for the specified key\n        storage.removeItem(prefix + key);\n      }\n    }\n  });\n}\n","import type { AxiosInstance } from 'axios';\nimport { defaultHeaderInterpreter } from '../header/interpreter.js';\nimport { defaultRequestInterceptor } from '../interceptors/request.js';\nimport { defaultResponseInterceptor } from '../interceptors/response.js';\nimport { isStorage } from '../storage/build.js';\nimport { buildMemoryStorage } from '../storage/memory.js';\nimport { defaultKeyGenerator } from '../util/key-generator.js';\nimport type { AxiosCacheInstance } from './axios.js';\nimport type { CacheInstance, CacheProperties } from './cache.js';\n\nexport interface CacheOptions extends Partial<CacheInstance>, Partial<CacheProperties> {}\n\n/**\n * Apply the caching interceptors for a already created axios instance.\n *\n * ```ts\n * const axios = setupCache(axios, OPTIONS);\n * ```\n *\n * The `setupCache` function receives global options and all [request\n * specifics](https://axios-cache-interceptor.js.org/config/request-specifics) ones too.\n * This way, you can customize the defaults for all requests.\n *\n * @param axios The already created axios instance\n * @param config The config for the caching interceptors\n * @returns The same instance with extended typescript types.\n * @see https://axios-cache-interceptor.js.org/config\n */\nexport function setupCache(axios: AxiosInstance, options: CacheOptions = {}): AxiosCacheInstance {\n  const axiosCache = axios as AxiosCacheInstance;\n\n  if (axiosCache.defaults.cache) {\n    throw new Error('setupCache() should be called only once');\n  }\n\n  axiosCache.location = typeof window === 'undefined' ? 'server' : 'client';\n\n  axiosCache.storage = options.storage || buildMemoryStorage();\n\n  if (!isStorage(axiosCache.storage)) {\n    throw new Error('Use buildStorage() function');\n  }\n\n  axiosCache.waiting = options.waiting || new Map();\n\n  axiosCache.generateKey = options.generateKey || defaultKeyGenerator;\n\n  axiosCache.headerInterpreter = options.headerInterpreter || defaultHeaderInterpreter;\n\n  axiosCache.requestInterceptor =\n    options.requestInterceptor || defaultRequestInterceptor(axiosCache);\n\n  axiosCache.responseInterceptor =\n    options.responseInterceptor || defaultResponseInterceptor(axiosCache);\n\n  axiosCache.debug = options.debug || function noop() {};\n\n  // CacheRequestConfig values\n  axiosCache.defaults.cache = {\n    update: options.update || {},\n\n    ttl: options.ttl ?? 1000 * 60 * 5,\n\n    // Although RFC 7231 also marks POST as cacheable, most users don't know that\n    // and may have problems about why their \"create X\" route not working.\n    methods: options.methods || ['get', 'head'],\n\n    cachePredicate: options.cachePredicate || {\n      // All cacheable status codes defined in RFC 7231\n      statusCheck: (status) => [200, 203, 300, 301, 302, 404, 405, 410, 414, 501].includes(status)\n    },\n\n    etag: options.etag ?? true,\n\n    // This option is going to be ignored by servers when ETag is enabled\n    // Checks strict equality to false to avoid undefined-ish values\n    modifiedSince: options.modifiedSince ?? options.etag === false,\n\n    interpretHeader: options.interpretHeader ?? true,\n\n    cacheTakeover: options.cacheTakeover ?? true,\n\n    staleIfError: options.staleIfError ?? true,\n\n    override: options.override ?? false,\n\n    hydrate: options.hydrate ?? undefined\n  };\n\n  // Apply interceptors\n  axiosCache.interceptors.request.use(\n    axiosCache.requestInterceptor.onFulfilled,\n    axiosCache.requestInterceptor.onRejected\n  );\n  axiosCache.interceptors.response.use(\n    axiosCache.responseInterceptor.onFulfilled,\n    axiosCache.responseInterceptor.onRejected\n  );\n\n  return axiosCache;\n}\n"],"names":["Header","Object","freeze","IfModifiedSince","LastModified","IfNoneMatch","CacheControl","Pragma","ETag","Expires","Age","XAxiosCacheEtag","XAxiosCacheLastModified","XAxiosCacheStaleIfError","defaultHeaderInterpreter","headers","location","cacheControl","cc","parse","String","noCache","noStore","immutable","cache","undefined","maxAge","age","Number","stale","maxStale","staleWhileRevalidate","expires","milliseconds","Date","now","createValidateStatus","oldValidate","status","isMethodIn","requestMethod","methodList","toLowerCase","some","method","updateStaleRequest","config","_config$cache","etag","modifiedSince","_cache$data","etagValue","data","createdAt","toUTCString","createCacheResponse","response","previousCache","cached","statusText","_extends","defaultRequestInterceptor","axios","onFulfilled","id","generateKey","Promise","resolve","defaults","cachePredicate","ignoreUrls","url","_iterator","_step","_createForOfIteratorHelperLoose","done","value","RegExp","lastIndex","test","includes","_config$headers","_Header$CacheControl","_config$headers2","_Header$Pragma","_config$headers3","_Header$Expires","cacheTakeover","_config$headers$_Head","methods","storage","get","then","_exit","_temp14","_result2","_exit2","cachedResponse","_temp12","_result5","transformResponse","adapter","previous","_temp11","state","_temp10","_result3","deferred","_onFulfilled","_catch","err","_temp8","_onFulfilled2","_temp7","hydrate","waiting","_temp9","_temp6","_temp5","overrideCache","override","_temp13","_temp4","def","set","_temp2","validateStatus","_temp","_temp3","has","_axios$storage$get","e","reject","_Pact","prototype","onRejected","result","callback","_settle","this","v","o","_this","testCachePredicate","predicate","_statusCheck","_responseMatch","_exit3","statusCheck","responseMatch","containsHeaders","_forOf","entries","_ref","_response$headers$hea","header","_predicate","s","updateCache","cacheUpdater","cacheKey","updater","newValue","remove","defaultResponseInterceptor","rejectResponse","responseId","clearCache","_response$cached","cacheConfig","_testCachePredicate","_result","staleIfError","ttl","newCache","staleTtl","_ttl","_i","_Object$keys","keys","length","startsWith","interpretHeader","expirationTime","headerInterpreter","update","error","_temp21","_result4","_temp19","_exit6","_temp17","_result6","_temp16","_temp15","staleHeader","_temp18","code","isAxiosError","_temp20","isStorage","obj","hasUniqueIdentifierHeader","mustRevalidate","canStale","Math","abs","isExpired","buildStorage","find","clear","key","_value$state","clone","structuredClone","JSON","stringify","buildMemoryStorage","cloneData","cleanupInterval","maxEntries","cleanup","shift","create","i","cleaner","setInterval","SLASHES_REGEX","buildKeyGenerator","generator","request","hash","defaultKeyGenerator","baseURL","params","replace","prefix","removeItem","json","getItem","save","setItem","allValues","filter","item","map","_unused","_step2","_iterator2","sort","a","b","_unused2","options","_options$ttl","_options$etag","_options$modifiedSinc","_options$interpretHea","_options$cacheTakeove","_options$staleIfError","_options$override","_options$hydrate","axiosCache","Error","window","Map","requestInterceptor","responseInterceptor","debug","interceptors","use"],"mappings":"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"}