
  /*.pipe(
      through.obj(async (file: extendedVinyl, encoding, next) => {
        const filepath = file.path;
        const self = this;
        log = [logname, filepath];
        // exclude
        if (file.isNull() || file.isStream() || file.extname != '.md' || filepath.match(/(readme|changelog|contribute).md$/gi)) {
          log.push(chalk.red('excluded'));
          console.log(...log);
          next();
          return;
        }

        const parse = parsePost(file.contents.toString(encoding));
        if (!parse) {
          log.push(chalk.red('fail parse'));
          console.log(...log);
          next();
          return;
        }
        //parse.fileTree = {
        //  source: replacePath(toUnix(filepath.toString()), '/source/_posts/', '/src-posts/'),
        //  public: replacePath(toUnix(filepath.toString()), '/src-posts/', '/source/_posts/'),
        //};
        //const modify = modifyPost(parse);

        // skip error modification
        //if (modify.error) {
        //  log.push(chalk.red('fail modify'));
        //  console.log(...log);
        //  return next();
        //}

        // reparse
        //parse = parsePost(modify.content);

        // render markdown to html
        parse.body = renderBodyMarkdown(parse);

        // set permalink
        page_url.pathname = toUnix(filepath)
          .replaceArr([post_public_dir, join(cwd(), 'source')], '')
          .replace(/.md$/, '.html');
        const permalink = page_url.toString();

        // push to sitemap
        sitemap.push(permalink);

        // ejs render preparation
        const ejs_opt: DynamicObject = Object.assign(parse.metadata, parse);
        ejs_opt.content = parse.body; // html rendered markdown
        ejs_opt.url = permalink; // permalink
        const ejs_data = { page: ejs_opt, config: config, root: theme_dir, theme: theme_config };
        //const rendered = ejs_object.render(readFileSync(layout, 'utf-8'), ejs_data);
        return ejs_object
          .renderFile(layout, ejs_data)
          .then((rendered) => {
            // emit changes
            file.contents = Buffer.from(rendered);
            if (self) self.push(file);
            console.log(...log, chalk.green('success'));
            next(null, file);
          })
          .catch((e) => {
            console.log(...log, chalk.red('fail render ejs'));
            next();
          });
      })
    )
    .pipe(
      through.obj((file, enc, next) => {
        // remove source/ & /_posts from path
        file.dirname = file.dirname.replace('/_posts/', '/').replace('/source/', '/');

        // change extension to .html
        file.extname = '.html';
      })
    )
    .pipe(gulpDebugSrc());*/
  //.pipe(gulp.dest(generated_dir))
  //.on('end', () => console.log(logname + chalk.magentaBright('[grab]'), chalk.green('finish')))