<?xml version="1.0"?>
<rss version="2.0">
    <channel>
        <title>Website Management Indonesia • Posts by &#34;life skill&#34; tag</title>
        <link>https://www.webmanajemen.com</link>
        <description>External source WMI Github Laboratory</description>
        <language>en</language>
        <pubDate>Sat, 18 Sep 2021 17:00:00 +0000</pubDate>
        <lastBuildDate>Sat, 18 Sep 2021 17:00:00 +0000</lastBuildDate>
        <category>RegExp</category>
        <category>Test</category>
        <category>Game Control</category>
        <category>Macros</category>
        <category>Life Skill</category>
        <category>Auto Click</category>
        <category>Event</category>
        <category>Wordpress</category>
        <category>Blogger</category>
        <category>Blogging</category>
        <category>CSS</category>
        <category>SEO</category>
        <category>Adsense</category>
        <category>JS</category>
        <category>PHP</category>
        <category>HTML</category>
        <category>AMP</category>
        <category>Facebook</category>
        <category>Social Media</category>
        <category>Android</category>
        <category>Script</category>
        <category>Tools</category>
        <category>Tips &amp; Tricks</category>
        <category>CodeIgniter</category>
        <category>Miscellaneous</category>
        <category>Linux/Unix</category>
        <category>Marketing Strategies</category>
        <category>VainGlory</category>
        <category>Hosting</category>
        <category>Games</category>
        <category>Durango</category>
        <category>Software</category>
        <category>Movies</category>
        <category>Musics</category>
        <category>Popular</category>
        <category>Fonts</category>
        <category>Share</category>
        <category>Proxy</category>
        <category>Java</category>
        <category>Gradle</category>
        <category>Kotlin</category>
        <category>Github</category>
        <category>TS</category>
        <category>Windows</category>
        <category>Genshin Impact</category>
        <category>Chest Location</category>
        <category>Quest</category>
        <item>
            <guid isPermalink="true">https://www.webmanajemen.com/The%20Legend%20Of%20Neverland/Fishing.html</guid>
            <title>Auto Fishing</title>
            <link>https://www.webmanajemen.com/The%20Legend%20Of%20Neverland/Fishing.html</link>
            <category>Macros</category>
            <category>Life Skill</category>
            <pubDate>Sat, 18 Sep 2021 17:00:00 +0000</pubDate>
            <description><![CDATA[ &lt;p&gt;Fishing in the legend of neverland is an important activity to collect fish and then sell them and get ‘water essences’. Water Essences are used to buy ingredients in the &lt;code&gt;cooking shop&lt;/code&gt;. You can see the recipe at &lt;a href=&#34;/The%20Legend%20Of%20Neverland/Recipes.html&#34;&gt;Cooking Recipes&lt;/a&gt;.&lt;br /&gt;
You can cook buffs for your character or make dishes to increase the level of &lt;code&gt;Fairies&lt;/code&gt; you have.&lt;br /&gt;
This time you can auto-fish using &lt;code&gt;bluestacks&lt;/code&gt; and &lt;code&gt;macros&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/12471057/133905459-d00d586f-0b2e-4a43-abb9-cb726940bf3d.png&#34; alt=&#34;Fishing the legend of neverland&#34; /&gt;&lt;/p&gt;
&lt;h2 id=&#34;calculating-the-fishing-actions&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#calculating-the-fishing-actions&#34;&gt;&lt;/a&gt; Calculating the fishing actions&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;span&gt;1 bottle = 300 staminas&lt;/span&gt; &amp;divide; 5/action &amp;rarr; &lt;span&gt;
      &lt;script&gt;
        document.write(300 / 5);
      &lt;/script&gt; actions
    &lt;/span&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;span&gt;1 fishing = &amp;plusmn;7-8 secs (we take 7 secs)&lt;/span&gt;&lt;/li&gt;
  &lt;li&gt;&lt;span&gt;7 x 60 actions &amp;erarr; &lt;script&gt;
        document.write(7 * 60)
      &lt;/script&gt; seconds &amp;divide; 60 secs (1 min)&lt;/span&gt; = &lt;span&gt;
      &lt;script&gt;
        document.write(420 / 60)
      &lt;/script&gt; minutes
    &lt;/span&gt; &lt;span&gt;to finish 1 stamina bottle&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;configuration&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#configuration&#34;&gt;&lt;/a&gt; Configuration&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;First of all, make sure the position of the stamina bottle in your inventory/bag is in the second slot&lt;br /&gt;
&lt;img src=&#34;https://user-images.githubusercontent.com/12471057/133907462-bf07b4c7-10f2-46ce-ba61-076af0357232.png&#34; alt=&#34;image&#34; /&gt;&lt;/li&gt;
&lt;li&gt;set &lt;code&gt;repeat actions&lt;/code&gt; with the total stamina bottle you have, or my recommendation is to subtract a little from the total stamina bottle you have. for example you have 55 bottles, set just 50 repeat actions, this to prevent other items to be used unexpectedly/unintentionally.&lt;br /&gt;
&lt;img src=&#34;https://user-images.githubusercontent.com/12471057/133907408-c3505025-1e78-4353-bdc0-1c6e7672d742.png&#34; alt=&#34;Setup total stamina bottles as repeat action&#34; /&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;how-to-download-script&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#how-to-download-script&#34;&gt;&lt;/a&gt; How to download script&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;/The%20Legend%20Of%20Neverland/Macros.html&#34;&gt;Read Here&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;auto-fishing-script&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#auto-fishing-script&#34;&gt;&lt;/a&gt; Auto fishing script&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;/The%20Legend%20Of%20Neverland/Macros/Auto%20Fishing%20%26%20Stamina.json&#34;&gt;Download Macros Auto Fishing&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;how-to-import-script&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#how-to-import-script&#34;&gt;&lt;/a&gt; How to import script ?&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;/The%20Legend%20Of%20Neverland/Macros.html&#34;&gt;Read Here&lt;/a&gt;&lt;/p&gt;
&lt;div id=&#34;hexo-adsense-hidden&#34; style=&#34;display:none&#34;&gt;&lt;div hexo-adsense=&#34;ads-content&#34;&gt;
&lt;ins class=&#34;adsbygoogle&#34;
     style=&#34;display:block; text-align:center;&#34;
     data-ad-layout=&#34;in-article&#34;
     data-ad-format=&#34;fluid&#34;
     data-ad-client=&#34;ca-pub-1165447249910969&#34;
     data-ad-slot=&#34;8418182273&#34;&gt;&lt;/ins&gt;
&lt;script&gt;
     
&lt;/script&gt;
&lt;/div&gt;&lt;div hexo-adsense=&#34;ads-content&#34;&gt;
&lt;ins class=&#34;adsbygoogle&#34;
     style=&#34;display:block; text-align:center;&#34;
     data-ad-layout=&#34;in-article&#34;
     data-ad-format=&#34;fluid&#34;
     data-ad-client=&#34;ca-pub-1165447249910969&#34;
     data-ad-slot=&#34;7823254087&#34;&gt;&lt;/ins&gt;
&lt;script&gt;
     
&lt;/script&gt;
&lt;/div&gt;&lt;/div&gt;&lt;style&gt;*[hexo-adsense=&#34;ads-content&#34;] {
  display: block;
  background: #fff url(//i.imgur.com/mBbv90p.png) no-repeat top right;
  color: #303030;
  /*min-height: 18px;
  min-width: 81px;*/
  min-width: 250px;
  text-align: center;
  margin-left: auto;
  margin-right: auto;
}
&lt;/style&gt;&lt;script&gt;/**
 * Browser processor
 */

const isBrowser = new Function(&#34;try {return this===window;}catch(e){ return false;}&#34;);

/**
 * @type {import(&#34;../lib/config&#34;)}
 */
const hexoAdsenseConfig = JSON.parse(document.getElementById(&#34;hexo-adsense-config&#34;).textContent);
//console.log(hexoAdsenseConfig);

/**
 * Insert after element
 * @param {HTMLElement} newElement
 * @param {HTMLElement} oldElement
 */
function insertAfter(newElement, oldElement) {
  if (oldElement &amp;&amp; newElement) {
    let parent = oldElement.parentNode;
    if (parent.lastChild == oldElement) {
      parent.appendChild(newElement);
    } else {
      parent.insertBefore(newElement, oldElement.nextSibling);
    }
  } else {
    console.error(&#34;cannot insert element&#34;);
  }
}

/**
 * Replace elements with new
 * @param {HTMLElement} newElement
 * @param {HTMLElement} oldElement
 */
function replaceWith(newElement, oldElement) {
  if (!oldElement.parentNode) {
    console.log(oldElement, &#34;parent null&#34;);
    let d = document.createElement(&#34;div&#34;);
    d.appendChild(oldElement);
  } else {
    //console.log(oldElement.parentNode.tagName);
    oldElement.parentNode.replaceChild(newElement, oldElement);
  }
  /*
  try {
    oldElement.parentNode.replaceChild(newElement, oldElement);
  } catch (e) {}
  */
}

let createElementFromHTML = function (htmlString) {
  if (htmlString instanceof HTMLElement) {
    return htmlString;
  }
  var div = document.createElement(&#34;div&#34;);
  div.innerHTML = htmlString.trim();

  // Change this to div.childNodes to support multiple top-level nodes
  return div.firstChild;
};

function oldMethod() {
  let article = document.getElementsByTagName(&#34;article&#34;);
  let adscont = document.getElementById(&#34;hexo-adsense-ads-content&#34;);
  if (adscont &amp;&amp; adscont.length) {
    if (article &amp;&amp; article.length) {
      let linebreak = article.item(0).getElementsByTagName(&#34;br&#34;);
      if (linebreak.length &gt; 0) {
        return replaceWith(adscont, linebreak.item(0));
      }

      let headings = article.item(0).querySelectorAll(&#34;h2,h3,h4,h5&#34;);
      if (headings &amp;&amp; headings.length &gt; 0) {
        return insertAfter(adscont, headings.item(0));
      }
    }
  }
}

/**
 * random number between min and max
 */
function ranumb(min, max) {
  // min and max included
  return Math.floor(Math.random() * (max - min + 1) + min);
}

function newMethod() {
  const adshide = document.getElementById(&#34;hexo-adsense-hidden&#34;);
  let adscont = adshide.querySelectorAll(&#39;[hexo-adsense=&#34;ads-content&#34;]&#39;);
  const article = document.querySelectorAll(&#34;article&#34;);
  if (article.length &gt; 0 &amp;&amp; adscont.length &gt; 0) {
    /**
     * @type {HTMLElement}
     */
    let ads;
    if (article.length == 1) {
      console.log(&#34;webpage is post&#34;);
      let targetArticle = article.item(0);

      // prioritize hexo-adsense-fill before auto ads on other elements
      const ads_fill = targetArticle.querySelectorAll(&#34;*[hexo-adsense-fill]&#34;);
      if (ads_fill.length &gt; 0) {
        for (let index = 0; index &lt; ads_fill.length; index++) {
          const toFill = ads_fill[index];
          if (typeof adscont[index] !== &#34;undefined&#34;) {
            toFill.appendChild(adscont[index]);
          }
        }
      }

      // the rest of the ads will show automatically after headers elements
      adscont = adshide.querySelectorAll(&#39;[hexo-adsense=&#34;ads-content&#34;]&#39;);
      //console.log(adscont.length, &#34;ads left&#34;);
      if (adscont.length &gt; 0) {
        const headers = targetArticle.querySelectorAll(&#34;h1,h2,h3,h4,h5,h6&#34;);
        if (headers.length &gt; 0) {
          // generate index of headers
          let headers_index = Array.apply(null, { length: headers.length }).map(Number.call, Number);
          //console.log(headers_index);
          for (let index = 0; index &lt; adscont.length; index++) {
            ads = adscont[index];
            const rheaders = shuffleArr2(headers_index);
            // pick a random index
            const rheader = rheaders.next().value;
            if (typeof rheader === &#34;number&#34;) {
              const header = headers.item(rheader);
              insertAfter(createElementFromHTML(ads), header);
            }
          }
        }
      }

      // the rest of the ads will show automatically to linebreak elements
      adscont = adshide.querySelectorAll(&#39;[hexo-adsense=&#34;ads-content&#34;]&#39;);
      if (adscont.length &gt; 0) {
        const linebreaks = targetArticle.querySelectorAll(&#34;br,hr&#34;);
        if (linebreaks.length &gt; 0) {
          // generate index of linebreaks
          let linebreaks_index = Array.apply(null, { length: linebreaks.length }).map(Number.call, Number);
          //console.log(linebreaks_index);
          // randomize linebreaks index
          const rlinebreaks = shuffleArr2(linebreaks_index);
          for (let index = 0; index &lt; adscont.length; index++) {
            ads = adscont[index];
            // pick a random index
            const rlinebreak = rlinebreaks.next().value;
            if (typeof rlinebreak == &#34;number&#34;) {
              const linebreak = linebreaks.item(rlinebreak);
              if ([&#34;blockquote&#34;, &#34;img&#34;, &#34;a&#34;].includes(linebreak.parentNode.tagName.toLowerCase())) {
                index--;
                continue;
              }
              //console.log(linebreak.tagName);
              replaceWith(createElementFromHTML(ads), linebreak);
            }
          }
        }
      }
    } else {
      console.log(&#34;webpage is not post&#34;);
      // generate index of articles
      let articles_index = Array.apply(null, { length: article.length }).map(Number.call, Number);
      // randomize linebreaks index
      const rArticles = shuffleArr2(articles_index);
      for (let index = 0; index &lt; adscont.length; index++) {
        ads = adscont[index];
        // pick a random index
        const rArticle = rArticles.next().value;
        if (typeof rArticle == &#34;number&#34;) {
          //console.log(&#34;adsense display to article index&#34;, rArticle);
          const pickArticle = article.item(rArticle);
          pickArticle.appendChild(createElementFromHTML(ads));
        }
      }
    }

    // summon adsbygoogle.push()
    adsensePush();
  }
}

function eventMethod() {
  document.addEventListener(&#34;DOMContentLoaded&#34;, function () {
    // we look for the jump break
    var _moreElm = document.querySelector(&#34;a[name=more]&#34;);

    // here is your adsense code
    var _adsenseCode = &#34; [replace this with code from the last step] &#34;;

    // This inserts the ad inside of the blog post
    _moreElm.insertAdjacentHTML(&#34;afterend&#34;, &#39;&lt;div class=&#34;adsense-after-break&#34;&gt;&#39; + _adsenseCode + &#34;&lt;/div&gt;&#34;);

    // Initialize the ads here
    (adsbygoogle = window.adsbygoogle || []).push({});
  });
}

/**
 * Shuffle Array
 * @param {any[]} array
 * @see {@link https://stackoverflow.com/a/18806417}
 * @returns
 */
function shuffleArr(array) {
  var i = array.length,
    j = 0,
    temp;

  while (i--) {
    j = Math.floor(Math.random() * (i + 1));

    // swap randomly chosen element with current element
    temp = array[i];
    array[i] = array[j];
    array[j] = temp;
  }

  return array;
}

/**
 * Next generation of non-repeated randomizer
 * @see {@link shuffleArr}
 * @param {any[]} array
 */
function* shuffleArr2(array) {
  var i = array.length;

  while (i--) {
    yield array.splice(Math.floor(Math.random() * (i + 1)), 1)[0];
  }
}

function adsensePush() {
  for (let index = 0; index &lt; document.querySelectorAll(&#39;[hexo-adsense=&#34;ads-content&#34;]&#39;).length; index++) {
    (adsbygoogle = window.adsbygoogle || []).push({
      google_ad_client: hexoAdsenseConfig.pub,
    });
  }
}

if (!isBrowser()) {
  module.exports = {
    replaceWith,
    insertAfter,
  };
} else {
  window.__tcfapi = (command, parameter, callback) =&gt; {
    if (command === &#34;checkConsent&#34;) {
      callback(true);
    }
    if (command === &#34;addEventListener&#34;) {
      callback({ eventStatus: &#34;tcloaded&#34;, gdprApplies: false }, true);
    }
  };

  if (typeof document.addEventListener == &#34;function&#34;) {
    document.addEventListener(&#34;DOMContentLoaded&#34;, newMethod);
  } else if (typeof window.attachEvent == &#34;function&#34;) {
    window.attachEvent(&#34;onload&#34;, newMethod);
  } else {
    window.onload = newMethod;
  }
}
&lt;/script&gt; ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://www.webmanajemen.com/The%20Legend%20Of%20Neverland/Midi.html</guid>
            <title>Midi</title>
            <link>https://www.webmanajemen.com/The%20Legend%20Of%20Neverland/Midi.html</link>
            <category>Life Skill</category>
            <pubDate>Fri, 20 Aug 2021 17:00:00 +0000</pubDate>
            <description><![CDATA[ &lt;h3 id=&#34;npcs-favorite-musical-instrument&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#npcs-favorite-musical-instrument&#34;&gt;&lt;/a&gt; NPC’s favorite musical instrument&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;Did you know that playing music with certain instruments to the npc who gave you the quest “Music Performance Request” will give you better rewards, such as ff seeds, cabala, etc.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;NPC Name&lt;/th&gt;
&lt;th&gt;NPC Location&lt;/th&gt;
&lt;th&gt;musical instrument&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Colin&lt;/td&gt;
&lt;td&gt;Sophila&lt;/td&gt;
&lt;td&gt;Flute&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Maggie&lt;/td&gt;
&lt;td&gt;Oak Town&lt;/td&gt;
&lt;td&gt;Piano&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Guard&lt;/td&gt;
&lt;td&gt;Sophila&lt;/td&gt;
&lt;td&gt;Drum&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Anna&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;Violin&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Freya&lt;/td&gt;
&lt;td&gt;Sophila&lt;/td&gt;
&lt;td&gt;Guitar&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;list-best-midi-hold-tapright-click-to-copy&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#list-best-midi-hold-tapright-click-to-copy&#34;&gt;&lt;/a&gt; List Best Midi (Hold tap/Right click to copy)&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Title&lt;/th&gt;
&lt;th&gt;Link&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Deep purple - soldier of fortune&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://bitmidi.com/uploads/38563.mid&#34;&gt;https://bitmidi.com/uploads/38563.mid&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Deep purple - soldier of fortune [2]&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://bitmidi.com/uploads/38560.mid&#34;&gt;https://bitmidi.com/uploads/38560.mid&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Only The Lonely&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://bitmidi.com/uploads/112561.mid&#34;&gt;https://bitmidi.com/uploads/112561.mid&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Final Fantasy VII (Battle Theme)&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://bitmidi.com/uploads/46430.mid&#34;&gt;https://bitmidi.com/uploads/46430.mid&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Queen - Bohemian Rhapsody&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://bitmidi.com/uploads/87216.mid&#34;&gt;https://bitmidi.com/uploads/87216.mid&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Janis Joplin - Me and Bobby McGee&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://bitmidi.com/uploads/62322.mid&#34;&gt;https://bitmidi.com/uploads/62322.mid&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Clout - Save me&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://bitmidi.com/uploads/24659.mid&#34;&gt;https://bitmidi.com/uploads/24659.mid&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;TokiMeki&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://bitmidi.com/uploads/24659.mid&#34;&gt;https://bitmidi.com/uploads/24659.mid&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Hatsune Miku&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://bitmidi.com/uploads/55292.mid&#34;&gt;https://bitmidi.com/uploads/55292.mid&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;available-midi-sites&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#available-midi-sites&#34;&gt;&lt;/a&gt; Available Midi Sites&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/dimaslanjaka/dimaslanjaka.github.io/tree/compiler/source/assets/Midi&#34;&gt;https://github.com/dimaslanjaka/dimaslanjaka.github.io/tree/compiler/source/assets/Midi&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.mfiles.co.uk/midi-files.htm&#34;&gt;https://www.mfiles.co.uk/midi-files.htm&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://midisfree.com/&#34;&gt;https://midisfree.com/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.midiworld.com/&#34;&gt;https://www.midiworld.com/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.midishrine.com/&#34;&gt;http://www.midishrine.com/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://midistock.ru/&#34;&gt;https://midistock.ru/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://freemidi.org/topmidi&#34;&gt;https://freemidi.org/topmidi&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://sheet.host/&#34;&gt;https://sheet.host/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.hamienet.com/&#34;&gt;http://www.hamienet.com/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;how-to-create-musicsong-mp3-to-midi&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#how-to-create-musicsong-mp3-to-midi&#34;&gt;&lt;/a&gt; How to create music/song mp3 to midi&lt;/h3&gt;
&lt;div class=&#34;video-container&#34;&gt;&lt;iframe src=&#34;https://www.youtube.com/embed/tik3ZFwFsJA&#34; frameborder=&#34;0&#34; loading=&#34;lazy&#34; allowfullscreen&gt;&lt;/iframe&gt;&lt;/div&gt;
&lt;div class=&#34;video-container&#34;&gt;&lt;iframe src=&#34;https://www.youtube.com/embed/kIXXv8oUqOc&#34; frameborder=&#34;0&#34; loading=&#34;lazy&#34; allowfullscreen&gt;&lt;/iframe&gt;&lt;/div&gt;
&lt;div id=&#34;hexo-adsense-hidden&#34; style=&#34;display:none&#34;&gt;&lt;div hexo-adsense=&#34;ads-content&#34;&gt;
&lt;ins class=&#34;adsbygoogle&#34;
     style=&#34;display:block; text-align:center;&#34;
     data-ad-layout=&#34;in-article&#34;
     data-ad-format=&#34;fluid&#34;
     data-ad-client=&#34;ca-pub-1165447249910969&#34;
     data-ad-slot=&#34;8418182273&#34;&gt;&lt;/ins&gt;
&lt;script&gt;
     
&lt;/script&gt;
&lt;/div&gt;&lt;div hexo-adsense=&#34;ads-content&#34;&gt;
&lt;ins class=&#34;adsbygoogle&#34;
     style=&#34;display:block; text-align:center;&#34;
     data-ad-layout=&#34;in-article&#34;
     data-ad-format=&#34;fluid&#34;
     data-ad-client=&#34;ca-pub-1165447249910969&#34;
     data-ad-slot=&#34;7823254087&#34;&gt;&lt;/ins&gt;
&lt;script&gt;
     
&lt;/script&gt;
&lt;/div&gt;&lt;/div&gt;&lt;style&gt;*[hexo-adsense=&#34;ads-content&#34;] {
  display: block;
  background: #fff url(//i.imgur.com/mBbv90p.png) no-repeat top right;
  color: #303030;
  /*min-height: 18px;
  min-width: 81px;*/
  min-width: 250px;
  text-align: center;
  margin-left: auto;
  margin-right: auto;
}
&lt;/style&gt;&lt;script&gt;/**
 * Browser processor
 */

const isBrowser = new Function(&#34;try {return this===window;}catch(e){ return false;}&#34;);

/**
 * @type {import(&#34;../lib/config&#34;)}
 */
const hexoAdsenseConfig = JSON.parse(document.getElementById(&#34;hexo-adsense-config&#34;).textContent);
//console.log(hexoAdsenseConfig);

/**
 * Insert after element
 * @param {HTMLElement} newElement
 * @param {HTMLElement} oldElement
 */
function insertAfter(newElement, oldElement) {
  if (oldElement &amp;&amp; newElement) {
    let parent = oldElement.parentNode;
    if (parent.lastChild == oldElement) {
      parent.appendChild(newElement);
    } else {
      parent.insertBefore(newElement, oldElement.nextSibling);
    }
  } else {
    console.error(&#34;cannot insert element&#34;);
  }
}

/**
 * Replace elements with new
 * @param {HTMLElement} newElement
 * @param {HTMLElement} oldElement
 */
function replaceWith(newElement, oldElement) {
  if (!oldElement.parentNode) {
    console.log(oldElement, &#34;parent null&#34;);
    let d = document.createElement(&#34;div&#34;);
    d.appendChild(oldElement);
  } else {
    //console.log(oldElement.parentNode.tagName);
    oldElement.parentNode.replaceChild(newElement, oldElement);
  }
  /*
  try {
    oldElement.parentNode.replaceChild(newElement, oldElement);
  } catch (e) {}
  */
}

let createElementFromHTML = function (htmlString) {
  if (htmlString instanceof HTMLElement) {
    return htmlString;
  }
  var div = document.createElement(&#34;div&#34;);
  div.innerHTML = htmlString.trim();

  // Change this to div.childNodes to support multiple top-level nodes
  return div.firstChild;
};

function oldMethod() {
  let article = document.getElementsByTagName(&#34;article&#34;);
  let adscont = document.getElementById(&#34;hexo-adsense-ads-content&#34;);
  if (adscont &amp;&amp; adscont.length) {
    if (article &amp;&amp; article.length) {
      let linebreak = article.item(0).getElementsByTagName(&#34;br&#34;);
      if (linebreak.length &gt; 0) {
        return replaceWith(adscont, linebreak.item(0));
      }

      let headings = article.item(0).querySelectorAll(&#34;h2,h3,h4,h5&#34;);
      if (headings &amp;&amp; headings.length &gt; 0) {
        return insertAfter(adscont, headings.item(0));
      }
    }
  }
}

/**
 * random number between min and max
 */
function ranumb(min, max) {
  // min and max included
  return Math.floor(Math.random() * (max - min + 1) + min);
}

function newMethod() {
  const adshide = document.getElementById(&#34;hexo-adsense-hidden&#34;);
  let adscont = adshide.querySelectorAll(&#39;[hexo-adsense=&#34;ads-content&#34;]&#39;);
  const article = document.querySelectorAll(&#34;article&#34;);
  if (article.length &gt; 0 &amp;&amp; adscont.length &gt; 0) {
    /**
     * @type {HTMLElement}
     */
    let ads;
    if (article.length == 1) {
      console.log(&#34;webpage is post&#34;);
      let targetArticle = article.item(0);

      // prioritize hexo-adsense-fill before auto ads on other elements
      const ads_fill = targetArticle.querySelectorAll(&#34;*[hexo-adsense-fill]&#34;);
      if (ads_fill.length &gt; 0) {
        for (let index = 0; index &lt; ads_fill.length; index++) {
          const toFill = ads_fill[index];
          if (typeof adscont[index] !== &#34;undefined&#34;) {
            toFill.appendChild(adscont[index]);
          }
        }
      }

      // the rest of the ads will show automatically after headers elements
      adscont = adshide.querySelectorAll(&#39;[hexo-adsense=&#34;ads-content&#34;]&#39;);
      //console.log(adscont.length, &#34;ads left&#34;);
      if (adscont.length &gt; 0) {
        const headers = targetArticle.querySelectorAll(&#34;h1,h2,h3,h4,h5,h6&#34;);
        if (headers.length &gt; 0) {
          // generate index of headers
          let headers_index = Array.apply(null, { length: headers.length }).map(Number.call, Number);
          //console.log(headers_index);
          for (let index = 0; index &lt; adscont.length; index++) {
            ads = adscont[index];
            const rheaders = shuffleArr2(headers_index);
            // pick a random index
            const rheader = rheaders.next().value;
            if (typeof rheader === &#34;number&#34;) {
              const header = headers.item(rheader);
              insertAfter(createElementFromHTML(ads), header);
            }
          }
        }
      }

      // the rest of the ads will show automatically to linebreak elements
      adscont = adshide.querySelectorAll(&#39;[hexo-adsense=&#34;ads-content&#34;]&#39;);
      if (adscont.length &gt; 0) {
        const linebreaks = targetArticle.querySelectorAll(&#34;br,hr&#34;);
        if (linebreaks.length &gt; 0) {
          // generate index of linebreaks
          let linebreaks_index = Array.apply(null, { length: linebreaks.length }).map(Number.call, Number);
          //console.log(linebreaks_index);
          // randomize linebreaks index
          const rlinebreaks = shuffleArr2(linebreaks_index);
          for (let index = 0; index &lt; adscont.length; index++) {
            ads = adscont[index];
            // pick a random index
            const rlinebreak = rlinebreaks.next().value;
            if (typeof rlinebreak == &#34;number&#34;) {
              const linebreak = linebreaks.item(rlinebreak);
              if ([&#34;blockquote&#34;, &#34;img&#34;, &#34;a&#34;].includes(linebreak.parentNode.tagName.toLowerCase())) {
                index--;
                continue;
              }
              //console.log(linebreak.tagName);
              replaceWith(createElementFromHTML(ads), linebreak);
            }
          }
        }
      }
    } else {
      console.log(&#34;webpage is not post&#34;);
      // generate index of articles
      let articles_index = Array.apply(null, { length: article.length }).map(Number.call, Number);
      // randomize linebreaks index
      const rArticles = shuffleArr2(articles_index);
      for (let index = 0; index &lt; adscont.length; index++) {
        ads = adscont[index];
        // pick a random index
        const rArticle = rArticles.next().value;
        if (typeof rArticle == &#34;number&#34;) {
          //console.log(&#34;adsense display to article index&#34;, rArticle);
          const pickArticle = article.item(rArticle);
          pickArticle.appendChild(createElementFromHTML(ads));
        }
      }
    }

    // summon adsbygoogle.push()
    adsensePush();
  }
}

function eventMethod() {
  document.addEventListener(&#34;DOMContentLoaded&#34;, function () {
    // we look for the jump break
    var _moreElm = document.querySelector(&#34;a[name=more]&#34;);

    // here is your adsense code
    var _adsenseCode = &#34; [replace this with code from the last step] &#34;;

    // This inserts the ad inside of the blog post
    _moreElm.insertAdjacentHTML(&#34;afterend&#34;, &#39;&lt;div class=&#34;adsense-after-break&#34;&gt;&#39; + _adsenseCode + &#34;&lt;/div&gt;&#34;);

    // Initialize the ads here
    (adsbygoogle = window.adsbygoogle || []).push({});
  });
}

/**
 * Shuffle Array
 * @param {any[]} array
 * @see {@link https://stackoverflow.com/a/18806417}
 * @returns
 */
function shuffleArr(array) {
  var i = array.length,
    j = 0,
    temp;

  while (i--) {
    j = Math.floor(Math.random() * (i + 1));

    // swap randomly chosen element with current element
    temp = array[i];
    array[i] = array[j];
    array[j] = temp;
  }

  return array;
}

/**
 * Next generation of non-repeated randomizer
 * @see {@link shuffleArr}
 * @param {any[]} array
 */
function* shuffleArr2(array) {
  var i = array.length;

  while (i--) {
    yield array.splice(Math.floor(Math.random() * (i + 1)), 1)[0];
  }
}

function adsensePush() {
  for (let index = 0; index &lt; document.querySelectorAll(&#39;[hexo-adsense=&#34;ads-content&#34;]&#39;).length; index++) {
    (adsbygoogle = window.adsbygoogle || []).push({
      google_ad_client: hexoAdsenseConfig.pub,
    });
  }
}

if (!isBrowser()) {
  module.exports = {
    replaceWith,
    insertAfter,
  };
} else {
  window.__tcfapi = (command, parameter, callback) =&gt; {
    if (command === &#34;checkConsent&#34;) {
      callback(true);
    }
    if (command === &#34;addEventListener&#34;) {
      callback({ eventStatus: &#34;tcloaded&#34;, gdprApplies: false }, true);
    }
  };

  if (typeof document.addEventListener == &#34;function&#34;) {
    document.addEventListener(&#34;DOMContentLoaded&#34;, newMethod);
  } else if (typeof window.attachEvent == &#34;function&#34;) {
    window.attachEvent(&#34;onload&#34;, newMethod);
  } else {
    window.onload = newMethod;
  }
}
&lt;/script&gt; ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://www.webmanajemen.com/The%20Legend%20Of%20Neverland/Recipes.html</guid>
            <title>Cooking Recipes</title>
            <link>https://www.webmanajemen.com/The%20Legend%20Of%20Neverland/Recipes.html</link>
            <category>Life Skill</category>
            <pubDate>Sat, 14 Aug 2021 17:00:00 +0000</pubDate>
            <description><![CDATA[ &lt;!-- toc --&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#ingredients-water-essence-prices&#34;&gt;Ingredients Water Essence Prices&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#char-buff-dish&#34;&gt;Char Buff Dish&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#flower-fairy-upgrade-dish&#34;&gt;Flower Fairy Upgrade Dish&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#compare-100x-boiled-corns&#34;&gt;Compare 100x boiled corns&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- tocstop --&gt;
&lt;h2&gt;&lt;span id=&#34;ingredients-water-essence-prices&#34;&gt; Ingredients Water Essence Prices&lt;/span&gt;&lt;/h2&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:left&#34;&gt;ingredients&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;Price&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;ingredients&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;Price&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;ingredients&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;Price&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Eeg&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;50&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Fresh Cheese&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;500&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Barley&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;150&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Meat Chunk&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;2000&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Carrot&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;500&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Mushroom&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;150&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Cheese&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;2000&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Onion&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;500&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Corn&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;50&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Chicken Wing&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;2000&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Celery&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;500&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Potato&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;50&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Meat&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;1500&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Butter&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;300&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Thyme&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;2000&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Shrimp&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;1500&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Black Pepper&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;300&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Red Wine&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;2000&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Tomato&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;750&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Milk&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;300&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Chocolate Material&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;950&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Bacon&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;750&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Wheat&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;300&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Strawberry&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;750&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Sugar&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;750&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Water&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;150&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Rice&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;700&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Salt&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;150&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;&lt;span id=&#34;char-buff-dish&#34;&gt; Char Buff Dish&lt;/span&gt;&lt;/h2&gt;
&lt;table id=&#34;char-dish&#34;&gt;
	&lt;thead&gt;
		&lt;tr&gt;
			&lt;th style=&#34;text-align:left&#34;&gt;Food Name&lt;/th&gt;
			&lt;th style=&#34;text-align:left&#34;&gt;Ingredients&lt;/th&gt;
			&lt;th style=&#34;text-align:left&#34;&gt;Buff&lt;/th&gt;
			&lt;th style=&#34;text-align:center&#34;&gt;Price&lt;/th&gt;
		&lt;/tr&gt;
	&lt;/thead&gt;
	&lt;tbody&gt;
		&lt;tr&gt;
			&lt;td style=&#34;text-align:left&#34;&gt;Fried Egg&lt;/td&gt;
			&lt;td style=&#34;text-align:left&#34;&gt;Egg 1 Salt 1&lt;/td&gt;
			&lt;td style=&#34;text-align:left&#34;&gt;Crit +300&lt;/td&gt;
			&lt;td style=&#34;text-align:center&#34;&gt;50+150&lt;/td&gt;
		&lt;/tr&gt;
		&lt;tr&gt;
			&lt;td style=&#34;text-align:left&#34;&gt;Baked Mushroom&lt;/td&gt;
			&lt;td style=&#34;text-align:left&#34;&gt;Mushroom 2 Salt 2 Water 2&lt;/td&gt;
			&lt;td style=&#34;text-align:left&#34;&gt;Block +300&lt;/td&gt;
			&lt;td style=&#34;text-align:center&#34;&gt;(150x2)+(150x2)+(150x2)&lt;/td&gt;
		&lt;/tr&gt;
		&lt;tr&gt;
			&lt;td style=&#34;text-align:left&#34;&gt;Barley Tea&lt;/td&gt;
			&lt;td style=&#34;text-align:left&#34;&gt;Barley 3 Salt 3 Water 3&lt;/td&gt;
			&lt;td style=&#34;text-align:left&#34;&gt;Crush +300&lt;/td&gt;
			&lt;td style=&#34;text-align:center&#34;&gt;(150x3)+(150x3)+(150x3)&lt;/td&gt;
		&lt;/tr&gt;
		&lt;tr&gt;
			&lt;td style=&#34;text-align:left&#34;&gt;Corn Flake&lt;/td&gt;
			&lt;td style=&#34;text-align:left&#34;&gt;Corn 4 Milk 4 Salt 4&lt;/td&gt;
			&lt;td style=&#34;text-align:left&#34;&gt;Resistance +300&lt;/td&gt;
			&lt;td style=&#34;text-align:center&#34;&gt;(50x4)+(300x4)+(150x4)&lt;/td&gt;
		&lt;/tr&gt;
		&lt;tr&gt;
			&lt;td style=&#34;text-align:left&#34;&gt;Mushroom Stew&lt;/td&gt;
			&lt;td style=&#34;text-align:left&#34;&gt;Mushroom 4 Milk 4 Black Pepper 4&lt;/td&gt;
			&lt;td style=&#34;text-align:left&#34;&gt;Protect +300&lt;/td&gt;
			&lt;td style=&#34;text-align:center&#34;&gt;(150x4)+(300x4)+(300x4)&lt;/td&gt;
		&lt;/tr&gt;
		&lt;tr&gt;
			&lt;td style=&#34;text-align:left&#34;&gt;Popcorn&lt;/td&gt;
			&lt;td style=&#34;text-align:left&#34;&gt;Corn 6 Milk 6 Butter 6&lt;/td&gt;
			&lt;td style=&#34;text-align:left&#34;&gt;Pierce +300&lt;/td&gt;
			&lt;td style=&#34;text-align:center&#34;&gt;(50x6)+(300x6)+(300x6)&lt;/td&gt;
		&lt;/tr&gt;
		&lt;tr&gt;
			&lt;td style=&#34;text-align:left&#34;&gt;Mixed Fried Rice&lt;/td&gt;
			&lt;td style=&#34;text-align:left&#34;&gt;Egg 5 Potato 5 Rice 5&lt;/td&gt;
			&lt;td style=&#34;text-align:left&#34;&gt;Attack +150&lt;/td&gt;
			&lt;td style=&#34;text-align:center&#34;&gt;(50x5)+(50x5)+(700x5)&lt;/td&gt;
		&lt;/tr&gt;
		&lt;tr&gt;
			&lt;td style=&#34;text-align:left&#34;&gt;Fried Rice with Mushroom&lt;/td&gt;
			&lt;td style=&#34;text-align:left&#34;&gt;Mushroom 4 Carrot 4 Rice 4&lt;/td&gt;
			&lt;td style=&#34;text-align:left&#34;&gt;crit +600&lt;/td&gt;
			&lt;td style=&#34;text-align:center&#34;&gt;(150x4)+(500x4)+(700x4)&lt;/td&gt;
		&lt;/tr&gt;
		&lt;tr&gt;
			&lt;td style=&#34;text-align:left&#34;&gt;Fried Onion Rings&lt;/td&gt;
			&lt;td style=&#34;text-align:left&#34;&gt;Wheat 5 Onion 5 Salt 5&lt;/td&gt;
			&lt;td style=&#34;text-align:left&#34;&gt;Block +600&lt;/td&gt;
			&lt;td style=&#34;text-align:center&#34;&gt;(300x5)+(500x5)+(150x5)&lt;/td&gt;
		&lt;/tr&gt;
		&lt;tr&gt;
			&lt;td style=&#34;text-align:left&#34;&gt;Fried Food Platter&lt;/td&gt;
			&lt;td style=&#34;text-align:left&#34;&gt;Celery 3 Carrot 3 Bacon 3&lt;/td&gt;
			&lt;td style=&#34;text-align:left&#34;&gt;crush +600&lt;/td&gt;
			&lt;td style=&#34;text-align:center&#34;&gt;(500x3)+(500x3)+(750x3)&lt;/td&gt;
		&lt;/tr&gt;
		&lt;tr&gt;
			&lt;td style=&#34;text-align:left&#34;&gt;Tomato Macaroni&lt;/td&gt;
			&lt;td style=&#34;text-align:left&#34;&gt;Wheat 4 Onion 4 Tomato 4&lt;/td&gt;
			&lt;td style=&#34;text-align:left&#34;&gt;Resistance +600&lt;/td&gt;
			&lt;td style=&#34;text-align:center&#34;&gt;(300x4)+(500x4)+(750x4)&lt;/td&gt;
		&lt;/tr&gt;
		&lt;tr&gt;
			&lt;td style=&#34;text-align:left&#34;&gt;Chocolate Cream Cake&lt;/td&gt;
			&lt;td style=&#34;text-align:left&#34;&gt;Wheat 6 Egg 6 Chocolate 6&lt;/td&gt;
			&lt;td style=&#34;text-align:left&#34;&gt;Protect +600&lt;/td&gt;
			&lt;td style=&#34;text-align:center&#34;&gt;(300x6)+(50x6)+(950x6)&lt;/td&gt;
		&lt;/tr&gt;
		&lt;tr&gt;
			&lt;td style=&#34;text-align:left&#34;&gt;Steamed Dumplings&lt;/td&gt;
			&lt;td style=&#34;text-align:left&#34;&gt;Wheat 4 Meat 4 Salt 4&lt;/td&gt;
			&lt;td style=&#34;text-align:left&#34;&gt;Pierce +600&lt;/td&gt;
			&lt;td style=&#34;text-align:center&#34;&gt;(300x4)+(2000x4)+(150x4)&lt;/td&gt;
		&lt;/tr&gt;
		&lt;tr&gt;
			&lt;td style=&#34;text-align:left&#34;&gt;Steamed Pork Ribs with Potatoes&lt;/td&gt;
			&lt;td style=&#34;text-align:left&#34;&gt;Potato 5 Meat 5 Salt 5&lt;/td&gt;
			&lt;td style=&#34;text-align:left&#34;&gt;Attack +300&lt;/td&gt;
			&lt;td style=&#34;text-align:center&#34;&gt;(50x5)+(2000x5)+(150x5)&lt;/td&gt;
		&lt;/tr&gt;
		&lt;tr&gt;
			&lt;td style=&#34;text-align:left&#34;&gt;Fried Pork Chop&lt;/td&gt;
			&lt;td style=&#34;text-align:left&#34;&gt;Egg 5 Wheat 5 Meat 5&lt;/td&gt;
			&lt;td style=&#34;text-align:left&#34;&gt;Crit +1000&lt;/td&gt;
			&lt;td style=&#34;text-align:center&#34;&gt;(50x5)+(300x5)+(2000x5)&lt;/td&gt;
		&lt;/tr&gt;
		&lt;tr&gt;
			&lt;td style=&#34;text-align:left&#34;&gt;Matcha Chicken Wing&lt;/td&gt;
			&lt;td style=&#34;text-align:left&#34;&gt;Chicken Wing 2 Thyme 2 Salt 2&lt;/td&gt;
			&lt;td style=&#34;text-align:left&#34;&gt;Block +1000&lt;/td&gt;
			&lt;td style=&#34;text-align:center&#34;&gt;(2000x2)+(2000x2)+(150x2)&lt;/td&gt;
		&lt;/tr&gt;
		&lt;tr&gt;
			&lt;td style=&#34;text-align:left&#34;&gt;Stewed Chicken with Wine&lt;/td&gt;
			&lt;td style=&#34;text-align:left&#34;&gt;Chicken Wing 2 Thyme 2 Red Wine 2&lt;/td&gt;
			&lt;td style=&#34;text-align:left&#34;&gt;Crush +1000&lt;/td&gt;
			&lt;td style=&#34;text-align:center&#34;&gt;(2000x2)+(2000x2)+(2000x2)&lt;/td&gt;
		&lt;/tr&gt;
		&lt;tr&gt;
			&lt;td style=&#34;text-align:left&#34;&gt;T-Bone Steak&lt;/td&gt;
			&lt;td style=&#34;text-align:left&#34;&gt;Meat Chunk 3 Thyme 3 salt 3&lt;/td&gt;
			&lt;td style=&#34;text-align:left&#34;&gt;Resistance +1000&lt;/td&gt;
			&lt;td style=&#34;text-align:center&#34;&gt;(2000x3)+(2000x3)+(150x3)&lt;/td&gt;
		&lt;/tr&gt;
	&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;&lt;span id=&#34;flower-fairy-upgrade-dish&#34;&gt; Flower Fairy Upgrade Dish&lt;/span&gt;&lt;/h2&gt;
&lt;table id=&#34;fairy-dish&#34;&gt;
	&lt;thead&gt;
		&lt;tr&gt;
			&lt;th style=&#34;text-align:left&#34;&gt;Food Name&lt;/th&gt;
			&lt;th style=&#34;text-align:center&#34;&gt;Ingredients&lt;/th&gt;
			&lt;th style=&#34;text-align:left&#34;&gt;Fairy EXP&lt;/th&gt;
			&lt;th&gt;Price&lt;/th&gt;
		&lt;/tr&gt;
	&lt;/thead&gt;
	&lt;tbody&gt;
		&lt;tr&gt;
			&lt;td style=&#34;text-align:left&#34;&gt;Boiled Corn&lt;/td&gt;
			&lt;td style=&#34;text-align:center&#34;&gt;Corn 1 Salt 1 Water 1&lt;/td&gt;
			&lt;td style=&#34;text-align:left&#34;&gt;+100&lt;/td&gt;
			&lt;td&gt;50+150+150&lt;/td&gt;
		&lt;/tr&gt;
		&lt;tr&gt;
			&lt;td style=&#34;text-align:left&#34;&gt;Roasted Potato&lt;/td&gt;
			&lt;td style=&#34;text-align:center&#34;&gt;Potato 3 salt 3&lt;/td&gt;
			&lt;td style=&#34;text-align:left&#34;&gt;+150&lt;/td&gt;
			&lt;td&gt;(50x3)+(150x3)&lt;/td&gt;
		&lt;/tr&gt;
		&lt;tr&gt;
			&lt;td style=&#34;text-align:left&#34;&gt;Gruel Barley&lt;/td&gt;
			&lt;td style=&#34;text-align:center&#34;&gt;Barley 2 Wheat 3 Water 2&lt;/td&gt;
			&lt;td style=&#34;text-align:left&#34;&gt;+230&lt;/td&gt;
			&lt;td&gt;(150x2)+(300x3)+(150x2)&lt;/td&gt;
		&lt;/tr&gt;
		&lt;tr&gt;
			&lt;td style=&#34;text-align:left&#34;&gt;Corn Porridge&lt;/td&gt;
			&lt;td style=&#34;text-align:center&#34;&gt;Corn 3 Milk 4 Water 3&lt;/td&gt;
			&lt;td style=&#34;text-align:left&#34;&gt;+310&lt;/td&gt;
			&lt;td&gt;(50x3)+(300x4)+(150x3)&lt;/td&gt;
		&lt;/tr&gt;
		&lt;tr&gt;
			&lt;td style=&#34;text-align:left&#34;&gt;Vegetable Soup&lt;/td&gt;
			&lt;td style=&#34;text-align:center&#34;&gt;Milk 2 Celery 2 Carrot 2&lt;/td&gt;
			&lt;td style=&#34;text-align:left&#34;&gt;+400&lt;/td&gt;
			&lt;td&gt;(300x2)+(500x2)+(500x2)&lt;/td&gt;
		&lt;/tr&gt;
		&lt;tr&gt;
			&lt;td style=&#34;text-align:left&#34;&gt;Onion Soup&lt;/td&gt;
			&lt;td style=&#34;text-align:center&#34;&gt;Black Pepper 2 Onion 3 Fresh Cheese 2&lt;/td&gt;
			&lt;td style=&#34;text-align:left&#34;&gt;+480&lt;/td&gt;
			&lt;td&gt;(300x2)+(500x3)+(500x2)&lt;/td&gt;
		&lt;/tr&gt;
		&lt;tr&gt;
			&lt;td style=&#34;text-align:left&#34;&gt;Strawberry Milk&lt;/td&gt;
			&lt;td style=&#34;text-align:center&#34;&gt;Milk 3 Strawberry 2 Sugar 2&lt;/td&gt;
			&lt;td style=&#34;text-align:left&#34;&gt;+600&lt;/td&gt;
			&lt;td&gt;(300x3)+(750x2)+(750x2)&lt;/td&gt;
		&lt;/tr&gt;
		&lt;tr&gt;
			&lt;td style=&#34;text-align:left&#34;&gt;Chocolate Milk&lt;/td&gt;
			&lt;td style=&#34;text-align:center&#34;&gt;Milk 2 Chocolate 3 Sugar 2&lt;/td&gt;
			&lt;td style=&#34;text-align:left&#34;&gt;+850&lt;/td&gt;
			&lt;td&gt;(300x2)+(950x3)+(750x2)&lt;/td&gt;
		&lt;/tr&gt;
		&lt;tr&gt;
			&lt;td style=&#34;text-align:left&#34;&gt;Fried Shrimp&lt;/td&gt;
			&lt;td style=&#34;text-align:center&#34;&gt;Egg 3 Wheat 3 Shrimp 4&lt;/td&gt;
			&lt;td style=&#34;text-align:left&#34;&gt;+1150&lt;/td&gt;
			&lt;td&gt;(50x3)+(300x3)+(1500x4)&lt;/td&gt;
		&lt;/tr&gt;
		&lt;tr&gt;
			&lt;td style=&#34;text-align:left&#34;&gt;Fried Rice with Shrimp&lt;/td&gt;
			&lt;td style=&#34;text-align:center&#34;&gt;Rice 4 Egg 4 Shrimp 4&lt;/td&gt;
			&lt;td style=&#34;text-align:left&#34;&gt;+1450&lt;/td&gt;
			&lt;td&gt;(700x4)+(50x4)+(1500x4)&lt;/td&gt;
		&lt;/tr&gt;
		&lt;tr&gt;
			&lt;td style=&#34;text-align:left&#34;&gt;Chicken Soup Noodle&lt;/td&gt;
			&lt;td style=&#34;text-align:center&#34;&gt;Wheat 4 Chicken Wing 5 Salt 4&lt;/td&gt;
			&lt;td style=&#34;text-align:left&#34;&gt;+1800&lt;/td&gt;
			&lt;td&gt;(300x4)+(2000x5)+(150x4)&lt;/td&gt;
		&lt;/tr&gt;
		&lt;tr&gt;
			&lt;td style=&#34;text-align:left&#34;&gt;Ham Sandwich&lt;/td&gt;
			&lt;td style=&#34;text-align:center&#34;&gt;Wheat 3 Cheese 4 Meat 3&lt;/td&gt;
			&lt;td style=&#34;text-align:left&#34;&gt;+2200&lt;/td&gt;
			&lt;td&gt;(300x3)+(2000x4)+(2000x3)&lt;/td&gt;
		&lt;/tr&gt;
	&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;&lt;span id=&#34;compare-100x-boiled-corns&#34;&gt; Compare 100x boiled corns&lt;/span&gt;&lt;/h2&gt;
&lt;div style=&#34;margin:10px&#34;&gt;
  &lt;b&gt;Calculate x100 foods&lt;/b&gt;
  &lt;ul&gt;
    &lt;li&gt;Boiled Corn x100 total price &lt;b i=&#34;bcprice&#34;&gt;-&lt;/b&gt; total exp &lt;b i=&#34;bcexp&#34;&gt;-&lt;/b&gt;&lt;/li&gt;
    &lt;li&gt;Ham x100 total price &lt;b i=&#34;hamprice&#34;&gt;-&lt;/b&gt; total exp &lt;b i=&#34;hamexp&#34;&gt;-&lt;/b&gt;&lt;/li&gt;
  &lt;/ul&gt;
  &lt;em&gt;if the total price of ham is calculated into boiled corn food&lt;/em&gt; &lt;b i=&#34;hamprice&#34;&gt;&lt;/b&gt; &amp;divide; &lt;b i=&#34;bcprice&#34;&gt;&lt;/b&gt; &amp;#61; &lt;b i=&#34;ham-bc&#34;&gt;&lt;/b&gt; &amp;times &lt;b i=&#34;bcexp&#34;&gt;-&lt;/b&gt; (x100 Boiled Corn) &amp;#61; &lt;b i=&#34;bctotal&#34;&gt;&lt;/b&gt; total exp
&lt;/div&gt;
&lt;!-- [![603TF.png](https://i.im.ge/2021/08/15/603TF.png)](https://im.ge/i/603TF) --&gt;
&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/12471057/132800836-32af1b73-bbb0-4af1-8a7c-dd96ee02cb3c.png&#34; alt=&#34;Recipes&#34;&gt;&lt;/p&gt;
  &lt;script&gt;console.clear();

CalculateTR(document.getElementById(&#34;char-dish&#34;));
CalculateTR(document.getElementById(&#34;fairy-dish&#34;));

/**
 * Calculate TR
 * @param {HTMLTableElement} table
 */
function CalculateTR(table) {
  let identifier = table.hasAttribute(&#34;id&#34;) ? table.id : &#34;-&#34;;
  console.log(`Start Calculating Table ${identifier}`);
  let tr = table.getElementsByTagName(&#34;tr&#34;);
  if (tr.length &gt; 0)
    for (i = 0; i &lt; tr.length; i++) {
      let td = tr[i].getElementsByTagName(&#34;td&#34;),
        str,
        thirdTD = typeof td[3] != &#34;undefined&#34;;

      if (thirdTD) {
        str = td[3].innerText;
        console.log(str);
        if (/[+\(\)]/gm.test(str)) {
          str = str.trim().replaceAll(/x/gm, &#34;*&#34;);
          td[3].innerText = eval(str);
        }
      }
    }
}

// Compare 100x boiled corns 
/* Ham */
  writeTo(&#34;[i=&#39;hamprice&#39;]&#34;, 14900 * 100, &#34;brown&#34;);
  writeTo(&#34;[i=&#39;hamexp&#39;]&#34;, 2200 * 100, &#34;brown&#34;);
  /* Boiled Corn */
  writeTo(&#34;[i=&#39;bcprice&#39;]&#34;, 350 * 100, &#34;yellow&#34;);
  writeTo(&#34;[i=&#39;bcexp&#39;]&#34;, 100 * 100, &#34;yellow&#34;);
  writeTo(&#34;[i=&#39;ham-bc&#39;]&#34;, (14900 * 100) / (350 * 100), &#34;blue&#34;, function(total) {
    return total.toFixed(2);
  });
  writeTo(&#39;[i=&#34;bctotal&#34;]&#39;, ((14900 * 100) / (350 * 100)) * (100 * 100), function(total) {
    return total.toFixed(0);
  });

  function writeTo(priceid, totalprice, color, callback) {
    if (typeof callback == &#34;function&#34;) {
      totalprice = callback(totalprice);
    } else if (typeof color == &#34;function&#34;) {
      totalprice = color(totalprice);
    }
    if (!color || typeof color == &#34;function&#34;) color = &#34;red&#34;;
    let x = document.querySelectorAll(priceid);
    for (i = 0; i &lt; x.length; i++) {
      x[i].style.backgroundColor = color;
      if (color != &#34;yellow&#34;) x[i].style.color = &#34;white&#34;;
      x[i].innerHTML = totalprice.toLocaleString(&#34;en-US&#34;);
    }
  }
&lt;/script&gt;
&lt;div id=&#34;hexo-adsense-hidden&#34; style=&#34;display:none&#34;&gt;&lt;div hexo-adsense=&#34;ads-content&#34;&gt;
&lt;ins class=&#34;adsbygoogle&#34; style=&#34;display:block; text-align:center;&#34; data-ad-layout=&#34;in-article&#34; data-ad-format=&#34;fluid&#34; data-ad-client=&#34;ca-pub-1165447249910969&#34; data-ad-slot=&#34;8418182273&#34;&gt;&lt;/ins&gt;
&lt;script&gt;
     
&lt;/script&gt;
&lt;/div&gt;&lt;div hexo-adsense=&#34;ads-content&#34;&gt;
&lt;ins class=&#34;adsbygoogle&#34; style=&#34;display:block; text-align:center;&#34; data-ad-layout=&#34;in-article&#34; data-ad-format=&#34;fluid&#34; data-ad-client=&#34;ca-pub-1165447249910969&#34; data-ad-slot=&#34;7823254087&#34;&gt;&lt;/ins&gt;
&lt;script&gt;
     
&lt;/script&gt;
&lt;/div&gt;&lt;/div&gt;&lt;style&gt;*[hexo-adsense=&#34;ads-content&#34;] {
  display: block;
  background: #fff url(//i.imgur.com/mBbv90p.png) no-repeat top right;
  color: #303030;
  /*min-height: 18px;
  min-width: 81px;*/
  min-width: 250px;
  text-align: center;
  margin-left: auto;
  margin-right: auto;
}
&lt;/style&gt;&lt;script&gt;/**
 * Browser processor
 */

const isBrowser = new Function(&#34;try {return this===window;}catch(e){ return false;}&#34;);

/**
 * @type {import(&#34;../lib/config&#34;)}
 */
const hexoAdsenseConfig = JSON.parse(document.getElementById(&#34;hexo-adsense-config&#34;).textContent);
//console.log(hexoAdsenseConfig);

/**
 * Insert after element
 * @param {HTMLElement} newElement
 * @param {HTMLElement} oldElement
 */
function insertAfter(newElement, oldElement) {
  if (oldElement &amp;&amp; newElement) {
    let parent = oldElement.parentNode;
    if (parent.lastChild == oldElement) {
      parent.appendChild(newElement);
    } else {
      parent.insertBefore(newElement, oldElement.nextSibling);
    }
  } else {
    console.error(&#34;cannot insert element&#34;);
  }
}

/**
 * Replace elements with new
 * @param {HTMLElement} newElement
 * @param {HTMLElement} oldElement
 */
function replaceWith(newElement, oldElement) {
  if (!oldElement.parentNode) {
    console.log(oldElement, &#34;parent null&#34;);
    let d = document.createElement(&#34;div&#34;);
    d.appendChild(oldElement);
  } else {
    //console.log(oldElement.parentNode.tagName);
    oldElement.parentNode.replaceChild(newElement, oldElement);
  }
  /*
  try {
    oldElement.parentNode.replaceChild(newElement, oldElement);
  } catch (e) {}
  */
}

let createElementFromHTML = function (htmlString) {
  if (htmlString instanceof HTMLElement) {
    return htmlString;
  }
  var div = document.createElement(&#34;div&#34;);
  div.innerHTML = htmlString.trim();

  // Change this to div.childNodes to support multiple top-level nodes
  return div.firstChild;
};

function oldMethod() {
  let article = document.getElementsByTagName(&#34;article&#34;);
  let adscont = document.getElementById(&#34;hexo-adsense-ads-content&#34;);
  if (adscont &amp;&amp; adscont.length) {
    if (article &amp;&amp; article.length) {
      let linebreak = article.item(0).getElementsByTagName(&#34;br&#34;);
      if (linebreak.length &gt; 0) {
        return replaceWith(adscont, linebreak.item(0));
      }

      let headings = article.item(0).querySelectorAll(&#34;h2,h3,h4,h5&#34;);
      if (headings &amp;&amp; headings.length &gt; 0) {
        return insertAfter(adscont, headings.item(0));
      }
    }
  }
}

/**
 * random number between min and max
 */
function ranumb(min, max) {
  // min and max included
  return Math.floor(Math.random() * (max - min + 1) + min);
}

function newMethod() {
  const adshide = document.getElementById(&#34;hexo-adsense-hidden&#34;);
  let adscont = adshide.querySelectorAll(&#39;[hexo-adsense=&#34;ads-content&#34;]&#39;);
  const article = document.querySelectorAll(&#34;article&#34;);
  if (article.length &gt; 0 &amp;&amp; adscont.length &gt; 0) {
    /**
     * @type {HTMLElement}
     */
    let ads;
    if (article.length == 1) {
      console.log(&#34;webpage is post&#34;);
      let targetArticle = article.item(0);

      // prioritize hexo-adsense-fill before auto ads on other elements
      const ads_fill = targetArticle.querySelectorAll(&#34;*[hexo-adsense-fill]&#34;);
      if (ads_fill.length &gt; 0) {
        for (let index = 0; index &lt; ads_fill.length; index++) {
          const toFill = ads_fill[index];
          if (typeof adscont[index] !== &#34;undefined&#34;) {
            toFill.appendChild(adscont[index]);
          }
        }
      }

      // the rest of the ads will show automatically after headers elements
      adscont = adshide.querySelectorAll(&#39;[hexo-adsense=&#34;ads-content&#34;]&#39;);
      //console.log(adscont.length, &#34;ads left&#34;);
      if (adscont.length &gt; 0) {
        const headers = targetArticle.querySelectorAll(&#34;h1,h2,h3,h4,h5,h6&#34;);
        if (headers.length &gt; 0) {
          // generate index of headers
          let headers_index = Array.apply(null, { length: headers.length }).map(Number.call, Number);
          //console.log(headers_index);
          for (let index = 0; index &lt; adscont.length; index++) {
            ads = adscont[index];
            const rheaders = shuffleArr2(headers_index);
            // pick a random index
            const rheader = rheaders.next().value;
            if (typeof rheader === &#34;number&#34;) {
              const header = headers.item(rheader);
              insertAfter(createElementFromHTML(ads), header);
            }
          }
        }
      }

      // the rest of the ads will show automatically to linebreak elements
      adscont = adshide.querySelectorAll(&#39;[hexo-adsense=&#34;ads-content&#34;]&#39;);
      if (adscont.length &gt; 0) {
        const linebreaks = targetArticle.querySelectorAll(&#34;br,hr&#34;);
        if (linebreaks.length &gt; 0) {
          // generate index of linebreaks
          let linebreaks_index = Array.apply(null, { length: linebreaks.length }).map(Number.call, Number);
          //console.log(linebreaks_index);
          // randomize linebreaks index
          const rlinebreaks = shuffleArr2(linebreaks_index);
          for (let index = 0; index &lt; adscont.length; index++) {
            ads = adscont[index];
            // pick a random index
            const rlinebreak = rlinebreaks.next().value;
            if (typeof rlinebreak == &#34;number&#34;) {
              const linebreak = linebreaks.item(rlinebreak);
              if ([&#34;blockquote&#34;, &#34;img&#34;, &#34;a&#34;].includes(linebreak.parentNode.tagName.toLowerCase())) {
                index--;
                continue;
              }
              //console.log(linebreak.tagName);
              replaceWith(createElementFromHTML(ads), linebreak);
            }
          }
        }
      }
    } else {
      console.log(&#34;webpage is not post&#34;);
      // generate index of articles
      let articles_index = Array.apply(null, { length: article.length }).map(Number.call, Number);
      // randomize linebreaks index
      const rArticles = shuffleArr2(articles_index);
      for (let index = 0; index &lt; adscont.length; index++) {
        ads = adscont[index];
        // pick a random index
        const rArticle = rArticles.next().value;
        if (typeof rArticle == &#34;number&#34;) {
          //console.log(&#34;adsense display to article index&#34;, rArticle);
          const pickArticle = article.item(rArticle);
          pickArticle.appendChild(createElementFromHTML(ads));
        }
      }
    }

    // summon adsbygoogle.push()
    adsensePush();
  }
}

function eventMethod() {
  document.addEventListener(&#34;DOMContentLoaded&#34;, function () {
    // we look for the jump break
    var _moreElm = document.querySelector(&#34;a[name=more]&#34;);

    // here is your adsense code
    var _adsenseCode = &#34; [replace this with code from the last step] &#34;;

    // This inserts the ad inside of the blog post
    _moreElm.insertAdjacentHTML(&#34;afterend&#34;, &#39;&lt;div class=&#34;adsense-after-break&#34;&gt;&#39; + _adsenseCode + &#34;&lt;/div&gt;&#34;);

    // Initialize the ads here
    (adsbygoogle = window.adsbygoogle || []).push({});
  });
}

/**
 * Shuffle Array
 * @param {any[]} array
 * @see {@link https://stackoverflow.com/a/18806417}
 * @returns
 */
function shuffleArr(array) {
  var i = array.length,
    j = 0,
    temp;

  while (i--) {
    j = Math.floor(Math.random() * (i + 1));

    // swap randomly chosen element with current element
    temp = array[i];
    array[i] = array[j];
    array[j] = temp;
  }

  return array;
}

/**
 * Next generation of non-repeated randomizer
 * @see {@link shuffleArr}
 * @param {any[]} array
 */
function* shuffleArr2(array) {
  var i = array.length;

  while (i--) {
    yield array.splice(Math.floor(Math.random() * (i + 1)), 1)[0];
  }
}

function adsensePush() {
  for (let index = 0; index &lt; document.querySelectorAll(&#39;[hexo-adsense=&#34;ads-content&#34;]&#39;).length; index++) {
    (adsbygoogle = window.adsbygoogle || []).push({
      google_ad_client: hexoAdsenseConfig.pub,
    });
  }
}

if (!isBrowser()) {
  module.exports = {
    replaceWith,
    insertAfter,
  };
} else {
  window.__tcfapi = (command, parameter, callback) =&gt; {
    if (command === &#34;checkConsent&#34;) {
      callback(true);
    }
    if (command === &#34;addEventListener&#34;) {
      callback({ eventStatus: &#34;tcloaded&#34;, gdprApplies: false }, true);
    }
  };

  if (typeof document.addEventListener == &#34;function&#34;) {
    document.addEventListener(&#34;DOMContentLoaded&#34;, newMethod);
  } else if (typeof window.attachEvent == &#34;function&#34;) {
    window.attachEvent(&#34;onload&#34;, newMethod);
  } else {
    window.onload = newMethod;
  }
}
&lt;/script&gt; ]]></description>
        </item>
    </channel>
</rss>
