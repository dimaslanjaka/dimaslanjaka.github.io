<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>WMI</title>
    <link>https://www.webmanajemen.com/</link>
    
    <image>
      <url>https://www.webmanajemen.com/logo.png</url>
      <title>WMI</title>
      <link>https://www.webmanajemen.com/</link>
    </image>
    
    <atom:link href="https://www.webmanajemen.com/rss.xml" rel="self" type="application/rss+xml"/>
    
    <description>Website Management Indonesia is a blog about scripts, tips and tricks, games, software. Covering php, javascript, jquery, mysql, seo, e-commerce and others.</description>
    <pubDate>Fri, 16 Feb 2024 23:50:16 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>Fix The inferred type of X cannot be named without a reference</title>
      <link>https://www.webmanajemen.com/2024/02/the-inferred-type-of-x-cannot-be-named-without-a-reference-to.html</link>
      <guid>https://www.webmanajemen.com/2024/02/the-inferred-type-of-x-cannot-be-named-without-a-reference-to.html</guid>
      <pubDate>Fri, 16 Feb 2024 20:03:26 GMT</pubDate>
      
      <description>How to fix The inferred type of X cannot be named without a reference to path. This is likely not portable. A type annotation is necessary.</description>
      
      
      
      <content:encoded><![CDATA[<p>If you’re experiencing a TypeScript mistake related to module determination or sort induction.<br><em>The blunder message recommends that the sort of ‘X’ cannot be named without a reference to ‘path/from/node_modules’, and it may not be convenient.</em></p><p>To resolve this issue, you’ll have to be give a type annotation for ‘X’ or adjust your module determination settings.<br>Here are a few of methods you’ll be able take:</p><h2 id="Sample-problem">Sample problem</h2><p>For example I will resolve these error</p><pre><code class="hljs log">The inferred type of &#x27;loadSavedCredentialsIfExist&#x27; cannot be named without a reference to &#x27;googleapis-common/node_modules/google-auth-library/build/src/auth/googleauth&#x27;. This is likely not portable. A type annotation is necessary.ts(2742)</code></pre><p><img src="https://github.com/dimaslanjaka/source-posts/assets/12471057/01783fa3-de3d-4b37-9ed1-c51238b10164" alt=""></p><p>with the problem codes is</p><pre><code class="hljs typescript"><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">Auth</span>, google &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;googleapis&#x27;</span>;<span class="hljs-comment">/**</span><span class="hljs-comment"> * Reads previously authorized credentials from the save file.</span><span class="hljs-comment"> *</span><span class="hljs-comment"> * <span class="hljs-doctag">@return</span></span><span class="hljs-comment"> */</span><span class="hljs-keyword">export</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">loadSavedCredentialsIfExist</span>(<span class="hljs-params"></span>) &#123;  <span class="hljs-keyword">try</span> &#123;    <span class="hljs-keyword">const</span> content = fs.<span class="hljs-title function_">readFileSync</span>(<span class="hljs-variable constant_">TOKEN_PATH</span>).<span class="hljs-title function_">toString</span>();    <span class="hljs-keyword">const</span> credentials = <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">parse</span>(content);    <span class="hljs-comment">// const uri = &#x27;https://www.googleapis.com/oauth2/v3/tokeninfo?access_token=&#x27; + credentials.accestoken;</span>    <span class="hljs-keyword">return</span> google.<span class="hljs-property">auth</span>.<span class="hljs-title function_">fromJSON</span>(credentials);  &#125; <span class="hljs-keyword">catch</span> (err) &#123;    <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;  &#125;&#125;</code></pre><h2 id="Clean-install">Clean install</h2><details>  <summary>Performing a clean introduce of Yarn can offer a few benefits</summary><ol><li><p><strong>Guarantees a New Begin:</strong> Expelling any existing establishments and arrangements guarantees simply begin with a clean slate. This will be accommodating on the off chance that you’ve experienced issues or irregularities along with your past Yarn setup.</p></li><li><p><strong>Settle Dependency Conflicts:</strong> A clean introduce makes a difference in settling potential reliance clashes or issues with obsolete bundles. It guarantees merely bring the most recent forms of Yarn and its dependencies.</p></li><li><p><strong>Dodges Versioning Issues:</strong> Over time, you might have different forms of Yarn introduced on your framework. A clean introduce guarantees merely are working with the most recent steady form, diminishing the chance of versioning issues.</p></li><li><p><strong>Makes strides Framework Soundness:</strong> Evacuating any leftovers of past establishments can contribute to a more steady and unsurprising environment. It makes a difference in avoiding unforeseen behavior caused by obsolete or clashing setups.</p></li><li><p><strong>Improves Security:</strong> Remaining up-to-date with the most recent forms of bundle directors is vital for security. A clean introduce guarantees simply have the foremost later form of Yarn, which may incorporate security patches and advancements.</p></li><li><p><strong>Tackles Establishment Issues:</strong> In the event that you’ve experienced troubles amid the establishment of Yarn or have issues related to lost conditions, a clean introduce can offer assistance resolve these issues.</p></li><li><p><strong>Simplifies Troubleshooting:</strong> When looking for offer assistance or investigating issues with Yarn, beginning with a clean establishment gives a steady standard. It makes it simpler for others to help you, as they won’t got to consider potential complications from past configurations.</p></li><li><p><strong>Advances Best Practices:</strong> Intermittently performing clean installs could be a great hone to preserve a solid improvement environment. It guarantees that you’re working with an optimized setup and diminishes the probability of experiencing unforeseen issues.</p></li></ol></details><p>On Unix-based systems (Linux or macOS):</p><pre><code class="hljs bash"><span class="hljs-built_in">rm</span> -rf node_modules<span class="hljs-built_in">rm</span> yarn.lock<span class="hljs-built_in">rm</span> package-lock.jsonyarn cache cleannpm cache clean --force</code></pre><p>On Windows (using Command Prompt):</p><pre><code class="hljs batch">rmdir /s /q node_modulesdel yarn.lockdel package-lock.jsonyarn cache cleannpm cache clean --force</code></pre><p>then <code>yarn install</code> or <code>npm install</code> again</p><h2 id="Type-Annotation">Type Annotation</h2><p>Provide a type annotation for ‘loadSavedCredentialsIfExist’. For example:</p><pre><code class="hljs ts"><span class="hljs-keyword">const</span> <span class="hljs-attr">loadSavedCredentialsIfExist</span>: <span class="hljs-keyword">import</span>(<span class="hljs-string">&#x27;googleapis-common/node_modules/google-auth-library/build/src/auth/googleauth&#x27;</span>).<span class="hljs-property">JSONClient</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;  <span class="hljs-keyword">try</span> &#123;    <span class="hljs-keyword">const</span> content = fs.<span class="hljs-title function_">readFileSync</span>(<span class="hljs-variable constant_">TOKEN_PATH</span>).<span class="hljs-title function_">toString</span>();    <span class="hljs-keyword">const</span> credentials = <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">parse</span>(content);    <span class="hljs-comment">// const uri = &#x27;https://www.googleapis.com/oauth2/v3/tokeninfo?access_token=&#x27; + credentials.accestoken;</span>    <span class="hljs-keyword">return</span> google.<span class="hljs-property">auth</span>.<span class="hljs-title function_">fromJSON</span>(credentials);  &#125; <span class="hljs-keyword">catch</span> (err) &#123;    <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;  &#125;&#125;</code></pre><h2 id="Boundary-return-type">Boundary return type</h2><p>Provide a boundary return type for ‘loadSavedCredentialsIfExist’. For example:</p><pre><code class="hljs ts"><span class="hljs-comment">/**</span><span class="hljs-comment"> * Reads previously authorized credentials from the save file.</span><span class="hljs-comment"> *</span><span class="hljs-comment"> * <span class="hljs-doctag">@return</span></span><span class="hljs-comment"> */</span><span class="hljs-keyword">export</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">loadSavedCredentialsIfExist</span>(<span class="hljs-params"></span>): <span class="hljs-keyword">import</span>(<span class="hljs-string">&#x27;googleapis-common/node_modules/google-auth-library/build/src/auth/googleauth&#x27;</span>).<span class="hljs-property">JSONClient</span> &#123;  <span class="hljs-keyword">try</span> &#123;    <span class="hljs-keyword">const</span> content = fs.<span class="hljs-title function_">readFileSync</span>(<span class="hljs-variable constant_">TOKEN_PATH</span>).<span class="hljs-title function_">toString</span>();    <span class="hljs-keyword">const</span> credentials = <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">parse</span>(content);    <span class="hljs-comment">// const uri = &#x27;https://www.googleapis.com/oauth2/v3/tokeninfo?access_token=&#x27; + credentials.accestoken;</span>    <span class="hljs-keyword">return</span> google.<span class="hljs-property">auth</span>.<span class="hljs-title function_">fromJSON</span>(credentials);  &#125; <span class="hljs-keyword">catch</span> (err) &#123;    <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;  &#125;&#125;</code></pre>]]></content:encoded>
      
      
      <category domain="https://www.webmanajemen.com/categories/programming/">programming</category>
      
      
      <category domain="https://www.webmanajemen.com/tags/typescript/">typescript</category>
      
      
      <comments>https://www.webmanajemen.com/2024/02/the-inferred-type-of-x-cannot-be-named-without-a-reference-to.html#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>List loaded posts in HexoJS</title>
      <link>https://www.webmanajemen.com/2024/02/hexo-list-loaded-posts.html</link>
      <guid>https://www.webmanajemen.com/2024/02/hexo-list-loaded-posts.html</guid>
      <pubDate>Mon, 12 Feb 2024 06:50:16 GMT</pubDate>
      
      <description>List loaded posts in HexoJS Basic codes to list loaded hexo posts by default to list all posts you can using below codes: Fix missing description by default hexo not provide property description, you </description>
      
      
      
      <content:encoded><![CDATA[<h2 id="Basic-codes-to-list-loaded-hexo-posts">Basic codes to list loaded hexo posts</h2><p>by default to list all posts you can using below codes:</p><pre><div class="caption">javascript</div><code class="hljs javascript"><span class="hljs-keyword">const</span> posts = hexo.<span class="hljs-property">locals</span>.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;posts&#x27;</span>).<span class="hljs-property">data</span>.<span class="hljs-title function_">map</span>(<span class="hljs-function">(<span class="hljs-params">&#123; title, keywords, description, raw, tags, categories, path &#125;</span>) =&gt;</span> (&#123;    title,    keywords,    description,    raw,    path,    <span class="hljs-attr">tags</span>: tags.<span class="hljs-property">data</span>.<span class="hljs-title function_">map</span>(<span class="hljs-function">(<span class="hljs-params">tag</span>) =&gt;</span> tag.<span class="hljs-property">name</span>),    <span class="hljs-attr">categories</span>: categories.<span class="hljs-property">data</span>.<span class="hljs-title function_">map</span>(<span class="hljs-function">(<span class="hljs-params">category</span>) =&gt;</span> category.<span class="hljs-property">name</span>)&#125;));</code></pre><h2 id="Fix-missing-description">Fix missing description</h2><p>by default hexo not provide property <code>description</code>, you have to add it manually to all your Hexo Markdown posts. Or you provide the <code>post excerpt</code> to assign with missing <code>description</code></p><pre><code class="hljs js"><span class="hljs-keyword">const</span> posts = hexo.<span class="hljs-property">locals</span>.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;posts&#x27;</span>).<span class="hljs-property">data</span>.<span class="hljs-title function_">map</span>(<span class="hljs-function">(<span class="hljs-params">&#123; description, excerpt &#125;</span>) =&gt;</span> (&#123;  <span class="hljs-attr">description</span>: description || excerpt&#125;));</code></pre><h2 id="List-loaded-hexo-posts-in-typescript">List loaded hexo posts in typescript</h2><p>in typescript you should declare custom type</p><pre><code class="hljs ts"><span class="hljs-keyword">interface</span> <span class="hljs-title class_">PostList</span> &#123;  <span class="hljs-attr">title</span>: <span class="hljs-built_in">string</span>;  <span class="hljs-attr">description</span>: <span class="hljs-built_in">string</span>;  <span class="hljs-attr">keywords</span>: <span class="hljs-built_in">string</span>[];  <span class="hljs-attr">tags</span>: <span class="hljs-built_in">string</span>[];  <span class="hljs-attr">categories</span>: <span class="hljs-built_in">string</span>[];  <span class="hljs-attr">permalink</span>: <span class="hljs-built_in">string</span>;&#125;<span class="hljs-keyword">const</span> posts = hexo.<span class="hljs-property">locals</span>  .<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;posts&#x27;</span>)  .<span class="hljs-property">data</span>.<span class="hljs-title function_">map</span>(    <span class="hljs-function">(<span class="hljs-params">&#123;</span></span><span class="hljs-params"><span class="hljs-function">      title,</span></span><span class="hljs-params"><span class="hljs-function">      keywords,</span></span><span class="hljs-params"><span class="hljs-function">      description,</span></span><span class="hljs-params"><span class="hljs-function">      excerpt,</span></span><span class="hljs-params"><span class="hljs-function">      raw,</span></span><span class="hljs-params"><span class="hljs-function">      tags,</span></span><span class="hljs-params"><span class="hljs-function">      categories,</span></span><span class="hljs-params"><span class="hljs-function">      path</span></span><span class="hljs-params"><span class="hljs-function">    &#125;</span>) =&gt;</span> (&#123;      title,      <span class="hljs-comment">// fix non-array keywords</span>      <span class="hljs-attr">keywords</span>: <span class="hljs-title class_">Array</span>.<span class="hljs-title function_">isArray</span>(keywords) ? keywords : [keywords],      <span class="hljs-comment">// fix missing description</span>      <span class="hljs-attr">description</span>: description || excerpt,      raw,      <span class="hljs-attr">permalink</span>: path,      <span class="hljs-attr">tags</span>: tags.<span class="hljs-property">data</span>.<span class="hljs-title function_">map</span>(<span class="hljs-function">(<span class="hljs-params">tag</span>) =&gt;</span> tag.<span class="hljs-property">name</span>),      <span class="hljs-attr">categories</span>: categories.<span class="hljs-property">data</span>.<span class="hljs-title function_">map</span>(<span class="hljs-function">(<span class="hljs-params">category</span>) =&gt;</span> category.<span class="hljs-property">name</span>)    &#125;)  ) <span class="hljs-keyword">as</span> <span class="hljs-title class_">PostList</span>;</code></pre>]]></content:encoded>
      
      
      <category domain="https://www.webmanajemen.com/categories/programming/">programming</category>
      
      
      <category domain="https://www.webmanajemen.com/tags/typescript/">typescript</category>
      
      <category domain="https://www.webmanajemen.com/tags/javascript/">javascript</category>
      
      
      <comments>https://www.webmanajemen.com/2024/02/hexo-list-loaded-posts.html#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Toggle enable/disable github hooks event</title>
      <link>https://www.webmanajemen.com/GitHub/toggle-enable-disable-github-hooks-event.html</link>
      <guid>https://www.webmanajemen.com/GitHub/toggle-enable-disable-github-hooks-event.html</guid>
      <pubDate>Sun, 11 Feb 2024 06:31:05 GMT</pubDate>
      
      <description>How to toggle enable/disable github hooks event</description>
      
      
      
      <content:encoded><![CDATA[<p>Pre-commit hooks are scripts that run locally before a commit is made.<br>They are not specific to GitHub but can be part of your local development environment.<br>Tools like <code>pre-commit</code> allow you to configure and run hooks before each commit.</p><h2 id="enable-git-hooks">enable git hooks</h2><p>To toggle enable git hooks you can do following:</p><pre><code class="hljs bash">git config core.hooksPath ./git-hooks</code></pre><h2 id="disable-git-hooks">disable git hooks</h2><p>To toggle disable git hooks you can do following:</p><pre><code class="hljs bash">git config --<span class="hljs-built_in">unset</span> core.hookspath</code></pre>]]></content:encoded>
      
      
      <category domain="https://www.webmanajemen.com/categories/programming/">programming</category>
      
      
      <category domain="https://www.webmanajemen.com/tags/github/">github</category>
      
      <category domain="https://www.webmanajemen.com/tags/bash/">bash</category>
      
      
      <comments>https://www.webmanajemen.com/GitHub/toggle-enable-disable-github-hooks-event.html#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Visual Studio Code Run task on save</title>
      <link>https://www.webmanajemen.com/2024/02/vscode-run-task-on-save.html</link>
      <guid>https://www.webmanajemen.com/2024/02/vscode-run-task-on-save.html</guid>
      <pubDate>Fri, 09 Feb 2024 16:46:28 GMT</pubDate>
      
      <description>How to run task on save using VSCode</description>
      
      
      
      <content:encoded><![CDATA[<p>In Visual Studio Code, you can configure tasks to run automatically when you save a file using the tasks.json file.<br>Here is a step-by-step guide for configuring tasks to run on save:</p><h2 id="Method-1-Using-plugin-Trigger-Task-on-Save">Method 1: Using plugin Trigger Task on Save</h2><p>You can use the <a href="https://marketplace.visualstudio.com/items?itemName=Gruntfuggly.triggertaskonsave">Trigger Task on Save</a> extension.</p><h3 id="Configure-plugin-settings">Configure plugin settings</h3><p>To set it up, add the following to your <code>.vscode/settings.json</code>:</p><pre><code class="hljs jsonc">&#123;  &quot;task.saveBeforeRun&quot;:&quot;always&quot;,  // task name to run on save action  &quot;triggerTaskOnSave.selectedTask&quot;:&quot;bootRun&quot;,  // enable plugin  &quot;triggerTaskOnSave.on&quot;:true,  // restart task when running  &quot;triggerTaskOnSave.restart&quot;:true,  // run in background  &quot;triggerTaskOnSave.showNotifications&quot;:false,  // run in background  &quot;triggerTaskOnSave.showStatusBarToggle&quot;:false,  &quot;triggerTaskOnSave.tasks&quot;:&#123;    &quot;build&quot;:[      // watch file patterns      &quot;server/**/*.html&quot;,      &quot;jvm/**/*.java&quot;,      &quot;server/**/*.java&quot;    ]  &#125;&#125;</code></pre><h3 id="Configure-tasks-json">Configure tasks.json</h3><pre><code class="hljs jsonc">&#123;  &quot;version&quot;: &quot;2.0.0&quot;,  &quot;tasks&quot;: [    &#123;      // run in background      &quot;isBackground&quot;: true,      // task name      &quot;label&quot;: &quot;bootRun&quot;,      &quot;type&quot;: &quot;shell&quot;,      // command shell to run      &quot;command&quot;: &quot;gradlew bootRun&quot;,      &quot;args&quot;: [],      &quot;group&quot;: &#123;        &quot;kind&quot;: &quot;build&quot;,        &quot;isDefault&quot;: true      &#125;,      // task description      &quot;detail&quot;: &quot;run gradle bootRun&quot;,      &quot;presentation&quot;: &#123;        // run in background        &quot;reveal&quot;: &quot;silent&quot;,        &quot;panel&quot;: &quot;shared&quot;      &#125;,      &quot;problemMatcher&quot;: [],      &quot;options&quot;: &#123;        // working directory        &quot;cwd&quot;: &quot;$&#123;workspaceFolder&#125;&quot;      &#125;,      &quot;runOptions&quot;: &#123;        &quot;runOn&quot;: &quot;default&quot;      &#125;    &#125;  ]&#125;</code></pre><h2 id="Method-2-Using-default-tasks-json">Method 2: Using default tasks.json</h2><ol><li><p>Open your project in Visual Studio Code.</p></li><li><p>Press <code>Ctrl + Shift + B</code> (Windows/Linux) or <code>Cmd + Shift + B</code> (Mac) to open the <strong>“Run Build Task”</strong> menu.</p></li><li><p>Select <strong>“Configure Build Task”</strong> and then choose the type of task you want to create (e.g., “Create tasks.json file from template”).</p></li><li><p>Choose the appropriate template based on your project (e.g., “Others”).</p></li><li><p>Modify the generated “tasks.json” file to include a task that runs on save. For example:</p></li></ol><pre><code class="hljs jsonc">&#123;  &quot;version&quot;: &quot;2.0.0&quot;,  &quot;tasks&quot;: [    &#123;      &quot;label&quot;: &quot;Run On Save&quot;,      &quot;type&quot;: &quot;shell&quot;,      &quot;command&quot;: &quot;your_command_here&quot;,      &quot;group&quot;: &#123;        &quot;kind&quot;: &quot;build&quot;,        &quot;isDefault&quot;: true      &#125;,      &quot;presentation&quot;: &#123;        &quot;reveal&quot;: &quot;always&quot;,        &quot;panel&quot;: &quot;new&quot;      &#125;,      &quot;runOptions&quot;: &#123;        &quot;runOn&quot;: &quot;save&quot;      &#125;    &#125;  ]&#125;</code></pre><p>Replace <strong>“your_command_here”</strong> with the actual command you want to run. Make sure the command is something that can be executed from the command line.</p><blockquote><p>Note: option <strong>“runOn”: “save”</strong> triggers the execution of the task when the file is saved.<br>Make sure the task is properly configured  for your project and that the necessary tools are installed.</p></blockquote><pre><code class="hljs jsonc">&quot;runOptions&quot;: &#123;  &quot;runOn&quot;: &quot;save&quot;&#125;</code></pre><ol start="6"><li>Save the “tasks.json” file.</li></ol><h2 id="Conclusion">Conclusion</h2><p>Now, when you save a file in your project, the specified task will be executed automatically.</p><p>The two tricks above worked when I tested previously. That’s the article about <strong>Run task on save using VSCode (Visual Studio Code)</strong></p>]]></content:encoded>
      
      
      <category domain="https://www.webmanajemen.com/categories/programming/">programming</category>
      
      
      
      <comments>https://www.webmanajemen.com/2024/02/vscode-run-task-on-save.html#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Boostrap 5 Color Theme Switcher</title>
      <link>https://www.webmanajemen.com/2024/02/boostrap-5-color-theme-switcher.html</link>
      <guid>https://www.webmanajemen.com/2024/02/boostrap-5-color-theme-switcher.html</guid>
      <pubDate>Fri, 09 Feb 2024 08:04:25 GMT</pubDate>
      
      <description>Color mode toggler for Bootstrap 5.3.0</description>
      
      
      
      <content:encoded><![CDATA[<p>How to create <strong>Color Mode Switch for Bootstrap 5</strong></p><p>Bootstrap 5 does not come with a built-in theme switcher but you can easily implement one using Use JavaScript and CSS.<br>Here’s a simple example of how you can create a Bootstrap 5 color theme selector:</p><ol><li>Includes Bootstrap CSS from CDN.</li><li>Add an empty <code>&lt;style/&gt;</code> tag with attribute <code>data-bs-theme=&quot;light|dark&quot;</code> where you will automatically insert the CSS of the selected theme.</li><li>Create a toggle switch using the Bootstrap form toggle component.</li></ol><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn btn-sm btn-secondary&quot;</span> <span class="hljs-attr">data-bs-theme-value</span>=<span class="hljs-string">&quot;dark&quot;</span>&gt;</span>Dark<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn btn-sm btn-primary&quot;</span> <span class="hljs-attr">data-bs-theme-value</span>=<span class="hljs-string">&quot;light&quot;</span>&gt;</span>Light<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></code></pre><ol start="4"><li>Use JavaScript to track changes on the switch and update the CSS accordingly.</li></ol><p>main of this trick is</p><pre><code class="hljs plaintext">&lt;div data-bs-theme=&quot;light|dark&quot;&gt;&lt;!-- your html code here --&gt;&lt;/div&gt;</code></pre><p>and you should add <code>bg-[dark|light]</code> or <code>text-[light|dark]</code> on wrapper to get switcher works</p><h3 id="HTML">HTML</h3><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">data-bs-theme</span>=<span class="hljs-string">&quot;light&quot;</span>&gt;</span><span class="hljs-comment">&lt;!-- here the indicator --&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;container mt-3&quot;</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;mb-2&quot;</span>&gt;</span>      switcher      <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn btn-sm btn-secondary&quot;</span> <span class="hljs-attr">data-bs-theme-value</span>=<span class="hljs-string">&quot;dark&quot;</span>&gt;</span>Dark<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span>      <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn btn-sm btn-primary&quot;</span> <span class="hljs-attr">data-bs-theme-value</span>=<span class="hljs-string">&quot;light&quot;</span>&gt;</span>Light<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span>      <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn btn-sm btn-danger&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&quot;refreshPage()&quot;</span>&gt;</span>Refresh<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;text-light bg-dark p-4&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;description&quot;</span>&gt;</span>      <span class="hljs-tag">&lt;<span class="hljs-name">h1</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;text-center&quot;</span>&gt;</span>Boostrap 5.3 Color Theme Switcher<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span>      main of this trick is      <span class="hljs-tag">&lt;<span class="hljs-name">pre</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;m-2&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">code</span>&gt;</span><span class="hljs-symbol">&amp;lt;</span>div data-bs-theme=<span class="hljs-symbol">&amp;quot;</span>light|dark<span class="hljs-symbol">&amp;quot;</span><span class="hljs-symbol">&amp;gt;</span><span class="hljs-symbol">&amp;lt;</span>!-- your html code here --<span class="hljs-symbol">&amp;gt;</span><span class="hljs-symbol">&amp;lt;</span>/div<span class="hljs-symbol">&amp;gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">code</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">pre</span>&gt;</span>      and you should add <span class="hljs-tag">&lt;<span class="hljs-name">kbd</span>&gt;</span>bg-[dark|light]<span class="hljs-tag">&lt;/<span class="hljs-name">kbd</span>&gt;</span> or <span class="hljs-tag">&lt;<span class="hljs-name">kbd</span>&gt;</span>text-[light|dark]<span class="hljs-tag">&lt;/<span class="hljs-name">kbd</span>&gt;</span> on wrapper to get switcher works    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>Override class <span class="hljs-tag">&lt;<span class="hljs-name">kbd</span>&gt;</span>*-light<span class="hljs-tag">&lt;/<span class="hljs-name">kbd</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">table</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;table table-light&quot;</span>&gt;</span>      <span class="hljs-tag">&lt;<span class="hljs-name">thead</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span>          <span class="hljs-tag">&lt;<span class="hljs-name">th</span> <span class="hljs-attr">scope</span>=<span class="hljs-string">&quot;col&quot;</span>&gt;</span>#<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span>          <span class="hljs-tag">&lt;<span class="hljs-name">th</span> <span class="hljs-attr">scope</span>=<span class="hljs-string">&quot;col&quot;</span>&gt;</span>First<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span>          <span class="hljs-tag">&lt;<span class="hljs-name">th</span> <span class="hljs-attr">scope</span>=<span class="hljs-string">&quot;col&quot;</span>&gt;</span>Last<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span>          <span class="hljs-tag">&lt;<span class="hljs-name">th</span> <span class="hljs-attr">scope</span>=<span class="hljs-string">&quot;col&quot;</span>&gt;</span>Handle<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span>      <span class="hljs-tag">&lt;/<span class="hljs-name">thead</span>&gt;</span>      <span class="hljs-tag">&lt;<span class="hljs-name">tbody</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span>          <span class="hljs-tag">&lt;<span class="hljs-name">th</span> <span class="hljs-attr">scope</span>=<span class="hljs-string">&quot;row&quot;</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span>          <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>Mark<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span>          <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>Otto<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span>          <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>@mdo<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span>          <span class="hljs-tag">&lt;<span class="hljs-name">th</span> <span class="hljs-attr">scope</span>=<span class="hljs-string">&quot;row&quot;</span>&gt;</span>2<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span>          <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>Jacob<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span>          <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>Thornton<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span>          <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>@fat<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span>          <span class="hljs-tag">&lt;<span class="hljs-name">th</span> <span class="hljs-attr">scope</span>=<span class="hljs-string">&quot;row&quot;</span>&gt;</span>3<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span>          <span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">colspan</span>=<span class="hljs-string">&quot;2&quot;</span>&gt;</span>Larry the Bird<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span>          <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>@twitter<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span>      <span class="hljs-tag">&lt;/<span class="hljs-name">tbody</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;card&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;width: 18rem;&quot;</span>&gt;</span>      <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://getbootstrap.com/docs/5.3/assets/brand/bootstrap-social.png&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;card-img-top&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;...&quot;</span>&gt;</span>      <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;card-body&quot;</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">h5</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;card-title&quot;</span>&gt;</span>Card title<span class="hljs-tag">&lt;/<span class="hljs-name">h5</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;card-text&quot;</span>&gt;</span>Some quick example text to build on the card title and make up the bulk of the card&#x27;s content.<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn btn-primary&quot;</span>&gt;</span>Go somewhere<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span>      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></code></pre><h3 id="Javascript">Javascript</h3><pre><code class="hljs js"><span class="hljs-meta">&quot;use strict&quot;</span>;<span class="hljs-comment">/*!</span><span class="hljs-comment"> * Color mode toggler for Bootstrap&#x27;s</span><span class="hljs-comment"> * Copyright 2011-2023 The Bootstrap Authors</span><span class="hljs-comment"> * Licensed under the Creative Commons Attribution 3.0 Unported License.</span><span class="hljs-comment"> * Modified by L3n4r0x</span><span class="hljs-comment"> */</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;  <span class="hljs-keyword">const</span> <span class="hljs-title function_">getPreferredTheme</span> = (<span class="hljs-params"></span>) =&gt; &#123;    <span class="hljs-keyword">const</span> storedTheme = <span class="hljs-variable language_">localStorage</span>.<span class="hljs-title function_">getItem</span>(<span class="hljs-string">&quot;theme&quot;</span>);    <span class="hljs-keyword">if</span> (storedTheme) &#123;      <span class="hljs-keyword">return</span> storedTheme;    &#125;    <span class="hljs-keyword">return</span> <span class="hljs-variable language_">window</span>.<span class="hljs-title function_">matchMedia</span>(<span class="hljs-string">&quot;(prefers-color-scheme: dark)&quot;</span>).<span class="hljs-property">matches</span>      ? <span class="hljs-string">&quot;dark&quot;</span>      : <span class="hljs-string">&quot;light&quot;</span>;  &#125;;  <span class="hljs-keyword">function</span> <span class="hljs-title function_">setTheme</span>(<span class="hljs-params">theme</span>) &#123;    <span class="hljs-keyword">let</span> value = <span class="hljs-string">&quot;light&quot;</span>;    <span class="hljs-keyword">if</span> (      theme === <span class="hljs-string">&quot;auto&quot;</span> &amp;&amp;      <span class="hljs-variable language_">window</span>.<span class="hljs-title function_">matchMedia</span>(<span class="hljs-string">&quot;(prefers-color-scheme: dark)&quot;</span>).<span class="hljs-property">matches</span>    ) &#123;      value = <span class="hljs-string">&quot;dark&quot;</span>;    &#125; <span class="hljs-keyword">else</span> &#123;      value = theme;    &#125;    <span class="hljs-comment">// hide button switcher</span>    <span class="hljs-keyword">if</span> (value == <span class="hljs-string">&quot;dark&quot;</span>) &#123;      <span class="hljs-comment">// show light button</span>      <span class="hljs-variable language_">document</span>        .<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&quot;[data-bs-theme-value=dark]&quot;</span>)        .<span class="hljs-property">classList</span>.<span class="hljs-title function_">add</span>(<span class="hljs-string">&quot;d-none&quot;</span>);      <span class="hljs-variable language_">document</span>        .<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&quot;[data-bs-theme-value=light]&quot;</span>)        .<span class="hljs-property">classList</span>.<span class="hljs-title function_">remove</span>(<span class="hljs-string">&quot;d-none&quot;</span>);    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (value == <span class="hljs-string">&quot;light&quot;</span>) &#123;      <span class="hljs-variable language_">document</span>        .<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&quot;[data-bs-theme-value=light]&quot;</span>)        .<span class="hljs-property">classList</span>.<span class="hljs-title function_">add</span>(<span class="hljs-string">&quot;d-none&quot;</span>);      <span class="hljs-variable language_">document</span>        .<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&quot;[data-bs-theme-value=dark]&quot;</span>)        .<span class="hljs-property">classList</span>.<span class="hljs-title function_">remove</span>(<span class="hljs-string">&quot;d-none&quot;</span>);    &#125;    <span class="hljs-keyword">const</span> wrapper = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelectorAll</span>(<span class="hljs-string">&quot;[data-bs-theme]&quot;</span>);    <span class="hljs-comment">// change value data-bs-theme</span>    wrapper.<span class="hljs-title function_">forEach</span>(<span class="hljs-function">(<span class="hljs-params">el</span>) =&gt;</span> &#123;      el.<span class="hljs-title function_">setAttribute</span>(<span class="hljs-string">&quot;data-bs-theme&quot;</span>, value);    &#125;);    <span class="hljs-keyword">const</span> isDark = value === <span class="hljs-string">&quot;dark&quot;</span>;    <span class="hljs-keyword">const</span> elements = <span class="hljs-title class_">Array</span>.<span class="hljs-title function_">from</span>(<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelectorAll</span>(<span class="hljs-string">&quot;[class*=-light]&quot;</span>))      .<span class="hljs-title function_">concat</span>(<span class="hljs-title class_">Array</span>.<span class="hljs-title function_">from</span>(<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelectorAll</span>(<span class="hljs-string">&quot;[class*=-white]&quot;</span>)))      .<span class="hljs-title function_">concat</span>(<span class="hljs-title class_">Array</span>.<span class="hljs-title function_">from</span>(<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelectorAll</span>(<span class="hljs-string">&quot;[class*=-dark]&quot;</span>)));    <span class="hljs-keyword">const</span> regex = <span class="hljs-regexp">/(-(light|white|dark)$)/g</span>;    elements.<span class="hljs-title function_">forEach</span>(<span class="hljs-function">(<span class="hljs-params">el</span>) =&gt;</span> &#123;      <span class="hljs-keyword">const</span> className = el.<span class="hljs-property">className</span>.<span class="hljs-title function_">replace</span>(        regex,        isDark ? <span class="hljs-string">&quot;-dark&quot;</span> : <span class="hljs-string">&quot;-light&quot;</span>      );      el.<span class="hljs-title function_">setAttribute</span>(<span class="hljs-string">&quot;class&quot;</span>, className);    &#125;);  &#125;  <span class="hljs-comment">// auto switch theme (uncomment)</span>  <span class="hljs-title function_">setTheme</span>(<span class="hljs-title function_">getPreferredTheme</span>());  <span class="hljs-comment">// listen click</span>  <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelectorAll</span>(<span class="hljs-string">&quot;[data-bs-theme-value]&quot;</span>).<span class="hljs-title function_">forEach</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params">toggle</span>) &#123;    toggle.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&quot;click&quot;</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;      <span class="hljs-keyword">const</span> theme = toggle.<span class="hljs-title function_">getAttribute</span>(<span class="hljs-string">&quot;data-bs-theme-value&quot;</span>);      <span class="hljs-variable language_">localStorage</span>.<span class="hljs-title function_">setItem</span>(<span class="hljs-string">&quot;theme&quot;</span>, theme);      <span class="hljs-title function_">setTheme</span>(theme);    &#125;);  &#125;);&#125;)();<span class="hljs-keyword">function</span> <span class="hljs-title function_">refreshPage</span>(<span class="hljs-params"></span>) &#123;  <span class="hljs-keyword">const</span> a = <span class="hljs-string">&quot;reload&quot;</span>,    b = <span class="hljs-string">&quot;location&quot;</span>;  <span class="hljs-variable language_">window</span>[b][a]();&#125;</code></pre><h2 id="Conclusion">Conclusion</h2><p>You can customize styles in the JavaScript code to match your desired color theme for light and dark modes.<br>Adjust background color, text color, and other styles as needed.</p><h3 id="Live-result-Boostrap-5-Color-Theme-Switcher">Live result Boostrap 5 Color Theme Switcher</h3><p class="codepen" embed_version="2" height="300" preview="false" theme_id="11473" default_tab="result" data-user="dimaslanjaka" data-slug-hash="eYPXvOL" theme="light" version="2.0">See the <a href="https://codepen.io/dimaslanjaka/pen/eYPXvOL">pen</a> on <a href="//codepen.io" rel="nofollow noopener">CodePen</a>.</p><script async src="https://production-assets.codepen.io/assets/embed/ei.js"></script><p><img src="https://github.com/dimaslanjaka/source-posts/assets/12471057/7da67737-0c30-45b8-ad13-b162e43ee37c" alt=""></p>]]></content:encoded>
      
      
      <category domain="https://www.webmanajemen.com/categories/programming/">programming</category>
      
      
      <category domain="https://www.webmanajemen.com/tags/javascript/">javascript</category>
      
      <category domain="https://www.webmanajemen.com/tags/css/">css</category>
      
      <category domain="https://www.webmanajemen.com/tags/html/">html</category>
      
      
      <comments>https://www.webmanajemen.com/2024/02/boostrap-5-color-theme-switcher.html#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Include livereload in spring boot web</title>
      <link>https://www.webmanajemen.com/2024/02/spring-livereload-javascript.html</link>
      <guid>https://www.webmanajemen.com/2024/02/spring-livereload-javascript.html</guid>
      <pubDate>Thu, 08 Feb 2024 19:32:14 GMT</pubDate>
      
      <description>Include livereload in spring boot web LiveReload is a tool that automatically reloads your web application whenever you alter the source code or static resources. To integrate LiveReload into a Spring</description>
      
      
      
      <content:encoded><![CDATA[<p>LiveReload is a tool that automatically reloads your web application whenever you alter the source code or static resources. To integrate LiveReload into a Spring Boot web application, follow these steps:</p><h2 id="Add-LiveReload-Server-as-a-Dependency">Add LiveReload Server as a Dependency</h2><p>Add the LiveReload server as a dependency to your project. If you use Maven, you can include the following dependencies in your <code>pom.xml</code> file:</p><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-devtools<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">optional</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">optional</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></code></pre><p>If you’re using Gradle, include the following in your build.gradle file:</p><pre><code class="hljs groovy">dependencies &#123;    implementation <span class="hljs-string">&#x27;org.springframework.boot:spring-boot-devtools&#x27;</span>&#125;</code></pre><h2 id="Enable-LiveReload">Enable LiveReload</h2><p>Enable LiveReload in either <code>application.properties</code> or <code>application.yml</code>.<br>Open the <code>src/main/resources/application.properties</code> or <code>src/main/resources/application.yml</code> file and add the following property:</p><h3 id="PROPERTIES">PROPERTIES</h3><pre><code class="hljs properties"><span class="hljs-attr">spring.devtools.livereload.enabled</span>=<span class="hljs-string">true</span><span class="hljs-attr">spring.devtools.livereload.livereload</span>=<span class="hljs-string">true</span></code></pre><h3 id="YAML">YAML</h3><pre><code class="hljs yml"><span class="hljs-attr">spring:</span>    <span class="hljs-attr">devtools:</span>        <span class="hljs-attr">restart:</span>            <span class="hljs-attr">enabled:</span> <span class="hljs-literal">true</span>        <span class="hljs-attr">livereload:</span>            <span class="hljs-attr">enabled:</span> <span class="hljs-literal">true</span></code></pre><h2 id="Install-livereload-into-your-html">Install livereload into your html</h2><p>Call the livereload javascript into your html template. For example using <code>thymeleaf</code>:</p><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">th:inline</span>=<span class="hljs-string">&quot;javascript&quot;</span>&gt;</span><span class="language-javascript"></span><span class="language-javascript">  (<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;</span><span class="language-javascript">    <span class="hljs-keyword">const</span> port = <span class="hljs-comment">/*[($&#123;@environment.getProperty(&#x27;server.port&#x27;)&#125;)]*/</span> <span class="hljs-string">&#x27;8080&#x27;</span>;</span><span class="language-javascript">    <span class="hljs-keyword">if</span> (location.<span class="hljs-property">port</span> == port &amp;&amp; location.<span class="hljs-property">hostname</span> == <span class="hljs-string">&#x27;localhost&#x27;</span>) &#123;</span><span class="language-javascript">      <span class="hljs-keyword">const</span> script = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">createElement</span>(<span class="hljs-string">&#x27;script&#x27;</span>);</span><span class="language-javascript">      script.<span class="hljs-property">src</span> = <span class="hljs-string">&#x27;http://localhost:35729/livereload.js&#x27;</span>;</span><span class="language-javascript">      script.<span class="hljs-property">async</span> = <span class="hljs-literal">true</span>;</span><span class="language-javascript">      <span class="hljs-variable language_">document</span>.<span class="hljs-property">body</span>.<span class="hljs-title function_">appendChild</span>(script);</span><span class="language-javascript">    &#125;</span><span class="language-javascript">  &#125;)();</span><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></code></pre><h2 id="Open-the-Application-in-the-Browser">Open the Application in the Browser:</h2><p>Launch your program in the browser.</p><p>Now, whenever you make changes to your code or resources, the LiveReload server will detect them and reload the browser to reflect the changes.</p><p>Keep in mind that <code>spring-boot-devtools</code> is only advised for development and should not be used in production. Also, keep in mind that LiveReload may not operate completely in all cases, particularly if you’re utilizing sophisticated frameworks or setups.</p>]]></content:encoded>
      
      
      <category domain="https://www.webmanajemen.com/categories/programming/">programming</category>
      
      
      <category domain="https://www.webmanajemen.com/tags/java/">java</category>
      
      <category domain="https://www.webmanajemen.com/tags/kotlin/">kotlin</category>
      
      
      <comments>https://www.webmanajemen.com/2024/02/spring-livereload-javascript.html#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>spring Content-Type application/x-www-form-urlencoded;charset=UTF-8 is not supported</title>
      <link>https://www.webmanajemen.com/2024/02/spring-content-type-applicationx-www-form-urlencodedcharsetutf-8-is-not-supported.html</link>
      <guid>https://www.webmanajemen.com/2024/02/spring-content-type-applicationx-www-form-urlencodedcharsetutf-8-is-not-supported.html</guid>
      <pubDate>Wed, 07 Feb 2024 11:02:20 GMT</pubDate>
      
      <description>spring Content-Type application/x-www-form-urlencoded;charset=UTF-8 is not supported Usually, the message Content-Type application/x-www-form-urlencoded;charset=UTF-8 is not supported suggests that th</description>
      
      
      
      <content:encoded><![CDATA[<p>Usually, the message “Content-Type ‘application/x-www-form-urlencoded;charset=UTF-8’ is not supported” suggests that there is a problem with the content type that was given in the request header. This issue frequently happens while using an API or web application. The errors log like sample below:</p><pre><code class="hljs log">21-06-10 15:32:10.363 ERROR [-nio-8080-exec-8] c.e.pay.common.ResponseErrorHandler :50 - Base Exception caughtorg.springframework.web.HttpMediaTypeNotSupportedException: Content type &#x27;application/x-not supported at org.springframework.web.servlet.mvc.method.annotation.AbstractMessageConverterMethodArgumentResolver.readWithMessageConverters(AbstractMessageConverterMethodArgumentResolver.java:235) at org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyMethodProcessor.readWithMessageConverters(RequestResponseBodyMethodProcessor.java:147) at org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyMethodProcessor.resolveArgument(RequestResponseBodyMethodProcessor.java:125) at org.springframework.web.method.support.HandlerMethodArgumentResolverComposite.resolveArgument(HandlerMethodArgumentResolverComposite.java:99) at org.springframework.web.method.support.InvocableHandlerMethod.getMethodArgumentValues(InvocableHandlerMethod.java:161) at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:128) at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:110) at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:832) at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:743) at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:85) at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:961) at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:895) at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:967) at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:869) at javax.servlet. at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:843) at javax.servlet. at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:292) at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:207) at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:52) at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:240) at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:207) at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:121) at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:240) at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:207) at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:212) at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:106) at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:502) at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:141) at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:79) at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:88) at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:528) at org.apache.coyote. at org.apache.coyote.AbstractProtocol$AbstractConnectionHandler.process(AbstractProtocol.java:687) at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1520) at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.run(NioEndpoint.java:1476) at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128) at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628) at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61) at java.base/java.lang.Thread.run(Thread.java:835)</code></pre><p>The following actions can be taken to troubleshoot and fix this problem:</p><h2 id="Post-data-model-type">Post data model type</h2><p>Modify your post data model type, for example <code>ProxyAddModel.java</code></p><pre><code class="hljs java"><span class="hljs-keyword">package</span> web.models;<span class="hljs-keyword">import</span> jakarta.validation.constraints.NotNull;<span class="hljs-keyword">import</span> lombok.AllArgsConstructor;<span class="hljs-keyword">import</span> lombok.Getter;<span class="hljs-keyword">import</span> lombok.NoArgsConstructor;<span class="hljs-keyword">import</span> lombok.Setter;<span class="hljs-meta">@Getter</span><span class="hljs-meta">@Setter</span><span class="hljs-meta">@NoArgsConstructor</span><span class="hljs-meta">@AllArgsConstructor</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ProxyAddModel</span> &#123;    <span class="hljs-meta">@NotNull(message = &quot;Proxies should not be empty&quot;)</span>    <span class="hljs-keyword">public</span> String proxies;&#125;</code></pre><h2 id="Controller-method">Controller method</h2><p>Modify your controller method to accept <code>Content-Type: application/x-www-form-urlencoded;</code> using <code>consumes = &#123; MediaType.APPLICATION_FORM_URLENCODED_VALUE &#125;</code>, and add jakarta validation <code>@Valid</code> before Post data model type.</p><p>Below here working code:</p><pre><code class="hljs java"><span class="hljs-keyword">package</span> web.proxy;<span class="hljs-keyword">import</span> java.util.List;<span class="hljs-keyword">import</span> org.springframework.http.MediaType;<span class="hljs-keyword">import</span> org.springframework.http.ResponseEntity;<span class="hljs-keyword">import</span> org.springframework.security.access.prepost.PreAuthorize;<span class="hljs-keyword">import</span> org.springframework.stereotype.Controller;<span class="hljs-keyword">import</span> org.springframework.ui.Model;<span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.GetMapping;<span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.PostMapping;<span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RequestParam;<span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.ResponseBody;<span class="hljs-keyword">import</span> com.fasterxml.jackson.databind.JsonNode;<span class="hljs-keyword">import</span> jakarta.validation.Valid;<span class="hljs-keyword">import</span> utility.proxy.ProxyModel;<span class="hljs-keyword">import</span> utility.proxy.ProxyUtils;<span class="hljs-keyword">import</span> web.models.AjaxResponse;<span class="hljs-keyword">import</span> web.models.ProxyAddModel;<span class="hljs-meta">@Controller</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ProxyList</span> &#123;    <span class="hljs-meta">@PostMapping(value = &#123; &quot;/proxy/add&quot; &#125;,</span><span class="hljs-meta">            consumes = &#123; MediaType.APPLICATION_FORM_URLENCODED_VALUE &#125;)</span>    <span class="hljs-meta">@ResponseBody</span>    <span class="hljs-keyword">public</span> ResponseEntity&lt;JsonNode&gt; <span class="hljs-title function_">addReceiver</span><span class="hljs-params">(<span class="hljs-meta">@Valid</span> ProxyAddModel postBody)</span> &#123;        <span class="hljs-keyword">if</span> (postBody != <span class="hljs-literal">null</span> &amp;&amp; postBody.proxies != <span class="hljs-literal">null</span>) &#123;            <span class="hljs-comment">// process post body</span>            <span class="hljs-type">ProxyUtils</span> <span class="hljs-variable">proxyUtils</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ProxyUtils</span>();            proxyUtils.fromLocal(postBody.proxies);        &#125;        <span class="hljs-comment">// return &quot;redirect:/proxy?success=add&quot;;</span>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AjaxResponse</span>(<span class="hljs-literal">false</span>, <span class="hljs-string">&quot;proxies added&quot;</span>).toHttpResponse();    &#125;&#125;</code></pre><p>If you want redirect user after post body received, you can using below codes:</p><pre><code class="hljs java"><span class="hljs-meta">@PostMapping(value = &#123; &quot;/proxy/add&quot; &#125;,</span><span class="hljs-meta">        consumes = &#123; MediaType.APPLICATION_FORM_URLENCODED_VALUE &#125;)</span><span class="hljs-comment">// @ResponseBody</span><span class="hljs-keyword">public</span> String <span class="hljs-title function_">addReceiver</span><span class="hljs-params">(<span class="hljs-meta">@Valid</span> ProxyAddModel postBody)</span> &#123;    <span class="hljs-keyword">if</span> (postBody != <span class="hljs-literal">null</span> &amp;&amp; postBody.proxies != <span class="hljs-literal">null</span>) &#123;        <span class="hljs-comment">// process post body</span>        <span class="hljs-type">ProxyUtils</span> <span class="hljs-variable">proxyUtils</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ProxyUtils</span>();        proxyUtils.fromLocal(postBody.proxies);    &#125;    <span class="hljs-comment">// return new AjaxResponse(false, &quot;proxies added&quot;).toHttpResponse();</span>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;redirect:/proxy?success=add&quot;</span>;&#125;</code></pre><h2 id="Conclusion">Conclusion</h2><p>now test send form post to your endpoint.</p><p><img src="https://github.com/dimaslanjaka/source-posts/assets/12471057/3fb94ad5-f947-408e-a180-31bc2d286a8c" alt=""></p>]]></content:encoded>
      
      
      <category domain="https://www.webmanajemen.com/categories/programming/">programming</category>
      
      
      <category domain="https://www.webmanajemen.com/tags/java/">java</category>
      
      <category domain="https://www.webmanajemen.com/tags/kotlin/">kotlin</category>
      
      
      <comments>https://www.webmanajemen.com/2024/02/spring-content-type-applicationx-www-form-urlencodedcharsetutf-8-is-not-supported.html#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>How to create dynamic toast with flowbite-react</title>
      <link>https://www.webmanajemen.com/2024/02/flowbite-react-dynamic-toast.html</link>
      <guid>https://www.webmanajemen.com/2024/02/flowbite-react-dynamic-toast.html</guid>
      <pubDate>Sun, 04 Feb 2024 07:16:11 GMT</pubDate>
      
      <description>How to create dynamic toast with flowbite-react In this article you will learn of How to create toast with flowbite-react dynamically, see below screenshoots. Below is an example of how you can create</description>
      
      
      
      <content:encoded><![CDATA[<p>In this article you will learn of How to create toast with flowbite-react dynamically, see below screenshoots.</p><p><img src="https://github.com/dimaslanjaka/source-posts/assets/12471057/ff040935-f69b-420b-b3c7-35f0ba6cc6ba" alt=""><br><img src="https://github.com/dimaslanjaka/source-posts/assets/12471057/884b397e-dbda-4b54-8a0c-af2e386dc447" alt=""></p><p>Below is an example of how you can create a dynamic toast component in React using <code>flowbite-react</code>.</p><h2 id="Create-flowbite-toast-element">Create flowbite toast element</h2><p>save below codes with filename <code>FlowbiteToast.tsx</code> in folder <code>src/component</code></p><pre><code class="hljs tsx"><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">Toast</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;flowbite-react&#x27;</span>;<span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span>;<span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">HiFire</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react-icons/hi&#x27;</span>;<span class="hljs-keyword">interface</span> <span class="hljs-title class_">FlowbiteToastProps</span> &#123;  [<span class="hljs-attr">key</span>: <span class="hljs-built_in">string</span>]: <span class="hljs-built_in">any</span>;  <span class="hljs-comment">/** show toast indicator */</span>  <span class="hljs-attr">showToast</span>: <span class="hljs-built_in">boolean</span>;  <span class="hljs-comment">/** parent state handler to set `showToast` useful for dismissable toast */</span>  <span class="hljs-attr">handler</span>: <span class="hljs-function">(<span class="hljs-params">showToast: <span class="hljs-built_in">boolean</span></span>) =&gt;</span> <span class="hljs-built_in">any</span>;&#125;<span class="hljs-keyword">const</span> <span class="hljs-title class_">FlowbiteToast</span>: <span class="hljs-title class_">React</span>.<span class="hljs-property">FC</span>&lt;<span class="hljs-title class_">FlowbiteToastProps</span>&gt; = <span class="hljs-function">(<span class="hljs-params">&#123; showToast, handler &#125;</span>) =&gt;</span> &#123;  <span class="hljs-comment">// show toast when indicator=true</span>  <span class="hljs-keyword">return</span> (    showToast &amp;&amp; (      <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Toast</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;absolute top-5 end-5 z-50 shadow&quot;</span>&gt;</span></span><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;inline-flex h-8 w-8 shrink-0 items-center justify-center rounded-lg bg-cyan-100 text-cyan-500 dark:bg-cyan-800 dark:text-cyan-200&quot;</span>&gt;</span></span><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">HiFire</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;h-5 w-5&quot;</span> /&gt;</span></span><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;ml-3 text-sm font-normal&quot;</span>&gt;</span></span><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;mb-1 text-sm font-semibold text-gray-900 dark:text-white&quot;</span>&gt;</span>Update available<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;mb-2 text-sm font-normal&quot;</span>&gt;</span>A new software version is available for download.<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">Toast.Toggle</span></span></span><span class="hljs-tag"><span class="language-xml">          <span class="hljs-attr">onDismiss</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> &#123;</span><span class="language-xml">            // hide toast when X button clicked</span><span class="language-xml">            handler(false);</span><span class="language-xml">          &#125;&#125;</span><span class="language-xml">        /&gt;</span><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">Toast</span>&gt;</span></span>    )  );&#125;;<span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title class_">FlowbiteToast</span>;</code></pre><h2 id="Insert-FlowbiteToast-in-parent-react-element">Insert <code>&lt;FlowbiteToast/&gt;</code> in parent react element</h2><p>for example we create <code>Login.tsx</code> and showing flowbite toast after executing <code>fetch</code> ajax.</p><pre><code class="hljs tsx"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span>;<span class="hljs-keyword">import</span> <span class="hljs-title class_">FlowbiteToast</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./component/FlowbiteToast&#x27;</span>;<span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">Login</span>(<span class="hljs-params"></span>) &#123;  <span class="hljs-comment">// declare parent toast state</span>  <span class="hljs-keyword">const</span> [showToast, setShowToast] = <span class="hljs-title class_">React</span>.<span class="hljs-title function_">useState</span>(<span class="hljs-literal">false</span>);  <span class="hljs-title function_">useEffect</span>(<span class="hljs-function">() =&gt;</span> &#123;    <span class="hljs-comment">// execute fetch ajax</span>    <span class="hljs-title function_">fetch</span>(<span class="hljs-string">&#x27;https://httpbin.org/post&#x27;</span>, &#123;        <span class="hljs-attr">method</span>: <span class="hljs-string">&#x27;POST&#x27;</span>,        <span class="hljs-attr">headers</span>: &#123;        <span class="hljs-string">&#x27;Accept&#x27;</span>: <span class="hljs-string">&#x27;application/json, text/plain, */*&#x27;</span>,        <span class="hljs-string">&#x27;Content-Type&#x27;</span>: <span class="hljs-string">&#x27;application/json&#x27;</span>        &#125;,        <span class="hljs-attr">body</span>: <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">stringify</span>(&#123;<span class="hljs-attr">a</span>: <span class="hljs-number">7</span>, <span class="hljs-attr">str</span>: <span class="hljs-string">&#x27;Some string: &amp;=&amp;&#x27;</span>&#125;)      &#125;).<span class="hljs-title function_">then</span>(<span class="hljs-function">() =&gt;</span> &#123;        <span class="hljs-comment">// show toast</span>        <span class="hljs-title function_">setShowToast</span>(<span class="hljs-literal">true</span>);      &#125;);  &#125;, []);  <span class="hljs-keyword">return</span> (<span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">main</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">FlowbiteToast</span> <span class="hljs-attr">showToast</span>=<span class="hljs-string">&#123;showToast&#125;</span> <span class="hljs-attr">handler</span>=<span class="hljs-string">&#123;setShowToast&#125;</span> /&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">main</span>&gt;</span></span>);&#125;</code></pre><h2 id="Conclusion">Conclusion</h2><p>Now your dynamic flowbite-react toast ready to modify. Here <a href="https://github.com/dimaslanjaka/webpack-boilerplate/commit/d220c84525d3538186790d72a53df275d6472384">My Own FLowbite React Dynamic Toast</a></p><p>Thanks for reading my article of:</p><ul><li>flowbite-react toast dynamic</li></ul>]]></content:encoded>
      
      
      <category domain="https://www.webmanajemen.com/categories/programming/">programming</category>
      
      
      <category domain="https://www.webmanajemen.com/tags/typescript/">typescript</category>
      
      <category domain="https://www.webmanajemen.com/tags/javascript/">javascript</category>
      
      
      <comments>https://www.webmanajemen.com/2024/02/flowbite-react-dynamic-toast.html#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Exported variable has or is using name from external module</title>
      <link>https://www.webmanajemen.com/2024/02/typescript-error-private-name.html</link>
      <guid>https://www.webmanajemen.com/2024/02/typescript-error-private-name.html</guid>
      <pubDate>Sat, 03 Feb 2024 12:04:52 GMT</pubDate>
      
      <description>How to fix exported variable using private type from external module</description>
      
      
      
      <content:encoded><![CDATA[<p>In TypeScript, when you have an exported variable that uses a private type from an external module, you may run into issues because private types are not accessible outside of their module.</p><p>answers for exported variable that uses a private type from an external module:</p><ul><li><a href="https://stackoverflow.com/questions/61456979/solve-react-typescript-error-export-variable-is-using-name-from-external-modul/77933352#77933352">Exported variable ‘yourVariable’ has or is using name ‘TypeName’ from external module “module/path” but cannot be named. ts(4023)</a></li><li><a href="https://stackoverflow.com/questions/43900035/ts4023-exported-variable-x-has-or-is-using-name-y-from-external-module-but">TS4023: Exported Variable <x> has or is using name <y> from external module but cannot be named</a></li><li><a href="https://stackoverflow.com/questions/62538330/exported-variable-x-has-or-is-using-name-y-from-external-module-z-but-cannot-be">Exported variable X has or is using name Y from external module Z but cannot be named</a></li><li><a href="https://www.google.com/search?q=Exported+variable+%27projectConfig%27+has+or+is+using+name+%27Config%27+from+external+module+site:stackoverflow.com&amp;client=firefox-b-d&amp;sca_esv=5c40852b81bce253&amp;sxsrf=ACQVn0_cbfoN2nZaFBculzZNSiBrQy0xKw:1706986272038&amp;sa=X&amp;ved=2ahUKEwig_oWz64-EAxXH4jgGHU4tD10QrQIoBHoECBMQBQ&amp;biw=1366&amp;bih=615&amp;dpr=1">Exported variable ‘projectConfig’ has or is using name ‘Config’ from external module site:stackoverflow.com</a></li></ul><p>To fix exported variable using private type from external module, you can consider a few approaches:</p><h2 id="Fix-steps">Fix steps</h2><p>just declare the type, for example:</p><p>in external lib has code like below:</p><pre><code class="hljs ts"><span class="hljs-keyword">interface</span> privateProperty &#123;  <span class="hljs-attr">name</span>: <span class="hljs-built_in">string</span>;&#125;<span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> config = &#123;  <span class="hljs-attr">propName</span>: &#123;&#125; <span class="hljs-keyword">as</span> privateProperty&#125;</code></pre><p>in your code</p><pre><code class="hljs ts"><span class="hljs-comment">// this config[&#x27;propName&#x27;] contains non-exported type/interface</span><span class="hljs-keyword">import</span> &#123; config &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;external-lib&#x27;</span>;<span class="hljs-comment">// declare new type from private property</span><span class="hljs-keyword">type</span> Y = config[<span class="hljs-string">&#x27;propName&#x27;</span>]; <span class="hljs-comment">// or typeof config[&#x27;propName&#x27;]</span><span class="hljs-comment">// declare new type that extends Y</span><span class="hljs-keyword">export</span> <span class="hljs-keyword">interface</span> X <span class="hljs-keyword">extends</span> Y &#123;&#125;<span class="hljs-comment">// apply interface X which contains Private Type Name</span><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> yourVariable = &#123;&#125; <span class="hljs-keyword">as</span> X;</code></pre><h2 id="Conclusion">Conclusion</h2><p>done. now the problem fixed</p><p>result</p><p>before<br><a href="https://i.stack.imgur.com/6zwQS.png"><img src="https://i.stack.imgur.com/6zwQS.png" alt=""></a></p><p>after<br><a href="https://i.stack.imgur.com/uVeAs.png"><img src="https://i.stack.imgur.com/uVeAs.png" alt=""></a></p>]]></content:encoded>
      
      
      <category domain="https://www.webmanajemen.com/categories/programming/">programming</category>
      
      
      <category domain="https://www.webmanajemen.com/tags/typescript/">typescript</category>
      
      
      <comments>https://www.webmanajemen.com/2024/02/typescript-error-private-name.html#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Enable CORS globally in spring boot</title>
      <link>https://www.webmanajemen.com/2024/02/spring-boot-enable-cors-globally.html</link>
      <guid>https://www.webmanajemen.com/2024/02/spring-boot-enable-cors-globally.html</guid>
      <pubDate>Fri, 02 Feb 2024 22:29:15 GMT</pubDate>
      
      <description>How spring boot enable CORS globally</description>
      
      
      
      <content:encoded><![CDATA[<p>To enable Cross-Origin Resource Sharing (CORS) globally in a Spring Boot application with Spring Security,<br>you can configure CORS in your security configuration class.<br>Here’s an example of codes how you can do this:</p><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.List;<span class="hljs-keyword">import</span> javax.sql.DataSource;<span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<span class="hljs-keyword">import</span> org.springframework.context.annotation.Bean;<span class="hljs-keyword">import</span> org.springframework.context.annotation.Configuration;<span class="hljs-keyword">import</span> org.springframework.security.authentication.AuthenticationManager;<span class="hljs-keyword">import</span> org.springframework.security.config.Customizer;<span class="hljs-keyword">import</span> org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;<span class="hljs-keyword">import</span> org.springframework.security.config.annotation.web.builders.HttpSecurity;<span class="hljs-keyword">import</span> org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;<span class="hljs-keyword">import</span> org.springframework.security.config.annotation.web.configurers.AbstractHttpConfigurer;<span class="hljs-keyword">import</span> org.springframework.security.core.userdetails.UserDetailsService;<span class="hljs-keyword">import</span> org.springframework.security.web.SecurityFilterChain;<span class="hljs-keyword">import</span> org.springframework.security.web.util.matcher.AntPathRequestMatcher;<span class="hljs-keyword">import</span> org.springframework.web.cors.CorsConfiguration;<span class="hljs-keyword">import</span> org.springframework.web.cors.CorsConfigurationSource;<span class="hljs-keyword">import</span> org.springframework.web.cors.UrlBasedCorsConfigurationSource;<span class="hljs-meta">@Configuration</span><span class="hljs-meta">@EnableWebSecurity</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SecurityConfig</span> &#123;    <span class="hljs-meta">@Bean</span>    <span class="hljs-keyword">public</span> SecurityFilterChain <span class="hljs-title function_">filterChain</span><span class="hljs-params">(HttpSecurity http)</span> <span class="hljs-keyword">throws</span> Exception &#123;        <span class="hljs-comment">// disable CSRF (optional)</span>        http.csrf(AbstractHttpConfigurer::disable);        <span class="hljs-comment">// enable CORS globally</span>        <span class="hljs-comment">// by default uses a Bean by the name of corsConfigurationSource</span>        http.cors(Customizer.withDefaults());        <span class="hljs-comment">// your others http configuration here</span>        <span class="hljs-comment">// build the http configurations</span>        <span class="hljs-keyword">return</span> http.build();    &#125;    <span class="hljs-meta">@Bean</span>    CorsConfigurationSource <span class="hljs-title function_">corsConfigurationSource</span><span class="hljs-params">()</span> &#123;        <span class="hljs-type">CorsConfiguration</span> <span class="hljs-variable">configuration</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CorsConfiguration</span>();        configuration.setAllowedHeaders(List.of(<span class="hljs-string">&quot;*&quot;</span>));        configuration.setAllowedOrigins(List.of(<span class="hljs-string">&quot;*&quot;</span>));        configuration.setAllowedMethods(List.of(<span class="hljs-string">&quot;*&quot;</span>));        <span class="hljs-type">UrlBasedCorsConfigurationSource</span> <span class="hljs-variable">source</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UrlBasedCorsConfigurationSource</span>();        source.registerCorsConfiguration(<span class="hljs-string">&quot;/**&quot;</span>, configuration);        <span class="hljs-keyword">return</span> source;    &#125;&#125;</code></pre><p><a href="https://stackoverflow.com/a/76319932/6404439">reference</a></p><p><strong>Description of <code>CorsConfiguration</code> methods</strong></p><ul><li><p><strong>setAllowedHeaders</strong>-&gt; you have to specify which parameters are allowed to be sent to the backend services through the front-end app, for example, if you are using Bearer/Basic Token Authorization methods, you need to pass your JWT-Token through the “Authorization” header. So you need to make sure that backed would accept this data accordingly and for this purpose, you must put “Authorization” in the list of Allowed-Headers.</p></li><li><p><strong>setAllowedMethods</strong>-&gt; Do not forget to put “OPTIONS” method in the list for Pre-flight process. Don’t worry, <a href="https://developer.mozilla.org/en-US/docs/Glossary/Preflight_request">read more here!</a></p></li><li><p><strong>setAllowCredentials</strong>-&gt; If you are using Authorization header, set it True.</p></li><li><p><strong>setExposedHeaders</strong>-&gt; If you are returning data through Response Headers, you need to specify them here. for example, some APIs are designed to return Authorization token after success /authentication through Response Headers. Thus, the related header needs to be exposed accordingly.</p></li><li><p><strong>setAllowedOrigins</strong>-&gt; You must specify the domains that are eligible to send requests to your backend applications. for example, if your application is hosted on <a href="https://penguin.com">https://penguin.com</a> and your APIs are on <a href="https://api.penguin.com">https://api.penguin.com</a>, you need to allow “<a href="https://penguing.com">https://penguing.com</a>” to send requests to your backend. Also, you are able to pass wildcard (*) to allow any domains to send requests to your backend. But it’s recommended to not use “any” unless you are providing public APIs or you are deploying in the non-production environments.</p></li></ul><h2 id="Customize">Customize</h2><p>You can customize header allowed like <code>Authorization</code>, request methods, etc. Below is example of codes:</p><pre><code class="hljs java"><span class="hljs-type">CorsConfiguration</span> <span class="hljs-variable">corsConfiguration</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CorsConfiguration</span>();<span class="hljs-comment">// allow cors when these headers sent</span>corsConfiguration.setAllowedHeaders(List.of(<span class="hljs-string">&quot;Authorization&quot;</span>, <span class="hljs-string">&quot;Cache-Control&quot;</span>, <span class="hljs-string">&quot;Content-Type&quot;</span>));<span class="hljs-comment">// allow for all hostname of CORS came from,</span><span class="hljs-comment">// or you can specify hostnames List.of(&quot;example.com&quot;, &quot;sub.example.com&quot;)</span>corsConfiguration.setAllowedOrigins(List.of(<span class="hljs-string">&quot;*&quot;</span>));<span class="hljs-comment">// allow only these request method</span>corsConfiguration.setAllowedMethods(List.of(<span class="hljs-string">&quot;GET&quot;</span>, <span class="hljs-string">&quot;POST&quot;</span>, <span class="hljs-string">&quot;PUT&quot;</span>, <span class="hljs-string">&quot;DELETE&quot;</span>, <span class="hljs-string">&quot;PUT&quot;</span>,<span class="hljs-string">&quot;OPTIONS&quot;</span>,<span class="hljs-string">&quot;PATCH&quot;</span>, <span class="hljs-string">&quot;DELETE&quot;</span>));<span class="hljs-comment">// allow credentials</span>corsConfiguration.setAllowCredentials(<span class="hljs-literal">true</span>);<span class="hljs-comment">// expose Authorization header</span>corsConfiguration.setExposedHeaders(List.of(<span class="hljs-string">&quot;Authorization&quot;</span>));</code></pre><p><a href="https://stackoverflow.com/a/66590699/6404439">reference</a></p><h2 id="Conclusion">Conclusion</h2><p>Now you need to customize the CORS configuration based on your need. Adjust the configuration according to your specific needs. Ensure that your Spring Boot application has the necessary dependencies, such as spring-boot-starter-security and spring-boot-starter-web.</p><p><img src="https://github.com/dimaslanjaka/source-posts/assets/12471057/c5f5e304-9e64-4cc0-b763-8df4020fc83d" alt=""></p>]]></content:encoded>
      
      
      <category domain="https://www.webmanajemen.com/categories/programming/">programming</category>
      
      
      <category domain="https://www.webmanajemen.com/tags/java/">java</category>
      
      <category domain="https://www.webmanajemen.com/tags/kotlin/">kotlin</category>
      
      
      <comments>https://www.webmanajemen.com/2024/02/spring-boot-enable-cors-globally.html#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>How to render single post hexo</title>
      <link>https://www.webmanajemen.com/2024/01/hexo-render-single-post.html</link>
      <guid>https://www.webmanajemen.com/2024/01/hexo-render-single-post.html</guid>
      <pubDate>Mon, 29 Jan 2024 11:40:36 GMT</pubDate>
      
      <description>example javascript codes to render single markdown post with HexoJS</description>
      
      
      
      <content:encoded><![CDATA[<p>According <a href="https://github.com/orgs/hexojs/discussions/5203#discussioncomment-5946132">my discussion on github</a> I solved how to render single post markdown using HexoJS.</p><h2 id="Render-existing-loaded-post">Render existing loaded post</h2><p>Basically render a single post you need load database, like below:</p><pre><code class="hljs js"><span class="hljs-keyword">const</span> hexo = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;hexo&#x27;</span>)();<span class="hljs-comment">// Replace &#x27;my-first-post&#x27; with the actual filename of your post (without the file extension).</span><span class="hljs-keyword">const</span> postToRender = <span class="hljs-string">&#x27;my-first-post&#x27;</span>;<span class="hljs-comment">// Initialize Hexo</span>hexo.<span class="hljs-title function_">init</span>().<span class="hljs-title function_">then</span>(<span class="hljs-function">() =&gt;</span> &#123;  <span class="hljs-comment">// Load the Hexo database</span>  <span class="hljs-keyword">return</span> hexo.<span class="hljs-title function_">load</span>();&#125;).<span class="hljs-title function_">then</span>(<span class="hljs-function">() =&gt;</span> &#123;  <span class="hljs-comment">// Find the specified post</span>  <span class="hljs-keyword">const</span> post = hexo.<span class="hljs-property">locals</span>.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;posts&#x27;</span>).<span class="hljs-title function_">filter</span>(<span class="hljs-function"><span class="hljs-params">post</span> =&gt;</span> post.<span class="hljs-property">slug</span> === postToRender)[<span class="hljs-number">0</span>];  <span class="hljs-keyword">if</span> (post) &#123;    <span class="hljs-comment">// Render the post</span>    <span class="hljs-keyword">return</span> post.<span class="hljs-title function_">render</span>().<span class="hljs-title function_">then</span>(<span class="hljs-function">() =&gt;</span> &#123;      <span class="hljs-comment">// Access the rendered HTML content</span>      <span class="hljs-keyword">const</span> renderedContent = post.<span class="hljs-property">content</span>;      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(renderedContent);    &#125;);  &#125; <span class="hljs-keyword">else</span> &#123;    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">error</span>(<span class="hljs-string">`Post &#x27;<span class="hljs-subst">$&#123;postToRender&#125;</span>&#x27; not found.`</span>);  &#125;&#125;).<span class="hljs-title function_">catch</span>(<span class="hljs-function"><span class="hljs-params">err</span> =&gt;</span> &#123;  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">error</span>(err);&#125;).<span class="hljs-title function_">finally</span>(<span class="hljs-function">() =&gt;</span> &#123;  <span class="hljs-comment">// Stop Hexo gracefully</span>  <span class="hljs-keyword">return</span> hexo.<span class="hljs-title function_">exit</span>();&#125;);</code></pre><h2 id="Render-single-post-using-markdown-file-location-path">Render single post using markdown file location path</h2><p>You also can render any frontmatter markdown files in specific location by initialize -&gt; load plugins -&gt; render post. See below snippets:</p><pre><code class="hljs js"><span class="hljs-keyword">import</span> <span class="hljs-title class_">Hexo</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;hexo&#x27;</span>;<span class="hljs-keyword">import</span> path <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;path&#x27;</span>;<span class="hljs-keyword">const</span> hexo = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Hexo</span>(__dirname);<span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">main</span>(<span class="hljs-params"></span>) &#123;  <span class="hljs-comment">// intialie and load external plugins</span>  <span class="hljs-keyword">await</span> hexo.<span class="hljs-title function_">init</span>().<span class="hljs-title function_">then</span>(<span class="hljs-function">() =&gt;</span> hexo.<span class="hljs-title function_">loadPlugin</span>(<span class="hljs-built_in">require</span>.<span class="hljs-title function_">resolve</span>(<span class="hljs-string">&#x27;hexo-shortcodes&#x27;</span>)));  <span class="hljs-comment">// load hexo</span>  <span class="hljs-keyword">await</span> hexo.<span class="hljs-title function_">load</span>(<span class="hljs-keyword">async</span> () =&gt; &#123;    <span class="hljs-comment">// render single post</span>    <span class="hljs-keyword">const</span> post = <span class="hljs-keyword">await</span> hexo.<span class="hljs-property">post</span>.<span class="hljs-title function_">render</span>(path.<span class="hljs-title function_">join</span>(__dirname, <span class="hljs-string">&#x27;source/lang/php.md&#x27;</span>));    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(post);  &#125;);&#125;<span class="hljs-title function_">main</span>();</code></pre><p>This script initializes Hexo, loads the Hexo database, finds the specified post, renders the post, and then outputs the rendered HTML content.<br>And test result below<br><img src="https://github.com/hexojs/hexo/assets/12471057/b4edd0a3-79d7-4aed-b1fe-daa7e54e99ab" alt=""></p><h2 id="Conclusion">Conclusion</h2><p>And all the shortcodes work fine and according to what I want, just need the post body (post.content) to validate shortcode result using JSDOM or cheerio</p>]]></content:encoded>
      
      
      <category domain="https://www.webmanajemen.com/categories/programming/">programming</category>
      
      
      <category domain="https://www.webmanajemen.com/tags/typescript/">typescript</category>
      
      <category domain="https://www.webmanajemen.com/tags/javascript/">javascript</category>
      
      <category domain="https://www.webmanajemen.com/tags/hexo/">hexo</category>
      
      
      <comments>https://www.webmanajemen.com/2024/01/hexo-render-single-post.html#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>spring boot with eclipse gradle plugin</title>
      <link>https://www.webmanajemen.com/2024/01/eclipse-gradle-plugin-sync-build-with-spring-boot.html</link>
      <guid>https://www.webmanajemen.com/2024/01/eclipse-gradle-plugin-sync-build-with-spring-boot.html</guid>
      <pubDate>Thu, 25 Jan 2024 20:38:40 GMT</pubDate>
      
      <description>sync compiled classes from eclipse gradle plugin with spring boot devtools</description>
      
      
      
      <content:encoded><![CDATA[<p>Spring Boot DevTools provides a set of tools that can help improve the development experience. One of the features is automatic class reloading, which can be particularly useful during development. Eclipse, on the other hand, has its own set of tools for Java development. To sync compiled classes from the Eclipse Gradle plugin with Spring Boot DevTools, you can follow these general steps:</p><h2 id="Ensure-Spring-Boot-DevTools-is-Configured">Ensure Spring Boot DevTools is Configured</h2><ul><li>Make sure that the <code>spring-boot-devtools</code> dependency is included in your Spring Boot project. Add the following dependency to your <code>build.gradle</code> file:</li></ul><pre><code class="hljs gradle"><span class="hljs-keyword">dependencies</span> &#123;    implementation <span class="hljs-string">&#x27;org.springframework.boot:spring-boot-devtools&#x27;</span>&#125;</code></pre><h2 id="Configure-gradle">Configure gradle</h2><h3 id="Configure-eclipse-gradle-plugin">Configure <code>eclipse</code> gradle plugin</h3><pre><code class="hljs gradle">eclipse &#123;    <span class="hljs-keyword">classpath</span> &#123;        defaultOutputDir = <span class="hljs-keyword">file</span>(<span class="hljs-string">&#x27;build/eclipse&#x27;</span>)        baseSourceOutputDir = <span class="hljs-keyword">file</span>(<span class="hljs-string">&#x27;build/classes/java&#x27;</span>)        <span class="hljs-keyword">file</span>.whenMerged &#123;            entries.<span class="hljs-keyword">each</span> &#123; entry -&gt;                <span class="hljs-keyword">if</span> (entry.kind == <span class="hljs-string">&#x27;src&#x27;</span> &amp;&amp; entry.hasProperty(<span class="hljs-string">&#x27;output&#x27;</span>)) &#123;                    <span class="hljs-keyword">if</span> (entry.output != <span class="hljs-keyword">null</span>) entry.output = entry.output.replace(<span class="hljs-string">&#x27;bin/&#x27;</span>, <span class="hljs-string">&quot;build/&quot;</span>)                &#125;            &#125;        &#125;    &#125;&#125;</code></pre><h3 id="Configure-JavaCompile-tasks">Configure <code>JavaCompile</code> tasks</h3><p>According <a href="https://github.com/spring-projects/spring-framework/wiki/Upgrading-to-Spring-Framework-6.x#parameter-name-retention">Upgrading to Spring Framework 6.x</a> we need apply <code>-parameters</code> jvm arguments into compiler to make it works.</p><p><strong>Issues about this config</strong></p><ul><li><a href="https://github.com/spring-projects/spring-boot/issues/38723">Error &quot;Name for argument of type [java.util.UUID] not specified, and parameter name information not found in class file either&quot;with spring-boot 3.2.0 upgrade</a></li></ul><h4 id="Groovy-DSL">Groovy DSL</h4><pre><code class="hljs gradle">tasks.withType(JavaCompile).configureEach &#123;    <span class="hljs-keyword">options</span>.compilerArgs.add(<span class="hljs-string">&quot;-parameters&quot;</span>)&#125;</code></pre><h4 id="Kotlin-DSL">Kotlin DSL</h4><pre><code class="hljs gradle">tasks.withType&lt;JavaCompile&gt;() &#123;    <span class="hljs-keyword">options</span>.compilerArgs.add(<span class="hljs-string">&quot;-parameters&quot;</span>)&#125;</code></pre><h3 id="Configure-jar-and-bootJar-tasks">Configure <code>jar</code> and <code>bootJar</code> tasks</h3><p>In Gradle, if you want to create a JAR file and exclude duplicate files, you can use the DuplicatesStrategy.EXCLUDE strategy. This strategy excludes duplicates from the final JAR by keeping only the first occurrence of each duplicate file.</p><pre><code class="hljs plaintext">// Optional: Specify the main class if your JAR is executableapplication &#123;    mainClassName = &#x27;web.MainApplication&#x27;&#125;// Configure the JAR taskjar &#123;    duplicatesStrategy = DuplicatesStrategy.EXCLUDE    manifest &#123;        attributes &quot;Start-Class&quot;: &quot;web.MainApplication&quot;    &#125;&#125;// Configure the spring JAR taskbootJar &#123;    duplicatesStrategy = DuplicatesStrategy.EXCLUDE    manifest &#123;        attributes &quot;Start-Class&quot;: &quot;web.MainApplication&quot;    &#125;&#125;</code></pre><blockquote><p>Replace ‘web.MainApplication’ with the actual main class of your application.</p><p>Note: The <code>application</code> block is optional and is only necessary if your JAR is executable, and you want to specify the main class. If your JAR is not executable, you can omit the <code>application</code> block.</p></blockquote><h2 id="Initialize-configuration-for-Eclipse">Initialize configuration for Eclipse</h2><p>When working with Gradle in Eclipse, you can use the <code>eclipse</code> plugin to generate Eclipse-specific configuration files. These files help to set up your Eclipse project based on the dependencies and structure defined in your Gradle build script. To initialize the Eclipse configuration for your Gradle project, follow these step:</p><pre><code class="hljs bash">gradlew eclipse --no-daemon</code></pre><blockquote><p><code>--no-daemon</code> parameter will kill the java when app exit (CTRL+C or Close terminal)</p></blockquote><h2 id="Configure-Eclipse-for-Automatic-Building">Configure Eclipse for Automatic Building</h2><ul><li><p>In Eclipse, go to <code>Project</code> &gt; <code>Build Automatically</code> to ensure that automatic building is enabled.-   <strong>Configure Gradle Build in Eclipse:</strong></p></li><li><p>Ensure that your Eclipse project is properly configured to use the Gradle build system. You can do this by right-clicking on your project in the Eclipse Project Explorer, selecting <code>Properties</code>, and then navigating to <code>Project Facets</code>. Make sure that the <code>Gradle</code> facet is selected.-   <strong>Enable Automatic Project Refresh in Eclipse:</strong></p></li><li><p>Go to <code>Window</code> &gt; <code>Preferences</code> &gt; <code>General</code> &gt; <code>Workspace</code>.</p></li><li><p>Enable the option “Refresh using native hooks or polling”.</p></li><li><p>Enable the option “Refresh on access”.-   <strong>Configure Spring Boot DevTools in <code>application.properties</code>:</strong></p></li><li><p>In your <code>src/main/resources/application.properties</code> (or <code>application.yml</code>) file, ensure that DevTools is configured to enable class reloading:</p></li></ul><pre><code class="hljs properties"><span class="hljs-attr">spring.devtools.restart.enabled</span>=<span class="hljs-string">true</span></code></pre><h2 id="Run-the-Application-with-DevTools">Run the Application with DevTools</h2><ul><li>Run your Spring Boot application from Eclipse with the Gradle plugin.</li><li>Spring Boot DevTools should detect changes in your class files and automatically trigger a restart.</li></ul><pre><code class="hljs bash">gradlew bootrun --no-daemon</code></pre><blockquote><p><code>--no-daemon</code> parameter will kill the java when app exit (CTRL+C or Close terminal)</p></blockquote><h2 id="Conclusion">Conclusion</h2><p>Now spring boot livereload working even you changes the <code>java</code>, <code>kotlin</code>, <code>groovy</code> or <code>resources</code> files.</p><p>Keep in mind that the effectiveness of DevTools may depend on various factors, and not all changes can be hot-reloaded. Certain types of changes, such as those to method signatures or certain structural changes, may still require a manual restart.</p><p>By following these steps, you should be able to synchronize the compiled classes from the Eclipse Gradle plugin with Spring Boot DevTools during development. If you encounter any issues, consider checking the Spring Boot DevTools documentation and the Eclipse documentation for further troubleshooting.</p>]]></content:encoded>
      
      
      <category domain="https://www.webmanajemen.com/categories/programming/">programming</category>
      
      
      <category domain="https://www.webmanajemen.com/tags/java/">java</category>
      
      <category domain="https://www.webmanajemen.com/tags/gradle/">gradle</category>
      
      <category domain="https://www.webmanajemen.com/tags/kotlin/">kotlin</category>
      
      <category domain="https://www.webmanajemen.com/tags/groovy/">groovy</category>
      
      
      <comments>https://www.webmanajemen.com/2024/01/eclipse-gradle-plugin-sync-build-with-spring-boot.html#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>auto configure classpath config using eclipse gradle plugin</title>
      <link>https://www.webmanajemen.com/2024/01/auto-configure-classpath-config-using-eclipse-gradle-plugin.html</link>
      <guid>https://www.webmanajemen.com/2024/01/auto-configure-classpath-config-using-eclipse-gradle-plugin.html</guid>
      <pubDate>Thu, 25 Jan 2024 16:59:16 GMT</pubDate>
      
      <description>configuring classpath and build settings automatically for an Eclipse project that uses the Gradle build tool</description>
      
      
      
      <content:encoded><![CDATA[<p>according <a href="https://github.com/redhat-developer/vscode-java/issues/1615">this issue</a> about automatically configuring classpath and build settings for an Eclipse project that uses the Gradle build tool. Configuring classpath and build settings in Eclipse for a Gradle project involves a few steps. Here is a framework for auto-configuring the classpath using the Eclipse Gradle plugin:</p><h2 id="Install-Eclipse-Gradle-Plugin">Install Eclipse Gradle Plugin</h2><p>activate <code>eclipse</code> plugin each gradle subprojects</p><h3 id="Using-plugins-block">Using plugins block</h3><pre><code class="hljs gradle">plugins &#123;  id <span class="hljs-string">&quot;eclipse&quot;</span>&#125;</code></pre><h2 id="Using-native-classpath">Using native classpath</h2><pre><code class="hljs gradle">apply plugin: <span class="hljs-string">&#x27;eclipse&#x27;</span></code></pre><h2 id="Configure-eclipse-classpath-generation">Configure eclipse .classpath generation</h2><p>Configure eclipse .classpath generation using <code>eclipse</code> block</p><h3 id="Groovy">Groovy</h3><pre><code class="hljs gradle">eclipse &#123;  <span class="hljs-keyword">classpath</span> &#123;    defaultOutputDir = <span class="hljs-keyword">file</span>(<span class="hljs-string">&#x27;build/eclipse&#x27;</span>)    <span class="hljs-keyword">file</span>.whenMerged &#123;      entries.<span class="hljs-keyword">each</span> &#123; entry -&gt;        <span class="hljs-keyword">if</span> (entry.kind == <span class="hljs-string">&#x27;src&#x27;</span> &amp;&amp; entry.hasProperty(<span class="hljs-string">&#x27;output&#x27;</span>)) &#123;          entry.output = entry.output.replace(<span class="hljs-string">&#x27;bin/&#x27;</span>, <span class="hljs-string">&quot;build/eclipse/&quot;</span>)        &#125;      &#125;    &#125;  &#125;&#125;</code></pre><h3 id="Kotlin-DSL">Kotlin DSL</h3><pre><code class="hljs kotlin"><span class="hljs-keyword">import</span> org.gradle.plugins.ide.eclipse.model.Classpath<span class="hljs-keyword">import</span> org.gradle.plugins.ide.eclipse.model.SourceFolderplugins &#123;    java    eclipse&#125;buildDir = file(<span class="hljs-string">&quot;build/gradle&quot;</span>)eclipse &#123;    classpath &#123;        defaultOutputDir = file(<span class="hljs-string">&quot;build/eclipse&quot;</span>)        file &#123;            whenMerged(                    Action&lt;Classpath&gt; &#123; -&gt;                        entries.filter &#123; it.kind == <span class="hljs-string">&quot;src&quot;</span> &#125;.forEach &#123;                            <span class="hljs-keyword">if</span> (it <span class="hljs-keyword">is</span> SourceFolder) &#123;                                it.output = it.output.replace(<span class="hljs-string">&quot;bin/&quot;</span>, <span class="hljs-string">&quot;build/eclipse/&quot;</span>)                            &#125;                        &#125;                    &#125;            )        &#125;    &#125;&#125;</code></pre><h3 id="Sync-with-gradle-build-output-classes-and-resources">Sync with gradle build output classes and resources</h3><p>You also can sync between eclipse output and gradle output classes and resources with below gradle config:</p><pre><code class="hljs gradle">eclipse &#123;    <span class="hljs-keyword">classpath</span> &#123;        defaultOutputDir = <span class="hljs-keyword">file</span>(<span class="hljs-string">&#x27;build&#x27;</span>)        baseSourceOutputDir = <span class="hljs-keyword">file</span>(<span class="hljs-string">&#x27;build/classes/java&#x27;</span>)        <span class="hljs-keyword">file</span>.whenMerged &#123;            entries.<span class="hljs-keyword">each</span> &#123; entry -&gt;                <span class="hljs-keyword">if</span> (entry.kind == <span class="hljs-string">&#x27;src&#x27;</span> &amp;&amp; entry.hasProperty(<span class="hljs-string">&#x27;output&#x27;</span>)) &#123;                    <span class="hljs-keyword">if</span> (entry.path == <span class="hljs-string">&quot;src/main/java&quot;</span>) &#123;                        entry.output = <span class="hljs-string">&quot;build/classes/java/main&quot;</span>                    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (entry.path == <span class="hljs-string">&quot;src/main/resources&quot;</span>) &#123;                        entry.output = <span class="hljs-string">&quot;build/resources/main&quot;</span>                    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (entry.path == <span class="hljs-string">&quot;src/test/resources&quot;</span>) &#123;                        entry.output = <span class="hljs-string">&quot;build/resources/test&quot;</span>                    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (entry.path == <span class="hljs-string">&quot;src/test/java&quot;</span>) &#123;                        entry.output = <span class="hljs-string">&quot;build/classes/java/test&quot;</span>                    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (entry.path == <span class="hljs-string">&quot;src/test/groovy&quot;</span>) &#123;                        entry.output = <span class="hljs-string">&quot;build/classes/groovy/test&quot;</span>                    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (entry.path == <span class="hljs-string">&quot;src/main/groovy&quot;</span>) &#123;                        entry.output = <span class="hljs-string">&quot;build/classes/groovy/main&quot;</span>                    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (entry.path == <span class="hljs-string">&quot;src/main/kotlin&quot;</span>) &#123;                        entry.output = <span class="hljs-string">&quot;build/classes/kotlin/main&quot;</span>                    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (entry.path == <span class="hljs-string">&quot;src/test/kotlin&quot;</span>) &#123;                        entry.output = <span class="hljs-string">&quot;build/classes/kotlin/test&quot;</span>                    &#125; <span class="hljs-keyword">else</span>  &#123;                        <span class="hljs-keyword">println</span>(entry.path)                    &#125;                    <span class="hljs-keyword">if</span> (entry.output != <span class="hljs-keyword">null</span>) entry.output = entry.output.replace(<span class="hljs-string">&#x27;bin/&#x27;</span>, <span class="hljs-string">&quot;build/&quot;</span>)                &#125;            &#125;        &#125;    &#125;&#125;</code></pre><h2 id="Generate-Eclipse-Files">Generate Eclipse Files</h2><ul><li>Open a terminal and navigate to your project directory.</li><li>Run the following Gradle command to generate Eclipse files:</li></ul><pre><code class="hljs bash">gradlew eclipse</code></pre><blockquote><p>This task generates the necessary .project and .classpath files for your Eclipse project.</p></blockquote><h2 id="Conclusion">Conclusion</h2><p>By following these steps, you should have successfully configured your Eclipse project with the Gradle build tool. Keep in mind that these instructions may vary slightly depending on your specific project structure and requirements.</p>]]></content:encoded>
      
      
      <category domain="https://www.webmanajemen.com/categories/programming/">programming</category>
      
      
      <category domain="https://www.webmanajemen.com/tags/java/">java</category>
      
      <category domain="https://www.webmanajemen.com/tags/gradle/">gradle</category>
      
      <category domain="https://www.webmanajemen.com/tags/kotlin/">kotlin</category>
      
      
      <comments>https://www.webmanajemen.com/2024/01/auto-configure-classpath-config-using-eclipse-gradle-plugin.html#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>classpath config for gradle within vscode redhat java extension</title>
      <link>https://www.webmanajemen.com/2024/01/classpath-eclipse-within-vscode-redhat-java-for-gradle.html</link>
      <guid>https://www.webmanajemen.com/2024/01/classpath-eclipse-within-vscode-redhat-java-for-gradle.html</guid>
      <pubDate>Thu, 25 Jan 2024 12:45:04 GMT</pubDate>
      
      <description>configuration classpath for gradle in eclipse or vscode redhat java</description>
      
      
      
      <content:encoded><![CDATA[<p>Configuring the classpath for a Gradle project in Visual Studio Code (VSCode) involves specifying the dependencies and build settings.<br>Here’s a guide for both IDEs:</p><h2 id="Search-java-source">Search java source</h2><p>Searching source configs inside <code>.classpath</code> and <code>*.prefs</code> files</p><ul><li>Search java source config by substring <code>path=&quot;src/main/java&quot;</code></li><li>Replace output attribute to gradle build folder <code>output=&quot;build/classes/java/main&quot;</code></li></ul><p>result looks like:</p><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">classpathentry</span> <span class="hljs-attr">excluding</span>=<span class="hljs-string">&quot;**/*.txt&quot;</span> <span class="hljs-attr">output</span>=<span class="hljs-string">&quot;build/classes/java/main&quot;</span> <span class="hljs-attr">kind</span>=<span class="hljs-string">&quot;src&quot;</span> <span class="hljs-attr">path</span>=<span class="hljs-string">&quot;src/main/java&quot;</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">attributes</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">attribute</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;gradle_scope&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;main&quot;</span>/&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">attribute</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;gradle_used_by_scope&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;main,test&quot;</span>/&gt;</span>  <span class="hljs-tag">&lt;/<span class="hljs-name">attributes</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">classpathentry</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">classpathentry</span> <span class="hljs-attr">output</span>=<span class="hljs-string">&quot;build/classes/java/test&quot;</span> <span class="hljs-attr">kind</span>=<span class="hljs-string">&quot;src&quot;</span> <span class="hljs-attr">path</span>=<span class="hljs-string">&quot;src/test/java&quot;</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">attributes</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">attribute</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;gradle_scope&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;test&quot;</span>/&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">attribute</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;gradle_used_by_scope&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;test&quot;</span>/&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">attribute</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;test&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;true&quot;</span>/&gt;</span>  <span class="hljs-tag">&lt;/<span class="hljs-name">attributes</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">classpathentry</span>&gt;</span></code></pre><ul><li>Search annotation config <code>bin/generated-sources/annotations</code> and <code>bin/generated-test-sources/annotations</code></li><li>Replace with <code>build/generated/sources/annotationProcessor/java/main</code> and <code>build/generated/sources/annotationProcessor/java/test</code></li></ul><p><img src="https://github.com/dimaslanjaka/source-posts/assets/12471057/97281fc6-22cb-4347-a5e6-3e9872ab8c76" alt=""><br><img src="https://github.com/dimaslanjaka/source-posts/assets/12471057/ee62a458-68b8-4e9a-9a0d-264d8f4d3d60" alt=""></p><ul><li>Verify all output directory are configured by searching subtring <code>bin/</code> for <code>.classpath</code> and <code>*.prefs</code> files</li></ul><p><img src="https://github.com/dimaslanjaka/source-posts/assets/12471057/3e264d78-f046-47d0-85f0-ffceedd0bbe1" alt=""></p><p>My full working <code>.classpath</code> configuration</p><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">classpath</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">classpathentry</span> <span class="hljs-attr">excluding</span>=<span class="hljs-string">&quot;**/*.txt&quot;</span> <span class="hljs-attr">kind</span>=<span class="hljs-string">&quot;src&quot;</span> <span class="hljs-attr">output</span>=<span class="hljs-string">&quot;build/classes/java/main&quot;</span> <span class="hljs-attr">path</span>=<span class="hljs-string">&quot;src/main/java&quot;</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">attributes</span>&gt;</span>      <span class="hljs-tag">&lt;<span class="hljs-name">attribute</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;gradle_scope&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;main&quot;</span>/&gt;</span>      <span class="hljs-tag">&lt;<span class="hljs-name">attribute</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;gradle_used_by_scope&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;main,test&quot;</span>/&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">attributes</span>&gt;</span>  <span class="hljs-tag">&lt;/<span class="hljs-name">classpathentry</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">classpathentry</span> <span class="hljs-attr">kind</span>=<span class="hljs-string">&quot;src&quot;</span> <span class="hljs-attr">output</span>=<span class="hljs-string">&quot;build/classes/groovy/main&quot;</span> <span class="hljs-attr">path</span>=<span class="hljs-string">&quot;src/main/groovy&quot;</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">attributes</span>&gt;</span>      <span class="hljs-tag">&lt;<span class="hljs-name">attribute</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;gradle_scope&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;main&quot;</span>/&gt;</span>      <span class="hljs-tag">&lt;<span class="hljs-name">attribute</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;gradle_used_by_scope&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;main,test&quot;</span>/&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">attributes</span>&gt;</span>  <span class="hljs-tag">&lt;/<span class="hljs-name">classpathentry</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">classpathentry</span> <span class="hljs-attr">kind</span>=<span class="hljs-string">&quot;src&quot;</span> <span class="hljs-attr">output</span>=<span class="hljs-string">&quot;build/resources/main&quot;</span> <span class="hljs-attr">path</span>=<span class="hljs-string">&quot;src/main/resources&quot;</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">attributes</span>&gt;</span>      <span class="hljs-tag">&lt;<span class="hljs-name">attribute</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;gradle_scope&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;main&quot;</span>/&gt;</span>      <span class="hljs-tag">&lt;<span class="hljs-name">attribute</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;gradle_used_by_scope&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;main,test&quot;</span>/&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">attributes</span>&gt;</span>  <span class="hljs-tag">&lt;/<span class="hljs-name">classpathentry</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">classpathentry</span> <span class="hljs-attr">kind</span>=<span class="hljs-string">&quot;src&quot;</span> <span class="hljs-attr">output</span>=<span class="hljs-string">&quot;build/classes/java/test&quot;</span> <span class="hljs-attr">path</span>=<span class="hljs-string">&quot;src/test/java&quot;</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">attributes</span>&gt;</span>      <span class="hljs-tag">&lt;<span class="hljs-name">attribute</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;gradle_scope&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;test&quot;</span>/&gt;</span>      <span class="hljs-tag">&lt;<span class="hljs-name">attribute</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;gradle_used_by_scope&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;test&quot;</span>/&gt;</span>      <span class="hljs-tag">&lt;<span class="hljs-name">attribute</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;test&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;true&quot;</span>/&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">attributes</span>&gt;</span>  <span class="hljs-tag">&lt;/<span class="hljs-name">classpathentry</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">classpathentry</span> <span class="hljs-attr">kind</span>=<span class="hljs-string">&quot;src&quot;</span> <span class="hljs-attr">output</span>=<span class="hljs-string">&quot;build/classes/kotlin/test&quot;</span> <span class="hljs-attr">path</span>=<span class="hljs-string">&quot;src/test/kotlin&quot;</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">attributes</span>&gt;</span>      <span class="hljs-tag">&lt;<span class="hljs-name">attribute</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;gradle_scope&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;test&quot;</span>/&gt;</span>      <span class="hljs-tag">&lt;<span class="hljs-name">attribute</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;gradle_used_by_scope&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;test&quot;</span>/&gt;</span>      <span class="hljs-tag">&lt;<span class="hljs-name">attribute</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;test&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;true&quot;</span>/&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">attributes</span>&gt;</span>  <span class="hljs-tag">&lt;/<span class="hljs-name">classpathentry</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">classpathentry</span> <span class="hljs-attr">kind</span>=<span class="hljs-string">&quot;src&quot;</span> <span class="hljs-attr">output</span>=<span class="hljs-string">&quot;build/resources/test&quot;</span> <span class="hljs-attr">path</span>=<span class="hljs-string">&quot;src/test/resources&quot;</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">attributes</span>&gt;</span>      <span class="hljs-tag">&lt;<span class="hljs-name">attribute</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;gradle_scope&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;test&quot;</span>/&gt;</span>      <span class="hljs-tag">&lt;<span class="hljs-name">attribute</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;gradle_used_by_scope&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;test&quot;</span>/&gt;</span>      <span class="hljs-tag">&lt;<span class="hljs-name">attribute</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;test&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;true&quot;</span>/&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">attributes</span>&gt;</span>  <span class="hljs-tag">&lt;/<span class="hljs-name">classpathentry</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">classpathentry</span> <span class="hljs-attr">kind</span>=<span class="hljs-string">&quot;con&quot;</span> <span class="hljs-attr">path</span>=<span class="hljs-string">&quot;org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-19/&quot;</span>/&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">classpathentry</span> <span class="hljs-attr">kind</span>=<span class="hljs-string">&quot;con&quot;</span> <span class="hljs-attr">path</span>=<span class="hljs-string">&quot;org.eclipse.buildship.core.gradleclasspathcontainer&quot;</span>/&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">classpathentry</span> <span class="hljs-attr">kind</span>=<span class="hljs-string">&quot;src&quot;</span> <span class="hljs-attr">output</span>=<span class="hljs-string">&quot;build/test&quot;</span> <span class="hljs-attr">path</span>=<span class="hljs-string">&quot;build/generated-test-sources/annotations&quot;</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">attributes</span>&gt;</span>      <span class="hljs-tag">&lt;<span class="hljs-name">attribute</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;optional&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;true&quot;</span>/&gt;</span>      <span class="hljs-tag">&lt;<span class="hljs-name">attribute</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;test&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;true&quot;</span>/&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">attributes</span>&gt;</span>  <span class="hljs-tag">&lt;/<span class="hljs-name">classpathentry</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">classpathentry</span> <span class="hljs-attr">kind</span>=<span class="hljs-string">&quot;src&quot;</span> <span class="hljs-attr">path</span>=<span class="hljs-string">&quot;build/generated-sources/annotations&quot;</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">attributes</span>&gt;</span>      <span class="hljs-tag">&lt;<span class="hljs-name">attribute</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;optional&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;true&quot;</span>/&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">attributes</span>&gt;</span>  <span class="hljs-tag">&lt;/<span class="hljs-name">classpathentry</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">classpathentry</span> <span class="hljs-attr">kind</span>=<span class="hljs-string">&quot;src&quot;</span> <span class="hljs-attr">path</span>=<span class="hljs-string">&quot;bin/generated-sources/annotations&quot;</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">attributes</span>&gt;</span>      <span class="hljs-tag">&lt;<span class="hljs-name">attribute</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;optional&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;true&quot;</span>/&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">attributes</span>&gt;</span>  <span class="hljs-tag">&lt;/<span class="hljs-name">classpathentry</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">classpathentry</span> <span class="hljs-attr">kind</span>=<span class="hljs-string">&quot;src&quot;</span> <span class="hljs-attr">output</span>=<span class="hljs-string">&quot;build/test&quot;</span> <span class="hljs-attr">path</span>=<span class="hljs-string">&quot;bin/generated-test-sources/annotations&quot;</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">attributes</span>&gt;</span>      <span class="hljs-tag">&lt;<span class="hljs-name">attribute</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;optional&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;true&quot;</span>/&gt;</span>      <span class="hljs-tag">&lt;<span class="hljs-name">attribute</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;test&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;true&quot;</span>/&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">attributes</span>&gt;</span>  <span class="hljs-tag">&lt;/<span class="hljs-name">classpathentry</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">classpathentry</span> <span class="hljs-attr">kind</span>=<span class="hljs-string">&quot;output&quot;</span> <span class="hljs-attr">path</span>=<span class="hljs-string">&quot;build/default&quot;</span>/&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">classpath</span>&gt;</span></code></pre><h2 id="Configure-vscode-settings-json">Configure <code>.vscode/settings.json</code></h2><ul><li>In the <code>.vscode</code> directory (created by the above task), there should be a <code>settings.json</code> file.</li><li>Ensure it has the necessary classpath settings.</li></ul><p>Example <code>settings.json</code>:</p><pre><code class="hljs jsonc">&#123;  &quot;java.project.outputPath&quot;: &quot;build&quot;,  &quot;java.import.generatesMetadataFilesAtProjectRoot&quot;: false,  &quot;java.editor.reloadChangedSources&quot;: &quot;auto&quot;,  &quot;java.configuration.updateBuildConfiguration&quot;: &quot;disabled&quot;,  &quot;java.server.launchMode&quot;: &quot;Hybrid&quot;,  &quot;java.project.referencedLibraries&quot;: [    &quot;build/classes/java/main&quot;,    &quot;build/resources/main&quot;,    &quot;lib/**/*.jar&quot;  ],  &quot;java.edit.smartSemicolonDetection.enabled&quot;: true,  &quot;terminal.integrated.env.windows&quot;: &#123;    &quot;PATH&quot;: &quot;$&#123;workspaceFolder&#125;;$&#123;workspaceFolder&#125;\\bin;$&#123;workspaceFolder&#125;\\node_modules\\.bin;$&#123;env:PATH&#125;&quot;  &#125;,  &quot;terminal.integrated.env.linux&quot;: &#123;    &quot;PATH&quot;: &quot;$&#123;workspaceFolder&#125;:$&#123;workspaceFolder&#125;/bin:$&#123;workspaceFolder&#125;/node_modules/.bin:$&#123;env:PATH&#125;&quot;  &#125;,  &quot;java.sharedIndexes.enabled&quot;: &quot;off&quot;,  &quot;java.project.resourceFilters&quot;: [    &quot;node_modules&quot;,    &quot;\\.git&quot;,    &quot;\\.cache&quot;  ]&#125;</code></pre><h2 id="Conclusion">Conclusion</h2><p>Now you don’t have to wait long when opening a Java project in VScode with the Redhat Java plugin, because all build output is synchronized from Gradle and Eclipse JDT which are used by the Redhat Java extension.</p><p>And this trick can change the output folder from Redhat Java Extension to the Gradle build folder.</p><p>You can checkout our repository of <a href="https://github.com/dimaslanjaka/Java/tree/master/eclipse-gradle">gradle+eclipse in vscode - sample project</a></p>]]></content:encoded>
      
      
      <category domain="https://www.webmanajemen.com/categories/programming/">programming</category>
      
      
      <category domain="https://www.webmanajemen.com/tags/java/">java</category>
      
      <category domain="https://www.webmanajemen.com/tags/vscode/">vscode</category>
      
      <category domain="https://www.webmanajemen.com/tags/kotlin/">kotlin</category>
      
      <category domain="https://www.webmanajemen.com/tags/groovy/">groovy</category>
      
      
      <comments>https://www.webmanajemen.com/2024/01/classpath-eclipse-within-vscode-redhat-java-for-gradle.html#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>How to overwrite cache in github actions workflow</title>
      <link>https://www.webmanajemen.com/GitHub/github-actions-overwrite-cache.html</link>
      <guid>https://www.webmanajemen.com/GitHub/github-actions-overwrite-cache.html</guid>
      <pubDate>Sun, 21 Jan 2024 00:54:43 GMT</pubDate>
      
      <description>Overwriting github action cache strategy with code example</description>
      
      
      
      <content:encoded><![CDATA[<details>  <summary>Introduction</summary><h2 id="Introduction">Introduction</h2><p>In software development, caching is a commonly used technique to store frequently accessed data in a temporary storage location. This helps to improve performance and reduce the load on the server. Github Actions allows developers to incorporate caching in their workflows to speed up the build process. However, there may be situations where the cached data needs to be refreshed or overwritten. In this article, we will discuss how to overwrite cache in Github Actions workflow.</p><h2 id="Prerequisites">Prerequisites</h2><p>Before we begin, make sure you have the following set up:</p><ul><li>A Github account</li><li>A repository with a Github Actions workflow file</li><li>Basic knowledge of YAML and Github Actions</li></ul><h2 id="Step-1-Identify-the-Cache-Key">Step 1: Identify the Cache Key</h2><p>In your Github Actions workflow file, you would have defined a cache key for the specific action that requires caching. This key is used to store and retrieve the cached data. To overwrite the cache, we first need to identify the cache key.</p>  <pre><code class="hljs yaml"><span class="hljs-attr">runs-on:</span> <span class="hljs-string">ubuntu-latest</span><span class="hljs-attr">env:</span>  <span class="hljs-comment"># your cache key</span>  <span class="hljs-attr">cache-key:</span> <span class="hljs-string">your-cache-key</span></code></pre><h2 id="Step-2-Use-“cache-hit”-and-“cache-save”-actions">Step 2: Use “cache-hit” and “cache-save” actions</h2><p>Github Actions provides two actions, “cache-hit” and “cache-save”, to handle caching. The “cache-hit” action retrieves the cached data based on the cache key, while the “cache-save” action stores the data with a new cache key. We will be using these actions to overwrite the cache.</p>  <pre><code class="hljs yaml"><span class="hljs-attr">if:</span> <span class="hljs-string">$&#123;&#123;</span> <span class="hljs-string">steps.cache-restore.outputs.cache-hit</span> <span class="hljs-string">&#125;&#125;</span></code></pre><h2 id="Step-3-Create-a-New-Workflow-Job">Step 3: Create a New Workflow Job</h2><p>To overwrite the cache, we will create a new job in our workflow file. This job will run before the actual job that requires caching and will be responsible for overwriting the cache data. It will use the “cache-hit” action to retrieve the existing cached data and the “cache-save” action to store the updated data with a new cache key.</p>  <pre><code class="hljs yaml"><span class="hljs-attr">jobs:</span>  <span class="hljs-attr">update:</span>    <span class="hljs-attr">runs-on:</span> <span class="hljs-string">ubuntu-latest</span>    <span class="hljs-attr">env:</span>      <span class="hljs-comment"># your cache key</span>      <span class="hljs-attr">cache-key:</span> <span class="hljs-string">your-cache-key</span>  <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Restore</span> <span class="hljs-string">Cache</span>    <span class="hljs-attr">id:</span> <span class="hljs-string">cache-restore</span>    <span class="hljs-attr">uses:</span> <span class="hljs-string">actions/cache/restore@v3</span>    <span class="hljs-attr">with:</span>      <span class="hljs-attr">path:</span> <span class="hljs-string">./cache</span>      <span class="hljs-attr">key:</span> <span class="hljs-string">$&#123;&#123;</span> <span class="hljs-string">env.cache-key</span> <span class="hljs-string">&#125;&#125;</span></code></pre><h2 id="Step-4-Use-“if”-Condition-for-the-New-Job">Step 4: Use “if” Condition for the New Job</h2><p>To ensure that the new job only runs when we want to overwrite the cache, we can use the “if” condition in the job. This condition can be set to run only when a specific event occurs, or a certain condition is met. In this case, we can use the “if” condition to check for a specific flag or variable that indicates the need to overwrite the cache.</p>  <pre><code class="hljs yaml"><span class="hljs-attr">if:</span> <span class="hljs-string">$&#123;&#123;</span> <span class="hljs-string">steps.cache-restore.outputs.cache-hit</span> <span class="hljs-string">&#125;&#125;</span></code></pre><h2 id="Step-5-Test-and-Verify">Step 5: Test and Verify</h2><p>Once you have made the necessary changes, commit and push them to your repository. Your new job for overwriting the cache will run before the actual job that requires caching. You can monitor the workflow runs on Github and verify if the cache has been overwritten successfully.</p><h2 id="Conclusion">Conclusion</h2><p>Caching is a useful feature in Github Actions that helps to improve the performance of your workflow. However, there may be instances where you need to refresh or update the cached data. By following these steps, you can easily overwrite the cache in your Github Actions workflow. This ensures that your workflow runs with the most up-to-date data and avoids any potential issues due to outdated cache.</p></details><h1>GitHub Actions overwrite cache example repo</h1><p>GitHub Actions does not support overwrite cache with same key, so we have to delete the old cache key before rewrite the cache.</p><!-- - [Feature request: option to update cache · Issue #342 · actions/cache](https://github.com/actions/cache/issues/342) --><p>As workaround, you can use <code>actions/cache/restore</code> and <a href="https://github.com/actions/gh-actions-cache">gh-actions-cache</a>, and <code>actions/cache/save</code>.</p><p>This workflow implements overwrite cache using <strong>restore</strong> <code>-&gt;</code> <strong>delete</strong> <code>-&gt;</code> <strong>save</strong>.</p><pre><code class="hljs yaml"><span class="hljs-attr">name:</span> <span class="hljs-string">Update</span> <span class="hljs-string">Cache</span><span class="hljs-attr">on:</span>  <span class="hljs-attr">workflow_dispatch:</span><span class="hljs-attr">permissions:</span>  <span class="hljs-attr">contents:</span> <span class="hljs-string">read</span>  <span class="hljs-attr">actions:</span> <span class="hljs-string">write</span> <span class="hljs-comment"># require to delete cache</span><span class="hljs-attr">jobs:</span>  <span class="hljs-attr">update:</span>    <span class="hljs-attr">runs-on:</span> <span class="hljs-string">ubuntu-latest</span>    <span class="hljs-attr">env:</span>      <span class="hljs-comment"># overwrite cache key</span>      <span class="hljs-attr">cache-key:</span> <span class="hljs-string">your-cache-key</span>    <span class="hljs-attr">steps:</span>      <span class="hljs-comment"># This job implements overwrite cache using restore + delete + save</span>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Checkout</span>        <span class="hljs-attr">uses:</span> <span class="hljs-string">actions/checkout@v3</span> <span class="hljs-comment"># gh command require repository</span>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Restore</span> <span class="hljs-string">Cache</span>        <span class="hljs-attr">id:</span> <span class="hljs-string">cache-restore</span>        <span class="hljs-attr">uses:</span> <span class="hljs-string">actions/cache/restore@v3</span>        <span class="hljs-attr">with:</span>          <span class="hljs-attr">path:</span> <span class="hljs-string">./cache</span>          <span class="hljs-attr">key:</span> <span class="hljs-string">$&#123;&#123;</span> <span class="hljs-string">env.cache-key</span> <span class="hljs-string">&#125;&#125;</span>      <span class="hljs-comment"># Main Task</span>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Main</span> <span class="hljs-string">Task</span>        <span class="hljs-attr">run:</span> <span class="hljs-string">|</span><span class="hljs-string">          # generate current time to ./cache/time</span><span class="hljs-string">          mkdir -p ./cache</span><span class="hljs-string">          previous_date=$(cat ./cache/time || echo &quot;No previous date&quot;)</span><span class="hljs-string">          current_date=$(date &quot;+%Y-%m-%d %H:%M:%S&quot;)</span><span class="hljs-string">          echo &quot;Previous: $previous_date&quot;</span><span class="hljs-string">          echo &quot;Current: $current_date&quot;</span><span class="hljs-string">          # Save current time to ./cache/time</span><span class="hljs-string">          echo &quot;$current_date&quot; &gt; ./cache/time</span><span class="hljs-string"></span>      <span class="hljs-comment"># overwrite cache key: delete previous and save current</span>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Delete</span> <span class="hljs-string">Previous</span> <span class="hljs-string">Cache</span>        <span class="hljs-attr">if:</span> <span class="hljs-string">$&#123;&#123;</span> <span class="hljs-string">steps.cache-restore.outputs.cache-hit</span> <span class="hljs-string">&#125;&#125;</span>        <span class="hljs-attr">continue-on-error:</span> <span class="hljs-literal">true</span>        <span class="hljs-attr">run:</span> <span class="hljs-string">|</span><span class="hljs-string">          gh extension install actions/gh-actions-cache</span><span class="hljs-string">          gh actions-cache delete &quot;$&#123;&#123; env.cache-key &#125;&#125;&quot; --confirm</span><span class="hljs-string"></span>        <span class="hljs-attr">env:</span>          <span class="hljs-attr">GH_TOKEN:</span> <span class="hljs-string">$&#123;&#123;</span> <span class="hljs-string">secrets.GITHUB_TOKEN</span> <span class="hljs-string">&#125;&#125;</span>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Save</span> <span class="hljs-string">Cache</span>        <span class="hljs-attr">uses:</span> <span class="hljs-string">actions/cache/save@v3</span>        <span class="hljs-attr">with:</span>          <span class="hljs-attr">path:</span> <span class="hljs-string">./cache</span>          <span class="hljs-attr">key:</span> <span class="hljs-string">$&#123;&#123;</span> <span class="hljs-string">env.cache-key</span> <span class="hljs-string">&#125;&#125;</span></code></pre>]]></content:encoded>
      
      
      <category domain="https://www.webmanajemen.com/categories/programming/">programming</category>
      
      
      <category domain="https://www.webmanajemen.com/tags/github/">github</category>
      
      <category domain="https://www.webmanajemen.com/tags/github-actions-workflow/">github-actions-workflow</category>
      
      
      <comments>https://www.webmanajemen.com/GitHub/github-actions-overwrite-cache.html#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Deprecated WebSecurityConfigurerAdapter Solution</title>
      <link>https://www.webmanajemen.com/2024/01/deprecated-web-security-configurer-adapter-solution.html</link>
      <guid>https://www.webmanajemen.com/2024/01/deprecated-web-security-configurer-adapter-solution.html</guid>
      <pubDate>Fri, 19 Jan 2024 06:51:33 GMT</pubDate>
      
      <description>Solve WebSecurityConfigurerAdapter deprecated in spring boot</description>
      
      
      
      <content:encoded><![CDATA[<p>How to solve <strong>Deprecated WebSecurityConfigurerAdapter</strong> in spring boot security <code>&gt;= 5.7.0-M2</code></p><h2 id="SecurityConfiguration-method-structures">SecurityConfiguration method structures</h2><p>Spring Security <code>v5.7.0-M2</code> deprecates <strong>WebSecurityConfigurerAdapter</strong> for customizing HTTP security.<br>Developers are strongly encouraged to prioritize content-based security configuration over extension classes.<br>This change focuses on adapting to newer practices.</p><h3 id="Old-codes">Old codes</h3><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><span class="hljs-meta">@EnableWebSecurity</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SecurityConfiguration</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">WebSecurityConfigurerAdapter</span> &#123;    <span class="hljs-meta">@Override</span>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">configure</span><span class="hljs-params">(HttpSecurity http)</span> <span class="hljs-keyword">throws</span> Exception &#123;        <span class="hljs-comment">// configure HTTP security...</span>    &#125;    <span class="hljs-meta">@Override</span>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">configure</span><span class="hljs-params">(WebSecurity web)</span> <span class="hljs-keyword">throws</span> Exception &#123;        <span class="hljs-comment">// configure Web security...</span>    &#125;&#125;</code></pre><h3 id="New-codes">New codes</h3><p>To resolve this issue, replace the WebSecurityConfigurerAdapter extension with the <strong>SecurityFilterChain</strong> and <strong>WebSecurityCustomizer</strong> bean declarations as shown below.</p><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SecurityConfiguration</span> &#123;    <span class="hljs-meta">@Bean</span>    <span class="hljs-keyword">public</span> SecurityFilterChain <span class="hljs-title function_">filterChain</span><span class="hljs-params">(HttpSecurity http)</span> <span class="hljs-keyword">throws</span> Exception &#123;      <span class="hljs-comment">// configure HTTP security...</span>    &#125;    <span class="hljs-meta">@Bean</span>    <span class="hljs-keyword">public</span> WebSecurityCustomizer <span class="hljs-title function_">webSecurityCustomizer</span><span class="hljs-params">()</span> &#123;      <span class="hljs-comment">// configure Web security...</span>    &#125;&#125;</code></pre><h2 id="Configure-http-security">Configure http security</h2><p>We are currently moving our code, including security configuration, to a component-based approach.<br>Below is the code that extends the WebSecurityConfigurerAdapter class.</p><h3 id="Old-codes-2">Old codes</h3><pre><code class="hljs java"><span class="hljs-meta">@EnableWebSecurity</span><span class="hljs-meta">@EnableGlobalMethodSecurity(prePostEnabled = true)</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">WebSecurity</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">WebSecurityConfigurerAdapter</span> &#123;    <span class="hljs-meta">@Override</span>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">configure</span><span class="hljs-params">(HttpSecurity http)</span> <span class="hljs-keyword">throws</span> Exception &#123;        http.cors().and().csrf().disable()                .authorizeHttpRequests()                .requestMatchers(HttpMethod.POST, SecurityConstants.SIGN_UP_URL).permitAll()                .anyRequest().authenticated().and()                .addFilter(getAuthenticationFilter())                .addFilter(<span class="hljs-keyword">new</span> <span class="hljs-title class_">AuthorizationFilter</span>(authenticationManager(), userRepository))                .sessionManagement()                .sessionCreationPolicy(SessionCreationPolicy.STATELESS);    &#125;    <span class="hljs-comment">// Configure AuthenticationManagerBuilder</span>    <span class="hljs-meta">@Override</span>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">configure</span><span class="hljs-params">(AuthenticationManagerBuilder auth)</span> <span class="hljs-keyword">throws</span> Exception &#123;        auth.userDetailsService(userDetailsService).passwordEncoder(bCryptPasswordEncoder);    &#125;    <span class="hljs-keyword">protected</span> AuthenticationFilter <span class="hljs-title function_">getAuthenticationFilter</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;        <span class="hljs-keyword">final</span> <span class="hljs-type">AuthenticationFilter</span> <span class="hljs-variable">filter</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AuthenticationFilter</span>(authenticationManager());        filter.setFilterProcessesUrl(<span class="hljs-string">&quot;/users/login&quot;</span>);        <span class="hljs-keyword">return</span> filter;    &#125;&#125;</code></pre><h3 id="New-codes-2">New codes</h3><p>Below is the same code without extending the WebSecurityConfigurerAdapter class in new spring boot API.</p><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><span class="hljs-meta">@EnableWebSecurity</span><span class="hljs-meta">@EnableMethodSecurity(prePostEnabled = true)</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">WebSecurity</span> &#123;    <span class="hljs-comment">// expose authentication manager to @Controller</span>    <span class="hljs-meta">@Bean</span>    <span class="hljs-keyword">public</span> AuthenticationManager <span class="hljs-title function_">authenticationManager</span><span class="hljs-params">(HttpSecurity http)</span> <span class="hljs-keyword">throws</span> Exception &#123;      <span class="hljs-keyword">return</span> http.getSharedObject(AuthenticationManagerBuilder.class)          .build();    &#125;    <span class="hljs-meta">@Bean</span>    <span class="hljs-keyword">public</span> SecurityFilterChain <span class="hljs-title function_">configure</span><span class="hljs-params">(HttpSecurity http)</span> <span class="hljs-keyword">throws</span> Exception &#123;        <span class="hljs-comment">// Configure AuthenticationManagerBuilder</span>        <span class="hljs-type">AuthenticationManagerBuilder</span> <span class="hljs-variable">authenticationManagerBuilder</span> <span class="hljs-operator">=</span> http.getSharedObject(AuthenticationManagerBuilder.class);        authenticationManagerBuilder.userDetailsService(userDetailsService).passwordEncoder(bCryptPasswordEncoder);        <span class="hljs-comment">// Get AuthenticationManager</span>        <span class="hljs-type">AuthenticationManager</span> <span class="hljs-variable">authenticationManager</span> <span class="hljs-operator">=</span> authenticationManagerBuilder.build();        http                .cors(withDefaults())                .csrf((csrf) -&gt; csrf.disable())                .authorizeHttpRequests((authz) -&gt; authz                .requestMatchers(HttpMethod.POST, SecurityConstants.SIGN_UP_URL).permitAll()                .anyRequest().authenticated())                .authenticationManager(authenticationManager)                .addFilter(authenticationFilter)                .addFilter(<span class="hljs-keyword">new</span> <span class="hljs-title class_">AuthorizationFilter</span>(authenticationManager))                .sessionManagement((session) -&gt; session                .sessionCreationPolicy(SessionCreationPolicy.STATELESS));        <span class="hljs-keyword">return</span> http.build();    &#125;    <span class="hljs-keyword">protected</span> AuthenticationFilter <span class="hljs-title function_">getAuthenticationFilter</span><span class="hljs-params">(AuthenticationManager authenticationManager)</span> <span class="hljs-keyword">throws</span> Exception &#123;        <span class="hljs-keyword">final</span> <span class="hljs-type">AuthenticationFilter</span> <span class="hljs-variable">filter</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AuthenticationFilter</span>(authenticationManager);        filter.setFilterProcessesUrl(<span class="hljs-string">&quot;/users/login&quot;</span>);        <span class="hljs-keyword">return</span> filter;    &#125;    <span class="hljs-meta">@Bean</span>    CorsConfigurationSource <span class="hljs-title function_">corsConfigurationSource</span><span class="hljs-params">()</span> &#123;        <span class="hljs-type">CorsConfiguration</span> <span class="hljs-variable">configuration</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CorsConfiguration</span>();        configuration.setAllowedOrigins(Arrays.asList(<span class="hljs-string">&quot;*&quot;</span>));        configuration.setAllowedMethods(Arrays.asList(<span class="hljs-string">&quot;POST&quot;</span>, <span class="hljs-string">&quot;PUT&quot;</span>, <span class="hljs-string">&quot;GET&quot;</span>, <span class="hljs-string">&quot;OPTIONS&quot;</span>, <span class="hljs-string">&quot;DELETE&quot;</span>, <span class="hljs-string">&quot;PATCH&quot;</span>)); <span class="hljs-comment">// or simply &quot;*&quot;</span>        configuration.setAllowedHeaders(Arrays.asList(<span class="hljs-string">&quot;*&quot;</span>));        <span class="hljs-type">UrlBasedCorsConfigurationSource</span> <span class="hljs-variable">source</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UrlBasedCorsConfigurationSource</span>();        source.registerCorsConfiguration(<span class="hljs-string">&quot;/**&quot;</span>, configuration);        <span class="hljs-keyword">return</span> source;    &#125;&#125;</code></pre>]]></content:encoded>
      
      
      <category domain="https://www.webmanajemen.com/categories/programming/">programming</category>
      
      
      <category domain="https://www.webmanajemen.com/tags/java/">java</category>
      
      <category domain="https://www.webmanajemen.com/tags/spring-boot/">spring-boot</category>
      
      
      <comments>https://www.webmanajemen.com/2024/01/deprecated-web-security-configurer-adapter-solution.html#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Spring Boot login programmatically</title>
      <link>https://www.webmanajemen.com/2024/01/spring-boot-login-programatically.html</link>
      <guid>https://www.webmanajemen.com/2024/01/spring-boot-login-programatically.html</guid>
      <pubDate>Thu, 18 Jan 2024 13:56:37 GMT</pubDate>
      
      <description>How to implement login programmatically in spring boot java</description>
      
      
      
      <content:encoded><![CDATA[<p><strong>Important</strong>:<br>First you need a <a href="/2024/01/spring-boot-custom-passwordEncoder.html">custom password encoder</a> for your spring boot project, so you can log in using your user credentials. <a href="/2024/01/spring-boot-custom-passwordEncoder.html">READ HERE - custom password encoder for spring boot</a>.</p><h2 id="Setup-Spring-Security">Setup Spring Security</h2><p>Expose context of <code>org.springframework.security.authentication.AuthenticationManager</code> from security config class to be used in <code>LoginController</code></p><pre><code class="hljs java"><span class="hljs-keyword">import</span> javax.sql.DataSource;<span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<span class="hljs-keyword">import</span> org.springframework.context.annotation.Bean;<span class="hljs-keyword">import</span> org.springframework.context.annotation.Configuration;<span class="hljs-keyword">import</span> org.springframework.security.authentication.AuthenticationManager;<span class="hljs-keyword">import</span> org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;<span class="hljs-keyword">import</span> org.springframework.security.config.annotation.web.builders.HttpSecurity;<span class="hljs-keyword">import</span> org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;<span class="hljs-keyword">import</span> org.springframework.security.config.annotation.web.configurers.AbstractHttpConfigurer;<span class="hljs-keyword">import</span> org.springframework.security.core.userdetails.UserDetailsService;<span class="hljs-keyword">import</span> org.springframework.security.web.SecurityFilterChain;<span class="hljs-keyword">import</span> org.springframework.security.web.util.matcher.AntPathRequestMatcher;<span class="hljs-meta">@Configuration</span><span class="hljs-meta">@EnableWebSecurity</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SecurityConfig</span> &#123;  <span class="hljs-meta">@Autowired</span>  <span class="hljs-keyword">private</span> UserDetailsService userDetailsService;  <span class="hljs-meta">@Autowired</span>  DataSource dataSource;  <span class="hljs-meta">@Bean</span>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> CustomPassword <span class="hljs-title function_">passwordEncoder</span><span class="hljs-params">()</span> &#123;    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CustomPassword</span>(<span class="hljs-string">&quot;passwordEncoder&quot;</span>);  &#125;  <span class="hljs-meta">@Bean</span>  <span class="hljs-keyword">public</span> AuthenticationManager <span class="hljs-title function_">authenticationManager</span><span class="hljs-params">(HttpSecurity http)</span> <span class="hljs-keyword">throws</span> Exception &#123;    <span class="hljs-keyword">return</span> http.getSharedObject(AuthenticationManagerBuilder.class)        .build();  &#125;&#125;</code></pre><h2 id="Setup-Controller">Setup Controller</h2><p>add custom fields to your <code>@Controller</code> class like my LoginController below.</p><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.springframework.security.authentication.AuthenticationManager;<span class="hljs-keyword">import</span> org.springframework.stereotype.Controller;<span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<span class="hljs-meta">@Controller</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">LoginController</span> &#123;  <span class="hljs-meta">@Autowired</span>  <span class="hljs-keyword">private</span> UserService userService;  <span class="hljs-keyword">private</span> CustomPassword passwordEncoder;  <span class="hljs-keyword">private</span> AuthenticationManager authenticationManager;  <span class="hljs-keyword">public</span> <span class="hljs-title function_">LoginController</span><span class="hljs-params">(UserService userService, CustomPassword passwordEncoder, AuthenticationManager authenticationManager)</span> &#123;      <span class="hljs-built_in">this</span>.userService = userService;      <span class="hljs-built_in">this</span>.passwordEncoder = passwordEncoder;      <span class="hljs-built_in">this</span>.authenticationManager = authenticationManager;  &#125;&#125;</code></pre><h2 id="Create-endpoint-mapping">Create endpoint mapping</h2><p>create new url mapping for authenticate the given identifier to valid session token.</p><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(value = &quot;/login/&#123;uuid&#125;&quot;, produces = MediaType.APPLICATION_JSON_VALUE)</span><span class="hljs-meta">@ResponseBody</span><span class="hljs-keyword">public</span> String <span class="hljs-title function_">loginUUID</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable</span> String uuid, HttpServletRequest request, HttpServletResponse response)</span> &#123;    <span class="hljs-type">JSONObject</span> <span class="hljs-variable">jsonObject</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JSONObject</span>();    Optional&lt;User&gt; find = Optional.ofNullable(userService.findUserByEmail(uuid));    <span class="hljs-type">SecurityContext</span> <span class="hljs-variable">securityContext</span> <span class="hljs-operator">=</span> SecurityContextHolder.getContext();    <span class="hljs-keyword">if</span> (find.isPresent()) &#123;        <span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> find.get();        <span class="hljs-type">String</span> <span class="hljs-variable">password</span> <span class="hljs-operator">=</span> passwordEncoder.decode(user.getPassword());        <span class="hljs-type">String</span> <span class="hljs-variable">email</span> <span class="hljs-operator">=</span> user.getEmail();        jsonObject.put(<span class="hljs-string">&quot;email&quot;</span>, user.getEmail());        <span class="hljs-keyword">try</span> &#123;            <span class="hljs-type">UsernamePasswordAuthenticationToken</span> <span class="hljs-variable">loginToken</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UsernamePasswordAuthenticationToken</span>(email,                    password);            <span class="hljs-type">Authentication</span> <span class="hljs-variable">authenticatedUser</span> <span class="hljs-operator">=</span> authenticationManager.authenticate(loginToken);            securityContext.setAuthentication(authenticatedUser);            <span class="hljs-type">HttpSession</span> <span class="hljs-variable">session</span> <span class="hljs-operator">=</span> request.getSession(<span class="hljs-literal">true</span>);            session.setAttribute(<span class="hljs-string">&quot;SPRING_SECURITY_CONTEXT&quot;</span>, securityContext);        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;            System.err.println(<span class="hljs-string">&quot;Error while login&quot;</span>);        &#125;    &#125;    <span class="hljs-type">Authentication</span> <span class="hljs-variable">authentication</span> <span class="hljs-operator">=</span> securityContext.getAuthentication();    <span class="hljs-keyword">if</span> (authentication != <span class="hljs-literal">null</span>) &#123;        jsonObject.put(<span class="hljs-string">&quot;is login&quot;</span>, authentication.isAuthenticated());        jsonObject.put(<span class="hljs-string">&quot;authorities&quot;</span>, authentication.getAuthorities());        jsonObject.put(<span class="hljs-string">&quot;authorities has admin&quot;</span>, authentication.getAuthorities().stream()                .anyMatch(a -&gt; a.getAuthority().toLowerCase(Locale.ROOT).contains(<span class="hljs-string">&quot;admin&quot;</span>)));    &#125;    <span class="hljs-keyword">return</span> jsonObject.toString();&#125;</code></pre><p>above codes will return content-type: application/json</p><h2 id="Full-codes-sample">Full codes sample</h2><p>full my sample codes login programmatically with <a href="/2024/01/spring-boot-custom-passwordEncoder.html">custom password encoder for spring boot</a>.</p><pre><code class="hljs java"><span class="hljs-keyword">package</span> web.user;<span class="hljs-keyword">import</span> java.util.Locale;<span class="hljs-keyword">import</span> java.util.Optional;<span class="hljs-keyword">import</span> org.json.JSONObject;<span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<span class="hljs-keyword">import</span> org.springframework.http.MediaType;<span class="hljs-keyword">import</span> org.springframework.security.authentication.AuthenticationManager;<span class="hljs-keyword">import</span> org.springframework.security.authentication.UsernamePasswordAuthenticationToken;<span class="hljs-keyword">import</span> org.springframework.security.core.Authentication;<span class="hljs-keyword">import</span> org.springframework.security.core.context.SecurityContext;<span class="hljs-keyword">import</span> org.springframework.security.core.context.SecurityContextHolder;<span class="hljs-keyword">import</span> org.springframework.stereotype.Controller;<span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.GetMapping;<span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.PathVariable;<span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;<span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.ResponseBody;<span class="hljs-keyword">import</span> jakarta.servlet.http.HttpServletRequest;<span class="hljs-keyword">import</span> jakarta.servlet.http.HttpServletResponse;<span class="hljs-keyword">import</span> jakarta.servlet.http.HttpSession;<span class="hljs-keyword">import</span> web.CustomPassword;<span class="hljs-meta">@Controller</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">LoginController</span> &#123;    <span class="hljs-meta">@Autowired</span>    <span class="hljs-keyword">private</span> UserService userService;    <span class="hljs-keyword">private</span> CustomPassword passwordEncoder;    <span class="hljs-keyword">private</span> AuthenticationManager authenticationManager;    <span class="hljs-keyword">public</span> <span class="hljs-title function_">LoginController</span><span class="hljs-params">(UserService userService, CustomPassword passwordEncoder,</span><span class="hljs-params">            AuthenticationManager authenticationManager)</span> &#123;        <span class="hljs-built_in">this</span>.userService = userService;        <span class="hljs-built_in">this</span>.passwordEncoder = passwordEncoder;        <span class="hljs-built_in">this</span>.authenticationManager = authenticationManager;    &#125;    <span class="hljs-meta">@RequestMapping(value = &quot;/login/&#123;uuid&#125;&quot;, produces = MediaType.APPLICATION_JSON_VALUE)</span>    <span class="hljs-meta">@ResponseBody</span>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">loginUUID</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable</span> String uuid, HttpServletRequest request, HttpServletResponse response)</span> &#123;        <span class="hljs-type">JSONObject</span> <span class="hljs-variable">jsonObject</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JSONObject</span>();        Optional&lt;User&gt; find = Optional.ofNullable(userService.findUserByUuid(uuid));        <span class="hljs-type">SecurityContext</span> <span class="hljs-variable">securityContext</span> <span class="hljs-operator">=</span> SecurityContextHolder.getContext();        <span class="hljs-keyword">if</span> (find.isPresent()) &#123;            <span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> find.get();            <span class="hljs-type">String</span> <span class="hljs-variable">password</span> <span class="hljs-operator">=</span> passwordEncoder.decode(user.getPassword());            <span class="hljs-type">String</span> <span class="hljs-variable">email</span> <span class="hljs-operator">=</span> user.getEmail();            jsonObject.put(<span class="hljs-string">&quot;email&quot;</span>, user.getEmail());            <span class="hljs-keyword">try</span> &#123;                <span class="hljs-type">UsernamePasswordAuthenticationToken</span> <span class="hljs-variable">loginToken</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UsernamePasswordAuthenticationToken</span>(email,                        password);                <span class="hljs-type">Authentication</span> <span class="hljs-variable">authenticatedUser</span> <span class="hljs-operator">=</span> authenticationManager.authenticate(loginToken);                securityContext.setAuthentication(authenticatedUser);                <span class="hljs-type">HttpSession</span> <span class="hljs-variable">session</span> <span class="hljs-operator">=</span> request.getSession(<span class="hljs-literal">true</span>);                session.setAttribute(<span class="hljs-string">&quot;SPRING_SECURITY_CONTEXT&quot;</span>, securityContext);            &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;                System.err.println(<span class="hljs-string">&quot;Error while login&quot;</span>);            &#125;        &#125;        <span class="hljs-type">Authentication</span> <span class="hljs-variable">authentication</span> <span class="hljs-operator">=</span> securityContext.getAuthentication();        <span class="hljs-keyword">if</span> (authentication != <span class="hljs-literal">null</span>) &#123;            jsonObject.put(<span class="hljs-string">&quot;is login&quot;</span>, authentication.isAuthenticated());            jsonObject.put(<span class="hljs-string">&quot;authorities&quot;</span>, authentication.getAuthorities());            jsonObject.put(<span class="hljs-string">&quot;authorities has admin&quot;</span>, authentication.getAuthorities().stream()                    .anyMatch(a -&gt; a.getAuthority().toLowerCase(Locale.ROOT).contains(<span class="hljs-string">&quot;admin&quot;</span>)));        &#125;        <span class="hljs-keyword">return</span> jsonObject.toString();    &#125;&#125;</code></pre><h2 id="Conclusion">Conclusion</h2><p>this are important part for <strong>Spring Boot login programmatically</strong>, for full spring application project with <strong>Spring Boot login programmatically</strong> implementation you can view my sample project on <a href="https://github.com/dimaslanjaka/Java/tree/master/Spring%20User%20Management">Github</a>.</p>]]></content:encoded>
      
      
      <category domain="https://www.webmanajemen.com/categories/programming/">programming</category>
      
      
      <category domain="https://www.webmanajemen.com/tags/java/">java</category>
      
      <category domain="https://www.webmanajemen.com/tags/spring-boot/">spring-boot</category>
      
      
      <comments>https://www.webmanajemen.com/2024/01/spring-boot-login-programatically.html#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>custom passwordEncoder for spring boot java</title>
      <link>https://www.webmanajemen.com/2024/01/spring-boot-custom-passwordEncoder.html</link>
      <guid>https://www.webmanajemen.com/2024/01/spring-boot-custom-passwordEncoder.html</guid>
      <pubDate>Thu, 18 Jan 2024 13:23:22 GMT</pubDate>
      
      <description>Custom PasswordEncoder that works within spring boot java project</description>
      
      
      
      <content:encoded><![CDATA[<details>  <summary>Spring Boot Custom Password Encoder</summary><h2 id="Introduction">Introduction</h2><ul><li>Brief explanation about the purpose of the article</li><li>Mention that the article will focus on how to implement a custom password encoder in Spring Boot</li></ul><h2 id="Understanding-Password-Encoding">Understanding Password Encoding</h2><ul><li>Define password encoding</li><li>Explain the importance of password encoding in web applications</li><li>Mention common password encoding techniques (e.g. MD5, SHA-256)</li></ul><h2 id="Default-Password-Encoder-in-Spring-Boot">Default Password Encoder in Spring Boot</h2><ul><li>Briefly explain the default password encoder used in Spring Boot</li><li>Mention its limitations and potential security risks</li><li>Provide code snippets showing how to use the default password encoder in Spring Boot</li></ul><h2 id="Implementing-a-Custom-Password-Encoder">Implementing a Custom Password Encoder</h2><ul><li>Explain the need for a custom password encoder in certain scenarios</li><li>Discuss the benefits of using a custom password encoder</li><li>Provide code snippets showing how to implement a custom password encoder in Spring Boot</li></ul><h2 id="Choosing-a-Password-Encoding-Technique">Choosing a Password Encoding Technique</h2><ul><li>Highlight the importance of choosing a strong password encoding technique</li><li>Compare and contrast different password encoding techniques (e.g. bcrypt, Argon2)</li><li>Provide recommendations for choosing the most secure password encoding technique</li></ul><h2 id="Integrating-Custom-Password-Encoder-in-Spring-Boot">Integrating Custom Password Encoder in Spring Boot</h2><ul><li>Discuss how to integrate the custom password encoder in a Spring Boot application</li><li>Provide code snippets showing how to configure the custom password encoder in Spring Boot’s security configuration</li></ul><h2 id="Conclusion">Conclusion</h2><ul><li>Summarize the main points of the article</li><li>Emphasize the importance of using a custom password encoder for better security in Spring Boot applications</li><li>Encourage readers to implement a custom password encoder in their own projects.</li></ul></details><p>Source code custom password encoder for spring</p><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.jetbrains.annotations.NotNull;<span class="hljs-keyword">import</span> org.springframework.security.crypto.password.PasswordEncoder;<span class="hljs-comment">// custom password encoder</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CustomPassword</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">PasswordEncoder</span> &#123;    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> String SALT;    <span class="hljs-keyword">public</span> <span class="hljs-title function_">CustomPassword</span><span class="hljs-params">(String str)</span> &#123;        <span class="hljs-built_in">this</span>.SALT = str;    &#125;    <span class="hljs-keyword">public</span> <span class="hljs-title function_">CustomPassword</span><span class="hljs-params">()</span> &#123;        <span class="hljs-built_in">this</span>.SALT = <span class="hljs-string">&quot;DEFAULT_SALT&quot;</span>;    &#125;    <span class="hljs-keyword">private</span> <span class="hljs-meta">@NotNull</span> String <span class="hljs-title function_">a</span><span class="hljs-params">(String str)</span> &#123;        <span class="hljs-type">int</span>[] f9939a = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[<span class="hljs-number">256</span>];        <span class="hljs-type">int</span>[] iArr = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[<span class="hljs-number">256</span>];        <span class="hljs-type">String</span> <span class="hljs-variable">str2</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.SALT;        <span class="hljs-type">int</span> <span class="hljs-variable">length</span> <span class="hljs-operator">=</span> str2.length();        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">256</span>; i++) &#123;            iArr[i] = str2.charAt(i % length);            f9939a[i] = i;        &#125;        <span class="hljs-type">int</span> <span class="hljs-variable">i2</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i3</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i3 &lt; <span class="hljs-number">256</span>; i3++) &#123;            <span class="hljs-type">int</span>[] iArr2 = f9939a;            <span class="hljs-type">int</span> <span class="hljs-variable">i4</span> <span class="hljs-operator">=</span> iArr2[i3];            i2 = ((i2 + i4) + iArr[i3]) % <span class="hljs-number">256</span>;            iArr2[i3] = iArr2[i2];            iArr2[i2] = i4;        &#125;        <span class="hljs-type">StringBuilder</span> <span class="hljs-variable">sb</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuilder</span>();        <span class="hljs-type">int</span> <span class="hljs-variable">i5</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;        <span class="hljs-type">int</span> <span class="hljs-variable">i6</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i7</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i7 &lt; str.length(); i7++) &#123;            i5 = (i5 + <span class="hljs-number">1</span>) % <span class="hljs-number">256</span>;            <span class="hljs-type">int</span> <span class="hljs-variable">i8</span> <span class="hljs-operator">=</span> f9939a[i5];            i6 = (i6 + i8) % <span class="hljs-number">256</span>;            f9939a[i5] = f9939a[i6];            f9939a[i6] = i8;            sb.append(Character.toChars(f9939a[(f9939a[i5] + i8) % <span class="hljs-number">256</span>] ^ str.charAt(i7)));        &#125;        <span class="hljs-keyword">return</span> sb.toString();    &#125;    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">decode</span><span class="hljs-params">(<span class="hljs-meta">@NotNull</span> CharSequence str)</span> &#123;        <span class="hljs-type">StringBuilder</span> <span class="hljs-variable">sb</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuilder</span>();        <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;        <span class="hljs-keyword">while</span> (i &lt; str.length()) &#123;            <span class="hljs-keyword">try</span> &#123;                <span class="hljs-type">int</span> <span class="hljs-variable">i2</span> <span class="hljs-operator">=</span> i + <span class="hljs-number">2</span>;                sb.append((<span class="hljs-type">char</span>) Integer.parseInt(String.valueOf(str).substring(i, i2), <span class="hljs-number">16</span>));                i = i2;            &#125; <span class="hljs-keyword">catch</span> (Exception e3) &#123;                <span class="hljs-comment">//</span>            &#125;        &#125;        <span class="hljs-keyword">return</span> a(sb.toString());    &#125;    <span class="hljs-meta">@Override</span>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">encode</span><span class="hljs-params">(CharSequence str)</span> &#123;        <span class="hljs-type">String</span> <span class="hljs-variable">a3</span> <span class="hljs-operator">=</span> a(String.valueOf(str));        <span class="hljs-type">StringBuilder</span> <span class="hljs-variable">sb</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuilder</span>();        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; a3.length(); i++) &#123;            sb.append(String.format(<span class="hljs-string">&quot;%02x&quot;</span>, (<span class="hljs-type">int</span>) a3.charAt(i)));        &#125;        <span class="hljs-keyword">return</span> sb.toString();    &#125;    <span class="hljs-meta">@Override</span>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">matches</span><span class="hljs-params">(CharSequence rawPassword, String encodedPassword)</span> &#123;        <span class="hljs-comment">// return encode(rawPassword).contentEquals(encodedPassword);</span>        <span class="hljs-keyword">return</span> decode(encodedPassword).contentEquals(rawPassword);    &#125;&#125;</code></pre><p>example custom password implementation in spring security</p><pre><code class="hljs java"><span class="hljs-keyword">import</span> javax.sql.DataSource;<span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<span class="hljs-keyword">import</span> org.springframework.context.annotation.Bean;<span class="hljs-keyword">import</span> org.springframework.context.annotation.Configuration;<span class="hljs-keyword">import</span> org.springframework.security.authentication.AuthenticationManager;<span class="hljs-keyword">import</span> org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;<span class="hljs-keyword">import</span> org.springframework.security.config.annotation.web.builders.HttpSecurity;<span class="hljs-keyword">import</span> org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;<span class="hljs-keyword">import</span> org.springframework.security.config.annotation.web.configurers.AbstractHttpConfigurer;<span class="hljs-keyword">import</span> org.springframework.security.core.userdetails.UserDetailsService;<span class="hljs-keyword">import</span> org.springframework.security.web.SecurityFilterChain;<span class="hljs-keyword">import</span> org.springframework.security.web.util.matcher.AntPathRequestMatcher;<span class="hljs-meta">@Configuration</span><span class="hljs-meta">@EnableWebSecurity</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SecurityConfig</span> &#123;  <span class="hljs-meta">@Autowired</span>  <span class="hljs-keyword">private</span> UserDetailsService userDetailsService;  <span class="hljs-meta">@Autowired</span>  DataSource dataSource;  <span class="hljs-meta">@Bean</span>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> CustomPassword <span class="hljs-title function_">passwordEncoder</span><span class="hljs-params">()</span> &#123;    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CustomPassword</span>(<span class="hljs-string">&quot;passwordEncoder&quot;</span>);  &#125;  <span class="hljs-meta">@Bean</span>  <span class="hljs-keyword">public</span> AuthenticationManager <span class="hljs-title function_">authenticationManager</span><span class="hljs-params">(HttpSecurity http)</span> <span class="hljs-keyword">throws</span> Exception &#123;    <span class="hljs-keyword">return</span> http.getSharedObject(AuthenticationManagerBuilder.class)        .build();  &#125;  <span class="hljs-meta">@Autowired</span>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">configureGlobal</span><span class="hljs-params">(<span class="hljs-keyword">final</span> AuthenticationManagerBuilder auth)</span> <span class="hljs-keyword">throws</span> Exception &#123;    auth        .userDetailsService(userDetailsService)        .passwordEncoder(passwordEncoder());  &#125;  <span class="hljs-meta">@Bean</span>  <span class="hljs-keyword">public</span> SecurityFilterChain <span class="hljs-title function_">filterChain</span><span class="hljs-params">(HttpSecurity http)</span> <span class="hljs-keyword">throws</span> Exception &#123;    http        .csrf(AbstractHttpConfigurer::disable)        .authorizeHttpRequests((authorize) -&gt; authorize            <span class="hljs-comment">// admin area</span>            .requestMatchers(<span class="hljs-string">&quot;/users/**&quot;</span>).hasRole(<span class="hljs-string">&quot;ADMIN&quot;</span>)            .requestMatchers(<span class="hljs-string">&quot;/add/**&quot;</span>).hasRole(<span class="hljs-string">&quot;ADMIN&quot;</span>)            .requestMatchers(<span class="hljs-string">&quot;/delete/**&quot;</span>).hasRole(<span class="hljs-string">&quot;ADMIN&quot;</span>)            .requestMatchers(<span class="hljs-string">&quot;/edit/**&quot;</span>).hasRole(<span class="hljs-string">&quot;ADMIN&quot;</span>)            <span class="hljs-comment">// need login area</span>            .requestMatchers(<span class="hljs-string">&quot;/me&quot;</span>).authenticated()            <span class="hljs-comment">// allow all non configured endpoint from above</span>            <span class="hljs-comment">// like css, js, and other static assets</span>            .anyRequest().permitAll())        .formLogin(            form -&gt; form                .loginPage(<span class="hljs-string">&quot;/login&quot;</span>)                .loginProcessingUrl(<span class="hljs-string">&quot;/login&quot;</span>)                <span class="hljs-comment">// default success login redirect to dashboard</span>                .defaultSuccessUrl(<span class="hljs-string">&quot;/dashboard&quot;</span>)                .permitAll())        .logout(            logout -&gt; logout                .logoutRequestMatcher(                    <span class="hljs-keyword">new</span> <span class="hljs-title class_">AntPathRequestMatcher</span>(<span class="hljs-string">&quot;/logout&quot;</span>))                .permitAll());    <span class="hljs-keyword">return</span> http.build();  &#125;&#125;</code></pre><p>example custom spring password encoder implementation in user service</p><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Arrays;<span class="hljs-keyword">import</span> java.util.List;<span class="hljs-keyword">import</span> java.util.Optional;<span class="hljs-keyword">import</span> java.util.stream.Collectors;<span class="hljs-keyword">import</span> org.springframework.stereotype.Service;<span class="hljs-keyword">import</span> jakarta.persistence.EntityNotFoundException;<span class="hljs-keyword">import</span> your.<span class="hljs-keyword">package</span>.CustomPassword;<span class="hljs-meta">@SuppressWarnings(&#123; &quot;ArraysAsListWithZeroOrOneArgument&quot;, &quot;OptionalIsPresent&quot;, &quot;FieldMayBeFinal&quot;, &quot;Convert2MethodRef&quot; &#125;)</span><span class="hljs-meta">@Service</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">UserService</span> &#123;    <span class="hljs-keyword">private</span> UserRepository userRepository;    <span class="hljs-keyword">private</span> RoleRepository roleRepository;    <span class="hljs-keyword">private</span> CustomPassword passwordEncoder;    <span class="hljs-keyword">public</span> <span class="hljs-title function_">UserServiceImpl</span><span class="hljs-params">(UserRepository userRepository,</span><span class="hljs-params">            RoleRepository roleRepository,</span><span class="hljs-params">            CustomPassword passwordEncoder)</span> &#123;        <span class="hljs-built_in">this</span>.userRepository = userRepository;        <span class="hljs-built_in">this</span>.roleRepository = roleRepository;        <span class="hljs-built_in">this</span>.passwordEncoder = passwordEncoder;    &#125;    <span class="hljs-comment">// other your methods here</span>&#125;</code></pre><h2 id="Conclusion-2">Conclusion</h2><p>this are important part for <strong>spring boot custom password encoder</strong>, for full spring application project with <strong>spring boot custom password encoder</strong> implementation you can view my sample project on <a href="https://github.com/dimaslanjaka/Java/tree/master/Spring%20User%20Management">Github</a>.</p>]]></content:encoded>
      
      
      <category domain="https://www.webmanajemen.com/categories/programming/">programming</category>
      
      
      <category domain="https://www.webmanajemen.com/tags/java/">java</category>
      
      <category domain="https://www.webmanajemen.com/tags/spring-boot/">spring-boot</category>
      
      
      <comments>https://www.webmanajemen.com/2024/01/spring-boot-custom-passwordEncoder.html#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>how to setup local site domain vhost xampp windows 2024</title>
      <link>https://www.webmanajemen.com/2024/01/how-to-setup-local-domain-vhost-xampp-windows.html</link>
      <guid>https://www.webmanajemen.com/2024/01/how-to-setup-local-domain-vhost-xampp-windows.html</guid>
      <pubDate>Fri, 05 Jan 2024 10:20:40 GMT</pubDate>
      
      <description>how to setup local site domain vhost xampp windows 2024</description>
      
      
      
      <content:encoded><![CDATA[<p>How to setup vhost config on xampp for local site domain, support for multiple local site.</p><h2 id="Setup-hosts">Setup hosts</h2><pre><code class="hljs php"><span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span>    localhost<span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span>    mysite-dev.com<span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span>    anothersite-dev.com</code></pre><h2 id="Setup-httpd-vhost-conf">Setup httpd-vhost.conf</h2><pre><code class="hljs conf">&lt;VirtualHost *:80&gt;  DocumentRoot C:/xampp/htdocs/  ServerName localhost&lt;/VirtualHost&gt;&lt;VirtualHost *:80&gt;    ServerName mysite-dev.com # domain name    DocumentRoot &quot;D:/Workspaces/PHP/ISP&quot;    &lt;Directory &quot;D:/Workspaces/PHP/ISP&quot;&gt;        Options Indexes FollowSymLinks        # AllowOverride All      # Deprecated        # Order Allow,Deny       # Deprecated        # Allow from all         # Deprecated        # --New way of doing it        Require all granted    &lt;/Directory&gt;&lt;/VirtualHost&gt;</code></pre><p>you can add more virtual host, like:</p><blockquote><p>using forward slash <code>/</code> instead of back slash <code>\</code></p></blockquote><pre><code class="hljs conf">&lt;VirtualHost *:80&gt;    ServerName yourdomain.tld    DocumentRoot &quot;your/directory&quot;    &lt;Directory &quot;your/directory&quot;&gt;        Options Indexes FollowSymLinks        Require all granted    &lt;/Directory&gt;&lt;/VirtualHost&gt;</code></pre><h2 id="Setup-httpd-xampp-conf">Setup httpd-xampp.conf</h2><p>this required for <code>mod_rewrite</code> module works. add new line:</p><pre><code class="hljs conf">&lt;Directory &quot;D:/Workspaces/PHP/ISP&quot;&gt;    AllowOverride All    Require all granted&lt;/Directory&gt;</code></pre><blockquote><p>change <strong>D:/Workspaces/PHP/ISP</strong> to your directory</p></blockquote><p>All sets, try start xampp.</p>]]></content:encoded>
      
      
      <category domain="https://www.webmanajemen.com/categories/programming/">programming</category>
      
      
      <category domain="https://www.webmanajemen.com/tags/php/">php</category>
      
      <category domain="https://www.webmanajemen.com/tags/apache/">apache</category>
      
      <category domain="https://www.webmanajemen.com/tags/xampp/">xampp</category>
      
      
      <comments>https://www.webmanajemen.com/2024/01/how-to-setup-local-domain-vhost-xampp-windows.html#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Geckoview cangoback equivalent of android webview.canGoBack</title>
      <link>https://www.webmanajemen.com/2023/11/geckoview-equivalent-cangoback-android-webview.html</link>
      <guid>https://www.webmanajemen.com/2023/11/geckoview-equivalent-cangoback-android-webview.html</guid>
      <pubDate>Fri, 10 Nov 2023 23:41:10 GMT</pubDate>
      
      <description>Geckoview cangoback equivalent of android webview.canGoBack How can i use canGoBack on GeckoView? below is sample default android webview canGoBack implemention canGoBack public void onBackPressed if </description>
      
      
      
      <content:encoded><![CDATA[<h2 id="How-can-i-use-canGoBack-on-GeckoView">How can i use canGoBack() on GeckoView?</h2><p>below is sample default android webview <code>canGoBack()</code> implemention</p><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onBackPressed</span><span class="hljs-params">()</span> &#123;    <span class="hljs-keyword">if</span> (webView.canGoBack()) &#123;        webView.goBack();    &#125; <span class="hljs-keyword">else</span> &#123;        <span class="hljs-built_in">super</span>.onBackPressed();    &#125;&#125;</code></pre><p>on geckoview</p><blockquote><p>You need to set a navigation delegate on the gecko session and use a global boolean to keep track of whether it can go back or not.</p></blockquote><h2 id="Java">Java</h2><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-type">boolean</span> <span class="hljs-variable">canGoBack</span> <span class="hljs-operator">=</span> <span class="hljs-literal">false</span>;<span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MainActivity</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AppCompatActivity</span> &#123;   <span class="hljs-meta">@Override</span>   <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onCreate</span><span class="hljs-params">(Bundle savedInstanceState)</span> &#123;       <span class="hljs-built_in">super</span>.onCreate(savedInstanceState);       session.setNavigationDelegate(<span class="hljs-keyword">new</span> <span class="hljs-title class_">GeckoSession</span>.NavigationDelegate() &#123;                  <span class="hljs-meta">@Override</span>                  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onCanGoBack</span><span class="hljs-params">(<span class="hljs-meta">@NonNull</span> GeckoSession session, <span class="hljs-type">boolean</span> canGoBack)</span> &#123;                      MainActivity.<span class="hljs-built_in">this</span>.canGoBack = canGoBack;                  &#125;         &#125;);   &#125;&#125;</code></pre><h2 id="Kotlin">Kotlin</h2><pre><code class="hljs kotlin">session.navigationDelegate = <span class="hljs-keyword">object</span> : NavigationDelegate &#123;    <span class="hljs-keyword">override</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">onCanGoBack</span><span class="hljs-params">(session: <span class="hljs-type">GeckoSession</span>, canGoBack: <span class="hljs-type">Boolean</span>)</span></span> &#123;        <span class="hljs-comment">// equivalent of webview.canGoBack</span>        <span class="hljs-keyword">this</span><span class="hljs-symbol">@MainActivity</span>.canGoBack = canGoBack    &#125;&#125;</code></pre>]]></content:encoded>
      
      
      <category domain="https://www.webmanajemen.com/categories/programming/">programming</category>
      
      
      <category domain="https://www.webmanajemen.com/tags/android/">android</category>
      
      <category domain="https://www.webmanajemen.com/tags/webview/">webview</category>
      
      <category domain="https://www.webmanajemen.com/tags/java/">java</category>
      
      <category domain="https://www.webmanajemen.com/tags/kotlin/">kotlin</category>
      
      <category domain="https://www.webmanajemen.com/tags/geckoview/">geckoview</category>
      
      
      <comments>https://www.webmanajemen.com/2023/11/geckoview-equivalent-cangoback-android-webview.html#disqus_thread</comments>
      
    </item>
    
  </channel>
</rss>
